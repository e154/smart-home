name: Build and Deploy

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
    branches:
      - main

env:
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  build_public:
    name: Build public
    strategy:
      matrix:
        node: [ 16 ]
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.artifact-upload-step.outputs.artifact-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node ${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Build public
        id: build-public
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: make build_public

      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: public_build
          path: ./build
          retention-days: 1

      - name: Output artifact ID
        run: echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'

  build_common:
    name: Build common
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.artifact-upload-step.outputs.artifact-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build common
        id: build-common
        run: make build_common_structure

      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: common_build
          path: ./tmp/common
          retention-days: 1

      - name: Output artifact ID
        run: echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'

      - name: upload common artifact
        uses: softprops/action-gh-release@v2
        with:
          files: ./common.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_artifacts:
    name: Build artefacts
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go_version:
          - 1.23.0
        include:
          - target: artifact-all
    needs: [ build_public ]
    steps:
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}

      - env:
          OUTPUT1: ${{needs.build_public.outputs.output1}}
        run: echo "Artifact ID from previous job is $OUTPUT1"

      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: public_build
          path: ./build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: create .env
        id: create-env
        run: make create_env

      - name: Configure environment
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env

      - name: trying to build artefacts
        uses: docker/bake-action@v5
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ matrix.target }}
          set: |
            *.cache-from=type=gha,scope=base
            goxx.args.GO_VERSION=${{ matrix.go_version }}

      - name: List artifacts
        if: ${{ matrix.target == 'artifact-all' }}
        run: |
          tree -nh ./dist

      - name: Build archive
        id: build-archive
        run: make build_archive

      - name: upload builds
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./linux_amd64.tar.gz
            ./linux_arm64.tar.gz
            ./linux_arm_v6.tar.gz
            ./linux_arm_v7.tar.gz
            ./linux_ppc64le.tar.gz
            ./linux_riscv64.tar.gz
            ./linux_s390x.tar.gz
            ./windows_amd64.tar.gz
            ./windows_arm64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker_image_upload:
    name: Upload docker images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go_version:
          - 1.23.0
        include:
          - target: image-all
    needs: [ build_public ]
    steps:
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}

      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: public_build
          path: ./build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: create .env
        id: create-env
        run: make create_env

      - name: Configure environment
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env

      - name: Login to DockerHub
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: trying to build artefacts
        uses: docker/bake-action@v5
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ matrix.target }}
          set: |
            *.cache-from=type=gha,scope=base
            goxx.args.GO_VERSION=${{ matrix.go_version }}
          push: true
