name: Testing

on:
  push:
    branches:
      - "*"
    tags:
      - "*"

jobs:
  build_public:
    if: github.event.base_ref != 'refs/heads/master'
    name: Testing public
    strategy:
      matrix:
        node: [ 16 ]
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.artifact-upload-step.outputs.artifact-id }}
    steps:
      - name: Install Node ${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build public
        id: build-public
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: make build_public

      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: public_build
          path: /home/runner/work/smart-home/smart-home/build

      - name: Output artifact ID
        run: echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'

#  test_amd64:
#    if: github.event.base_ref != 'refs/heads/master'
#    name: Testing amd64
#    runs-on: ubuntu-latest
#
#    services:
#      # Label used to access the service container
#      postgres:
#        # Docker Hub image
#        image: postgis/postgis:11-3.3
#        # Provide the password for postgres
#        env:
#          POSTGRES_DB: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_USER: postgres
#        # Set health checks to wait until postgres has started
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - 5432:5432
#
#    steps:
#      - name: Install PostgreSQL client
#        run: |
#          sudo apt-get update
#          sudo apt-get install --yes postgresql-client
#          sudo apt-get -y install libpq-dev
#
#      - name: set up postgres
#        run: |
#          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c 'CREATE DATABASE smart_home_test;' -U postgres
#          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c "CREATE USER smart_home WITH PASSWORD 'smart_home';" -U postgres
#          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c "ALTER ROLE smart_home SUPERUSER;" -U postgres
#          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c "CREATE EXTENSION pgcrypto;" -U postgres smart_home_test;
#          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c "CREATE EXTENSION Postgis;" -U postgres smart_home_test;
#
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up Go
#        uses: actions/setup-go@v2
#        with:
#          go-version: 1.22.0
#
#      - name: Set up Node
#        uses: actions/setup-node@v2
#        with:
#          node-version: '16'
#
#      - name: Prepary deps
#        run: |
#          echo -e "machine github.com\n  login ${{ secrets.GITHUBTOKEN }}" > ~/.netrc
#          make get_deps
#
#      - name: Build public
#        id: build-public
#        env:
#          NODE_OPTIONS: "--max_old_space_size=4096"
#        run: make build_public
#
#      - name: Unit tests
#        id: test-code
#        run: make test
#
#      - name: System tests
#        id: system-code
#        run: make test_system
#
#      - name: Upload coverage reports to Codecov
#        uses: codecov/codecov-action@v3
#        env:
#          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
#
#      - name: trying to build
#        id: build-linux
#        run: make build_linux_amd64 build_structure build_common_structure build_archive docker_image_linux_amd64

  test_armv7l:
    if: github.event.base_ref != 'refs/heads/master'
    name: Testing armv7l
    strategy:
      matrix:
        go: [ 1.19 ]
    runs-on: [self-hosted, Linux, armv7l]
    needs: build_public
    steps:
#      - name: Install Go ${{ matrix.go }}
#        uses: actions/setup-go@v2
#        with:
#          go-version: ${{ matrix.go }}

      - env:
          OUTPUT1: ${{needs.job1.outputs.output1}}
        run: echo "Artifact ID from previous job is $OUTPUT1"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepary go deps
        run: |
          echo -e "machine github.com\n  login ${{ secrets.GITHUBTOKEN }}" > ~/.netrc
          make get_deps

      - name: Build public
        id: build-public
        env:
          NODE_OPTIONS: "--max_old_space_size=512"
        run: make build_public

      - name: Unit tests
        id: test-code
        run: make test

      - name: trying to build
        id: build-linux
        run: make build_linux_armv7l build_structure build_common_structure build_archive docker_image_linux_armv7l
