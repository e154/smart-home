name: Testing

on:
  push:
    branches:
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - '!master'   # excludes master
      - '!docs'     # excludes docs
      - '!gh-pages' # excludes gh-pages

env:
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build_public:
    name: Build public
    strategy:
      matrix:
        node: [ 16 ]
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.artifact-upload-step.outputs.artifact-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node ${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Build public
        id: build-public
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: make build_public

      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: public_build
          path: ./build
          retention-days: 1

      - name: Output artifact ID
        run: echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'

  build_common:
    name: Build common
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.artifact-upload-step.outputs.artifact-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build common
        id: build-common
        run: make build_common_structure

      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: common_build
          path: ./tmp/common
          retention-days: 1

      - name: Output artifact ID
        run: echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'

  run_tests:
    name: Run linux test
    strategy:
      matrix:
        go: [ 1.23 ]
    runs-on: ubuntu-latest
    needs: [ build_public ]

    services:
      postgres:
        image: postgis/postgis:11-3.3
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: public_build
          path: ./build

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client
          sudo apt-get -y install libpq-dev

      - name: set up postgres
        run: |
          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c 'CREATE DATABASE smart_home_test;' -U postgres
          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c "CREATE USER smart_home WITH PASSWORD 'smart_home';" -U postgres
          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c "ALTER ROLE smart_home SUPERUSER;" -U postgres
          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c "CREATE EXTENSION pgcrypto;" -U postgres smart_home_test;
          export PGPASSWORD=postgres && psql -h localhost -p 5432 -c "CREATE EXTENSION Postgis;" -U postgres smart_home_test;

      - name: Install Go ${{ matrix.go }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Prepary deps
        run: |
          echo -e "machine github.com\n  login ${{ secrets.GITHUBTOKEN }}" > ~/.netrc
          make get_deps

      - name: Unit tests
        id: test-code
        run: make test

      - name: System tests
        id: system-code
        run: make test_system

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build_artifacts:
    name: Build artefacts
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go_version:
          - 1.23.0
        include:
          - target: artifact-all

    needs: [ build_public ]
    steps:

      - env:
          OUTPUT1: ${{needs.build_public.outputs.output1}}
        run: echo "Artifact ID from previous job is $OUTPUT1"

      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: public_build
          path: ./build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: create .env
        id: create-env
        run: make create_env

      - name: Configure environment
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env

      - name: trying to build artefacts
        uses: docker/bake-action@v5
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ matrix.target }}
          set: |
            *.cache-from=type=gha,scope=base
            goxx.args.GO_VERSION=${{ matrix.go_version }}

      - name: List artifacts
        if: ${{ matrix.target == 'artifact-all' }}
        run: |
          tree -nh ./dist
