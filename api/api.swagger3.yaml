openapi: 3.0.1
info:
  title: Smart home api
  description: This documentation describes APIs found under https://github.com/e154/smart-home
  contact:
    name: Alex Filippov
    url: https://e154.github.io/smart-home/
    email: support@e154.ru
  version: "1.0"
servers:
  - url: /
security:
  - ApiKeyAuth: [ ]
  - BasicAuth: [ ]
tags:
  - name: ActionService
  - name: AreaService
  - name: AuthService
  - name: AutomationService
  - name: BackupService
  - name: ConditionService
  - name: DashboardService
  - name: DashboardCardService
  - name: DashboardCardItemService
  - name: DashboardTabService
  - name: DeveloperToolsService
  - name: EntityService
  - name: EntityStorageService
  - name: ImageService
  - name: InteractService
  - name: LogService
  - name: MessageDeliveryService
  - name: MetricService
  - name: MqttService
  - name: PluginService
  - name: RoleService
  - name: ScriptService
  - name: StreamService
  - name: TriggerService
  - name: UserService
  - name: VariableService
  - name: Zigbee2mqttService
paths:
  /v1/access_list:
    get:
      tags:
        - AuthService
      summary: get user access list object
      operationId: AuthService_AccessList
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiAccessListResponse'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/action:
    post:
      tags:
        - ActionService
      summary: add new action
      operationId: ActionService_AddAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewActionRequest'
        required: true
      responses:
        201:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiAction'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/action/{id}:
    get:
      tags:
        - ActionService
      summary: get action by id
      operationId: ActionService_GetActionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiAction'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '404':
          $ref: '#/components/responses/HTTP-404'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - ActionService
      summary: update action
      operationId: ActionService_UpdateAction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ name, description ]
              properties:
                name:
                  type: string
                description:
                  type: string
                scriptId:
                  type: integer
                  format: int64
                areaId:
                  type: integer
                  format: int64
                entityId:
                  type: string
                entityActionName:
                  type: string
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiAction'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - ActionService
      summary: delete action
      operationId: ActionService_DeleteAction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/actions:
    get:
      tags:
        - ActionService
      summary: get action list
      operationId: ActionService_GetActionList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - $ref: '#/components/parameters/ids'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetActionListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/actions/search:
    get:
      tags:
        - ActionService
      summary: search action
      operationId: ActionService_SearchAction
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchActionResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/area:
    post:
      tags:
        - AreaService
      summary: add new area
      operationId: AreaService_AddArea
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewAreaRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiArea'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/area/{id}:
    get:
      tags:
        - AreaService
      summary: get area by id
      operationId: AreaService_GetAreaById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiArea'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - AreaService
      summary: update area
      operationId: AreaService_UpdateArea
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ name, description, polygon, zoom, resolution ]
              properties:
                name:
                  type: string
                description:
                  type: string
                polygon:
                  type: array
                  items:
                    $ref: '#/components/schemas/apiAreaLocation'
                center:
                  $ref: '#/components/schemas/apiAreaLocation'
                zoom:
                  type: number
                  format: float
                resolution:
                  type: number
                  format: float
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiArea'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - AreaService
      summary: delete area
      operationId: AreaService_DeleteArea
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/areas:
    get:
      tags:
        - AreaService
      summary: get area list
      operationId: AreaService_GetAreaList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetAreaListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/areas/search:
    get:
      tags:
        - AreaService
      summary: search area
      operationId: AreaService_SearchArea
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchAreaResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/backups:
    get:
      tags:
        - BackupService
      summary: get backup list
      operationId: BackupService_GetBackupList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetBackupListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    post:
      tags:
        - BackupService
      summary: new backup
      operationId: BackupService_NewBackup
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/backup/upload:
    post:
      tags:
        - BackupService
      summary: upload backup file
      operationId: BackupService_UploadBackup
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiBackup'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '413':
          $ref: '#/components/responses/HTTP-413'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/backup/apply:
    post:
      tags:
        - BackupService
      summary: apply state
      operationId: BackupService_ApplyState
      responses:
        200:
          description: A successful response.
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/backup/rollback:
    post:
      tags:
        - BackupService
      summary: revert state
      operationId: BackupService_RevertState
      responses:
        200:
          description: A successful response.
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/backup/{name}:
    put:
      tags:
        - BackupService
      summary: restore backup
      operationId: BackupService_RestoreBackup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - BackupService
      summary: delete backup
      operationId: BackupService_DeleteBackup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/condition:
    post:
      tags:
        - ConditionService
      summary: add new condition
      operationId: ConditionService_AddCondition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewConditionRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiCondition'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/condition/{id}:
    get:
      tags:
        - ConditionService
      summary: get condition by id
      operationId: ConditionService_GetConditionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiCondition'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - ConditionService
      summary: update condition
      operationId: ConditionService_UpdateCondition
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ name, description ]
              properties:
                name:
                  type: string
                description:
                  type: string
                scriptId:
                  type: integer
                  format: int64
                areaId:
                  type: integer
                  format: int64
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiCondition'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - ConditionService
      summary: delete condition
      operationId: ConditionService_DeleteCondition
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/conditions:
    get:
      tags:
        - ConditionService
      summary: get condition list
      operationId: ConditionService_GetConditionList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - $ref: '#/components/parameters/ids'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetConditionListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/conditions/search:
    get:
      tags:
        - ConditionService
      summary: search condition
      operationId: ConditionService_SearchCondition
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchConditionResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/dashboard:
    post:
      tags:
        - DashboardService
      summary: add new dashboard
      operationId: DashboardService_AddDashboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewDashboardRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboard'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/dashboard/{id}:
    get:
      tags:
        - DashboardService
      summary: get dashboard by id
      operationId: DashboardService_GetDashboardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboard'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - DashboardService
      summary: update dashboard
      operationId: DashboardService_UpdateDashboard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ name, description, enabled ]
              properties:
                name:
                  type: string
                description:
                  type: string
                enabled:
                  type: boolean
                areaId:
                  type: integer
                  format: int64
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboard'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - DashboardService
      summary: delete dashboard
      operationId: DashboardService_DeleteDashboard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/dashboard_card:
    post:
      tags:
        - DashboardCardService
      summary: add new dashboard_card
      operationId: DashboardCardService_AddDashboardCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewDashboardCardRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardCard'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/dashboard_card/import:
    post:
      tags:
        - DashboardCardService
      summary: import dashboard_card
      operationId: DashboardCardService_ImportDashboardCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiDashboardCard'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardCard'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/dashboard_card/{id}:
    get:
      tags:
        - DashboardCardService
      summary: get dashboard_card by id
      operationId: DashboardCardService_GetDashboardCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardCard'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - DashboardCardService
      summary: update dashboard_card
      operationId: DashboardCardService_UpdateDashboardCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ title, height, weight, width, enabled, hidden, dashboardTabId, payload, items ]
              properties:
                title:
                  type: string
                height:
                  type: integer
                  format: int32
                width:
                  type: integer
                  format: int32
                background:
                  type: string
                weight:
                  type: integer
                  format: int32
                enabled:
                  type: boolean
                dashboardTabId:
                  type: integer
                  format: int64
                payload:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/UpdateDashboardCardRequestItem'
                hidden:
                  type: boolean
                entityId:
                  type: string
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardCard'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - DashboardCardService
      summary: delete dashboard_card
      operationId: DashboardCardService_DeleteDashboardCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/dashboard_card_item:
    post:
      tags:
        - DashboardCardItemService
      summary: add new dashboard_card
      operationId: DashboardCardItemService_AddDashboardCardItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewDashboardCardItemRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardCardItem'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/dashboard_card_item/{id}:
    get:
      tags:
        - DashboardCardItemService
      summary: get dashboard_card_item by id
      operationId: DashboardCardItemService_GetDashboardCardItemById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardCardItem'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - DashboardCardItemService
      summary: update dashboard_card_item
      operationId: DashboardCardItemService_UpdateDashboardCardItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ title, type, weight, enabled, dashboardCardId, payload, hidden, frozen ]
              properties:
                title:
                  type: string
                type:
                  type: string
                weight:
                  type: integer
                  format: int32
                enabled:
                  type: boolean
                dashboardCardId:
                  type: integer
                  format: int64
                entityId:
                  type: string
                payload:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
                hidden:
                  type: boolean
                frozen:
                  type: boolean
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardCardItem'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - DashboardCardItemService
      summary: delete dashboard_card_item
      operationId: DashboardCardItemService_DeleteDashboardCardItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/dashboard_card_items:
    get:
      tags:
        - DashboardCardItemService
      summary: get dashboard_card_item list
      operationId: DashboardCardItemService_GetDashboardCardItemList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetDashboardCardItemListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/dashboard_cards:
    get:
      tags:
        - DashboardCardService
      summary: get dashboard_card list
      operationId: DashboardCardService_GetDashboardCardList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetDashboardCardListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/dashboard_tab:
    post:
      tags:
        - DashboardTabService
      summary: add new dashboard_tab
      operationId: DashboardTabService_AddDashboardTab
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewDashboardTabRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardTab'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/dashboard_tab/{id}:
    get:
      tags:
        - DashboardTabService
      summary: get dashboard_tab by id
      operationId: DashboardTabService_GetDashboardTabById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardTab'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - DashboardTabService
      summary: update dashboard
      operationId: DashboardTabService_UpdateDashboardTab
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ name, icon, columnWidth, gap, enabled, weight, dashboardId ]
              properties:
                name:
                  type: string
                columnWidth:
                  type: integer
                  format: int32
                gap:
                  type: boolean
                background:
                  type: string
                icon:
                  type: string
                enabled:
                  type: boolean
                weight:
                  type: integer
                  format: int32
                dashboardId:
                  type: integer
                  format: int64
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboardTab'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - DashboardTabService
      summary: delete dashboard_tab
      operationId: DashboardTabService_DeleteDashboardTab
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/dashboard_tabs:
    get:
      tags:
        - DashboardTabService
      summary: get dashboard_tab list
      operationId: DashboardTabService_GetDashboardTabList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetDashboardTabListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/dashboards:
    get:
      tags:
        - DashboardService
      summary: get dashboard list
      operationId: DashboardService_GetDashboardList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetDashboardListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/dashboards/import:
    post:
      tags:
        - DashboardService
      summary: import dashboard
      operationId: DashboardService_ImportDashboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiDashboard'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDashboard'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/dashboards/search:
    get:
      tags:
        - DashboardService
      summary: search area
      operationId: DashboardService_SearchDashboard
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchDashboardResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/developer_tools/automation/call_action:
    post:
      tags:
        - DeveloperToolsService
      summary: call action
      operationId: DeveloperToolsService_CallAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiAutomationRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/developer_tools/automation/call_trigger:
    post:
      tags:
        - DeveloperToolsService
      summary: call trigger
      operationId: DeveloperToolsService_CallTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiAutomationRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/developer_tools/bus/state:
    get:
      tags:
        - DeveloperToolsService
      summary: bas state
      operationId: DeveloperToolsService_GetEventBusStateList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiEventBusStateListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/developer_tools/entity/reload:
    post:
      tags:
        - DeveloperToolsService
      summary: reload entity
      operationId: DeveloperToolsService_ReloadEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiReloadRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/developer_tools/entity/set_state:
    post:
      tags:
        - DeveloperToolsService
      summary: entity set state
      operationId: DeveloperToolsService_EntitySetState
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiEntityRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/entities:
    get:
      tags:
        - EntityService
      summary: get entity list
      operationId: EntityService_GetEntityList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - $ref: '#/components/parameters/query'
        - name: plugin
          in: query
          schema:
            type: string
        - name: area
          in: query
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetEntityListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/entities/import:
    post:
      tags:
        - EntityService
      summary: import entity
      operationId: EntityService_ImportEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiEntity'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/entity:
    post:
      tags:
        - EntityService
      summary: add new entity
      operationId: EntityService_AddEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewEntityRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiEntity'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/entity/search:
    get:
      tags:
        - EntityService
      summary: search entity
      operationId: EntityService_SearchEntity
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchEntityResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/entity/{id}:
    get:
      tags:
        - EntityService
      summary: get entity
      operationId: EntityService_GetEntity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiEntity'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - EntityService
      summary: update entity
      operationId: EntityService_UpdateEntity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ id, description, pluginName, autoLoad, attributes, settings,
                          metrics, actions, states, scriptIds ]
              properties:
                id:
                  type: string
                name:
                  type: string
                pluginName:
                  type: string
                description:
                  type: string
                areaId:
                  type: integer
                  format: int64
                icon:
                  type: string
                imageId:
                  type: integer
                  format: int64
                autoLoad:
                  type: boolean
                parentId:
                  type: string
                actions:
                  type: array
                  items:
                    $ref: '#/components/schemas/apiUpdateEntityRequestAction'
                states:
                  type: array
                  items:
                    $ref: '#/components/schemas/apiUpdateEntityRequestState'
                attributes:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/apiAttribute'
                settings:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/apiAttribute'
                scriptIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                metrics:
                  type: array
                  items:
                    $ref: '#/components/schemas/apiMetric'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiEntity'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - EntityService
      summary: delete entity
      operationId: EntityService_DeleteEntity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/entity/{id}/disable:
    post:
      tags:
        - EntityService
      summary: disable entity
      operationId: EntityService_DisabledEntity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/entity/{id}/enable:
    post:
      tags:
        - EntityService
      summary: enabled entity
      operationId: EntityService_EnabledEntity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/entity_storage:
    get:
      tags:
        - EntityStorageService
      operationId: EntityStorageService_GetEntityStorageList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/entityIds'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetEntityStorageResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/image:
    post:
      tags:
        - ImageService
      summary: add new image
      operationId: ImageService_AddImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewImageRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiImage'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/image/upload:
    post:
      tags:
        - ImageService
      summary: upload image
      operationId: ImageService_UploadImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiImage'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/image/{id}:
    get:
      tags:
        - ImageService
      summary: get image by id
      operationId: ImageService_GetImageById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiImage'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - ImageService
      summary: update image
      operationId: ImageService_UpdateImageById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ thumb, image, mimeType, title, size, name ]
              properties:
                thumb:
                  type: string
                image:
                  type: string
                mimeType:
                  type: string
                title:
                  type: string
                size:
                  type: integer
                  format: int64
                name:
                  type: string
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiImage'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - ImageService
      summary: delete image by id
      operationId: ImageService_DeleteImageById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/images:
    get:
      tags:
        - ImageService
      summary: get image list
      operationId: ImageService_GetImageList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetImageListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/images/filter_list:
    get:
      tags:
        - ImageService
      summary: get image filter list
      operationId: ImageService_GetImageFilterList
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetImageFilterListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/images/filtered:
    get:
      tags:
        - ImageService
      summary: get image list by date
      operationId: ImageService_GetImageListByDate
      parameters:
        - name: filter
          in: query
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetImageListByDateResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeGetLogListyAuth: [ ]
  /v1/interact/entity/call_action:
    post:
      tags:
        - InteractService
      summary: entity call action
      operationId: InteractService_EntityCallAction
      requestBody:
        content:
          applGetLogListication/json:
            schema:
              $ref: '#/components/schemas/apiEntityCallActionRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/logs:
    get:
      tags:
        - LogService
      operationId: LogService_GetLogList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/query'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetLogListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/message_delivery:
    get:
      tags:
        - MessageDeliveryService
      summary: get list
      operationId: MessageDeliveryService_GetMessageDeliveryList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - name: messageType
          in: query
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetMessageDeliveryListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/metric:
    get:
      tags:
        - MetricService
      summary: get metric
      operationId: MetricService_GetMetric
      parameters:
        - $ref: '#/components/parameters/metricId'
        - $ref: '#/components/parameters/metricRange'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiMetric'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/mqtt/client/{id}:
    get:
      tags:
        - MqttService
      summary: get client by id
      operationId: MqttService_GetClientById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiClient'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/mqtt/clients:
    get:
      tags:
        - MqttService
      summary: get client list
      operationId: MqttService_GetClientList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetClientListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/mqtt/subscriptions:
    get:
      tags:
        - MqttService
      summary: get subscription list
      operationId: MqttService_GetSubscriptionList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - name: clientId
          in: query
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetSubscriptionListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/password_reset:
    post:
      tags:
        - AuthService
      summary: sign out user
      operationId: AuthService_PasswordReset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiPasswordResetRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/plugin/{name}:
    get:
      tags:
        - PluginService
      summary: get plugin
      operationId: PluginService_GetPlugin
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiPlugin'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/plugin/{name}/disable:
    post:
      tags:
        - PluginService
      summary: disable plugin
      operationId: PluginService_DisablePlugin
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDisablePluginResult'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/plugin/{name}/enable:
    post:
      tags:
        - PluginService
      summary: enable plugin
      operationId: PluginService_EnablePlugin
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiEnablePluginResult'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/plugin/{name}/settings:
    put:
      tags:
        - PluginService
      summary: update plugin settings
      operationId: PluginService_UpdatePluginSettings
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ settings ]
              properties:
                settings:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/apiAttribute'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/plugin/{name}/readme:
    get:
      tags:
        - PluginService
      summary: get plugin readme
      operationId: PluginService_GetPluginReadme
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: lang
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Accept-JSON'
      responses:
        200:
          description: A successful response.
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '404':
          $ref: '#/components/responses/HTTP-404'
      security:
        - ApiKeyAuth: [ ]
  /v1/plugins:
    get:
      tags:
        - PluginService
      summary: get plugin list
      operationId: PluginService_GetPluginList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetPluginListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/plugins/search:
    get:
      tags:
        - PluginService
      summary: search plugin
      operationId: PluginService_SearchPlugin
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchPluginResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/role:
    post:
      tags:
        - RoleService
      summary: add new role
      operationId: RoleService_AddRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewRoleRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiRole'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/role/{name}:
    get:
      tags:
        - RoleService
      summary: get role by name
      operationId: RoleService_GetRoleByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiRole'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - RoleService
      summary: update role
      operationId: RoleService_UpdateRoleByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ description ]
              properties:
                description:
                  type: string
                parent:
                  type: string
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiRole'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - RoleService
      summary: delete role by name
      operationId: RoleService_DeleteRoleByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/role/{name}/access_list:
    get:
      tags:
        - RoleService
      summary: get role access list
      operationId: RoleService_GetRoleAccessList
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiRoleAccessListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - RoleService
      summary: update role access list
      operationId: RoleService_UpdateRoleAccessList
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ accessListDiff ]
              properties:
                accessListDiff:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/UpdateRoleAccessListRequestAccessListDiff'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiRoleAccessListResult'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/roles:
    get:
      tags:
        - RoleService
      summary: get role list
      operationId: RoleService_GetRoleList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetRoleListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/roles/search:
    get:
      tags:
        - RoleService
      summary: delete role by name
      operationId: RoleService_SearchRoleByName
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchRoleListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/script:
    post:
      tags:
        - ScriptService
      summary: add new script
      operationId: ScriptService_AddScript
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewScriptRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiScript'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/script/exec_src:
    post:
      tags:
        - ScriptService
      summary: exec src script by id
      operationId: ScriptService_ExecSrcScriptById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiExecSrcScriptRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiExecScriptResult'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/script/{id}:
    get:
      tags:
        - ScriptService
      summary: get script by id
      operationId: ScriptService_GetScriptById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiScript'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - ScriptService
      summary: update script
      operationId: ScriptService_UpdateScriptById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ lang, name, source, description ]
              properties:
                lang:
                  type: string
                name:
                  type: string
                source:
                  type: string
                description:
                  type: string
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiScript'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - ScriptService
      summary: delete script by id
      operationId: ScriptService_DeleteScriptById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/script/{id}/copy:
    post:
      tags:
        - ScriptService
      summary: copy script by id
      operationId: ScriptService_CopyScriptById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiScript'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/script/{id}/exec:
    post:
      tags:
        - ScriptService
      summary: exec script by id
      operationId: ScriptService_ExecScriptById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiExecScriptResult'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/scripts:
    get:
      tags:
        - ScriptService
      summary: get script list
      operationId: ScriptService_GetScriptList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - $ref: '#/components/parameters/ids'
        - $ref: '#/components/parameters/query'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetScriptListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/scripts/search:
    get:
      tags:
        - ScriptService
      summary: delete script by id
      operationId: ScriptService_SearchScript
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchScriptListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/scripts/statistic:
    get:
      tags:
        - ScriptService
      summary: get statistic
      operationId: ScriptService_GetStatistic
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatistics'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/signin:
    post:
      tags:
        - AuthService
      summary: sign in user
      operationId: AuthService_Signin
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSigninResponse'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - BasicAuth: [ ]
  /v1/signout:
    post:
      tags:
        - AuthService
      summary: sign out user
      operationId: AuthService_Signout
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/task:
    post:
      tags:
        - AutomationService
      summary: add new task
      operationId: AutomationService_AddTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewTaskRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTask'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/task/{id}:
    get:
      tags:
        - AutomationService
      summary: get task
      operationId: AutomationService_GetTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTask'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - AutomationService
      summary: update task
      operationId: AutomationService_UpdateTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ name, description, enabled, condition, triggerIds, conditionIds, actionIds ]
              properties:
                name:
                  type: string
                description:
                  type: string
                enabled:
                  type: boolean
                condition:
                  type: string
                triggerIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                conditionIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                actionIds:
                  type: array
                  items:
                    type: integer
                    format: int64
                areaId:
                  type: integer
                  format: int64
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTask'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - AutomationService
      summary: delete task
      operationId: AutomationService_DeleteTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/task/{id}/disable:
    post:
      tags:
        - AutomationService
      summary: disable task
      operationId: AutomationService_DisableTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/task/{id}/enable:
    post:
      tags:
        - AutomationService
      summary: enable task
      operationId: AutomationService_EnableTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/tasks:
    get:
      tags:
        - AutomationService
      summary: get task list
      operationId: AutomationService_GetTaskList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetTaskListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/tasks/import:
    post:
      tags:
        - AutomationService
      summary: import task
      operationId: AutomationService_ImportTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiTask'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/trigger:
    post:
      tags:
        - TriggerService
      summary: add new trigger
      operationId: TriggerService_AddTrigger
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewTriggerRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTrigger'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/trigger/{id}:
    get:
      tags:
        - TriggerService
      summary: get trigger by id
      operationId: TriggerService_GetTriggerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTrigger'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - TriggerService
      summary: update trigger
      operationId: TriggerService_UpdateTrigger
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ name, description, pluginName, attributes, enabled, entityIds ]
              properties:
                name:
                  type: string
                description:
                  type: string
                entityIds:
                  type: array
                  items:
                    type: string
                script:
                  $ref: '#/components/schemas/apiScript'
                scriptId:
                  type: integer
                  format: int64
                areaId:
                  type: integer
                  format: int64
                pluginName:
                  type: string
                attributes:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/apiAttribute'
                enabled:
                  type: boolean
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiTrigger'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - TriggerService
      summary: delete trigger
      operationId: TriggerService_DeleteTrigger
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/triggers:
    get:
      tags:
        - TriggerService
      summary: get trigger list
      operationId: TriggerService_GetTriggerList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - $ref: '#/components/parameters/ids'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetTriggerListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/triggers/search:
    get:
      tags:
        - TriggerService
      summary: search trigger
      operationId: TriggerService_SearchTrigger
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchTriggerResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/triggers/{id}/disable:
    post:
      tags:
        - TriggerService
      summary: disable triggers
      operationId: TriggerService_DisableTrigger
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/triggers/{id}/enable:
    post:
      tags:
        - TriggerService
      summary: enable triggers
      operationId: TriggerService_EnableTrigger
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/user:
    post:
      tags:
        - UserService
      summary: add new user
      operationId: UserService_AddUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewtUserRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiUserFull'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/user/{id}:
    get:
      tags:
        - UserService
      summary: get user by id
      operationId: UserService_GetUserById
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiUserFull'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - UserService
      summary: update user by id
      operationId: UserService_UpdateUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ nickname, firstName, lang, email, status, lang, roleName, password, passwordRepeat ]
              properties:
                nickname:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                password:
                  type: string
                passwordRepeat:
                  type: string
                email:
                  type: string
                status:
                  type: string
                lang:
                  type: string
                imageId:
                  type: integer
                  format: int64
                roleName:
                  type: string
                meta:
                  type: array
                  items:
                    $ref: '#/components/schemas/apiUserMeta'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiUserFull'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - UserService
      summary: delete user by id
      operationId: UserService_DeleteUserById
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/users:
    get:
      tags:
        - UserService
      summary: get user list
      operationId: UserService_GetUserList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetUserListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/variable:
    post:
      tags:
        - VariableService
      summary: add new variable
      operationId: VariableService_AddVariable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewVariableRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiVariable'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/variable/{name}:
    get:
      tags:
        - VariableService
      summary: get variable by name
      operationId: VariableService_GetVariableByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiVariable'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    put:
      tags:
        - VariableService
      summary: update variable
      operationId: VariableService_UpdateVariable
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ value ]
              properties:
                value:
                  type: string
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiVariable'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - VariableService
      summary: delete variable
      operationId: VariableService_DeleteVariable
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/variables:
    get:
      tags:
        - VariableService
      summary: get variable list
      operationId: VariableService_GetVariableList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetVariableListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/zigbee2mqtt/bridge:
    get:
      tags:
        - Zigbee2mqttService
      summary: get bridge list
      operationId: Zigbee2mqttService_GetBridgeList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetBridgeListResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    post:
      tags:
        - Zigbee2mqttService
      summary: add new bridge
      operationId: Zigbee2mqttService_AddZigbee2mqttBridge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiNewZigbee2mqttRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiZigbee2mqtt'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/zigbee2mqtt/bridge/{id}:
    get:
      tags:
        - Zigbee2mqttService
      summary: get bridge
      operationId: Zigbee2mqttService_GetZigbee2mqttBridge
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiZigbee2mqtt'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    delete:
      tags:
        - Zigbee2mqttService
      summary: delete bridge by id
      operationId: Zigbee2mqttService_DeleteBridgeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/zigbee2mqtt/bridge/{id}/bridge:
    put:
      tags:
        - Zigbee2mqttService
      summary: update bridge by id
      operationId: Zigbee2mqttService_UpdateBridgeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/Accept-JSON'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [ name, login, permitJoin, baseTopic ]
              properties:
                name:
                  type: string
                login:
                  type: string
                password:
                  type: string
                permitJoin:
                  type: boolean
                baseTopic:
                  type: string
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiZigbee2mqtt'
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/zigbee2mqtt/bridge/{id}/devices:
    get:
      tags:
        - Zigbee2mqttService
      summary: list device
      operationId: Zigbee2mqttService_DeviceList
      parameters:
        - $ref: '#/components/parameters/listSort'
        - $ref: '#/components/parameters/listPage'
        - $ref: '#/components/parameters/listLimit'
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiDeviceListResult'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/zigbee2mqtt/bridge/{id}/networkmap:
    get:
      tags:
        - Zigbee2mqttService
      summary: networkmap
      operationId: Zigbee2mqttService_Networkmap
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiNetworkmapResponse'
        '404':
          $ref: '#/components/responses/HTTP-404'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
    post:
      tags:
        - Zigbee2mqttService
      summary: update networkmap
      operationId: Zigbee2mqttService_UpdateNetworkmap
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/zigbee2mqtt/bridge/{id}/reset:
    post:
      tags:
        - Zigbee2mqttService
      summary: reset bridge by id
      operationId: Zigbee2mqttService_ResetBridgeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
  /v1/zigbee2mqtt/device_ban:
    post:
      tags:
        - Zigbee2mqttService
      summary: device ban
      operationId: Zigbee2mqttService_DeviceBan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiDeviceBanRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/zigbee2mqtt/device_rename:
    post:
      tags:
        - Zigbee2mqttService
      summary: device rename
      operationId: Zigbee2mqttService_DeviceRename
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiDeviceRenameRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/zigbee2mqtt/device_whitelist:
    post:
      tags:
        - Zigbee2mqttService
      summary: device whitelist
      operationId: Zigbee2mqttService_DeviceWhitelist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiDeviceWhitelistRequest'
        required: true
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/HTTP-400'
        '401':
          $ref: '#/components/responses/HTTP-401'
        '409':
          $ref: '#/components/responses/HTTP-409'
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Accept-JSON'
  /v1/zigbee2mqtt/search_device:
    get:
      tags:
        - Zigbee2mqttService
      summary: search device
      operationId: Zigbee2mqttService_SearchDevice
      parameters:
        - $ref: '#/components/parameters/searchQuery'
        - $ref: '#/components/parameters/searchOffset'
        - $ref: '#/components/parameters/searchLimit'
      responses:
        200:
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiSearchDeviceResult'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
  /v1/ws:
    get:
      tags:
        - StreamService
      operationId: StreamService_Subscribe
      responses:
        200:
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiResponse'
        '401':
          $ref: '#/components/responses/HTTP-401'
      security:
        - ApiKeyAuth: [ ]
components:
  parameters:
    Accept-JSON:
      name: Accept
      in: header
      required: false
      schema:
        type: string
        default: application/json
        example: application/json
    ContentType-JSON:
      name: Content-Type
      in: header
      schema:
        type: string
        default: application/json
        example: application/json
      required: false
    searchQuery:
      name: query
      in: query
      schema:
        type: string
    searchLimit:
      name: limit
      in: query
      schema:
        type: integer
        format: int64
    searchOffset:
      name: offset
      in: query
      schema:
        type: integer
        format: int64
    metricId:
      name: id
      in: query
      required: true
      schema:
        type: integer
        format: int64
    metricRange:
      name: range
      in: query
      schema:
        type: string
        enum:
          - 6h
          - 12h
          - 24h
          - 7d
          - 30d
          - 1m
    listSort:
      name: sort
      in: query
      required: false
      schema:
        type: string
        example: '-created_at'
      description: Field on which to sort and its direction
    listPage:
      name: page
      in: query
      required: false
      schema:
        type: integer
        format: uint64
        example: 1
        default: 1
      description: Page number of the requested result set
    listLimit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: uint64
      description: The number of results returned on a page
    ids:
      name: ids[]
      in: query
      required: false
      schema:
        type: array
        items:
          type: integer
          format: uint64
      description: The number of results returned on a page
    startDate:
      name: startDate
      in: query
      required: false
      schema:
        type: string
        format: date-time
    endDate:
      name: endDate
      in: query
      required: false
      schema:
        type: string
        format: date-time
    entityIds:
      name: entityId[]
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    query:
      name: query
      in: query
      required: false
      schema:
        type: string
  schemas:
    GenericErrorResponse:
      title: Generic Error Response
      type: object
      description: Generic Error Response
      properties:
        message:
          type: string
        code:
          type: string

    AccessListListOfString:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            type: string
    GetImageFilterListResultfilter:
      type: object
      required: [ date, count ]
      properties:
        date:
          type: string
        count:
          type: integer
          format: int32
    UpdateDashboardCardRequestItem:
      type: object
      required: [ id, title, type, weight, enabled, payload, hidden, frozen ]
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        type:
          type: string
        weight:
          type: integer
          format: int32
        enabled:
          type: boolean
        entityId:
          type: string
        payload:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        hidden:
          type: boolean
        frozen:
          type: boolean
        showOn:
          type: array
          items:
            type: string
        hideOn:
          type: array
          items:
            type: string
    UpdateRoleAccessListRequestAccessListDiff:
      type: object
      required: [ items ]
      properties:
        items:
          type: object
          additionalProperties:
            type: boolean
    apiAccessItem:
      type: object
      required: [ actions, method, description, roleName ]
      properties:
        actions:
          type: array
          items:
            type: string
        method:
          type: string
        description:
          type: string
        roleName:
          type: string
    apiAccessLevels:
      type: object
      required: [ items ]
      properties:
        items:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAccessItem'
    apiAccessList:
      type: object
      required: [ levels ]
      properties:
        levels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAccessLevels'
    apiAccessListResponse:
      type: object
      properties:
        accessList:
          $ref: '#/components/schemas/apiAccessList'
    apiAction:
      type: object
      required: [ id, name, description, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        scriptId:
          type: integer
          format: int64
        script:
          $ref: '#/components/schemas/apiScript'
        areaId:
          type: integer
          format: int64
        area:
          $ref: '#/components/schemas/apiArea'
        entity:
          $ref: '#/components/schemas/apiEntity'
        entityId:
          type: string
        entityActionName:
          type: string
        completed:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiArea:
      type: object
      required: [ id, name, description, polygon, createdAt, updatedAt, zoom, resolution ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        polygon:
          type: array
          items:
            $ref: '#/components/schemas/apiAreaLocation'
        center:
          $ref: '#/components/schemas/apiAreaLocation'
        zoom:
          type: number
          format: float
        resolution:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiAreaLocation:
      type: object
      required: [ lat, lon ]
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
    apiAttribute:
      type: object
      required: [ type, name ]
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/apiTypes'
        int:
          type: integer
          format: int64
        string:
          type: string
        bool:
          type: boolean
        float:
          type: number
          format: float
        array:
          type: array
          items:
            $ref: '#/components/schemas/apiAttribute'
        map:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        time:
          type: string
          format: date-time
        imageUrl:
          type: string
        point:
          type: string
        encrypted:
          type: string
    apiAutomationRequest:
      type: object
      required: [ id, name ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    apiBusStateItem:
      type: object
      required: [ topic, subscribers ]
      properties:
        topic:
          type: string
        subscribers:
          type: integer
          format: int32
    apiClient:
      type: object
      required: [ clientId, username, keepAlive, version, willRetain, willQos, willTopic, willPayload,
                  remoteAddr, localAddr, subscriptionsCurrent, subscriptionsTotal, packetsReceivedBytes, packetsReceivedNums,
                  packetsSendBytes, packetsSendNums, messageDropped, inflightLen, queueLen, connectedAt ]
      properties:
        clientId:
          type: string
        username:
          type: string
        keepAlive:
          type: integer
          format: uint16
        version:
          type: integer
          format: int32
        willRetain:
          type: boolean
        willQos:
          type: integer
          format: uint8
        willTopic:
          type: string
        willPayload:
          type: string
        remoteAddr:
          type: string
        localAddr:
          type: string
        subscriptionsCurrent:
          type: integer
          format: uint32
        subscriptionsTotal:
          type: integer
          format: uint32
        packetsReceivedBytes:
          type: integer
          format: uint64
        packetsReceivedNums:
          type: integer
          format: uint64
        packetsSendBytes:
          type: integer
          format: uint64
        packetsSendNums:
          type: integer
          format: uint64
        messageDropped:
          type: integer
          format: uint64
        inflightLen:
          type: integer
          format: uint32
        queueLen:
          type: integer
          format: uint32
        connectedAt:
          type: string
          format: date-time
        disconnectedAt:
          type: string
          format: date-time
    apiCondition:
      type: object
      required: [ id, name, description, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        scriptId:
          type: integer
          format: int64
        script:
          $ref: '#/components/schemas/apiScript'
        area:
          $ref: '#/components/schemas/apiArea'
        areaId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiCurrentUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        status:
          type: string
        history:
          type: array
          items:
            $ref: '#/components/schemas/apiUserHistory'
        image:
          $ref: '#/components/schemas/apiImage'
        signInCount:
          type: integer
          format: int64
        meta:
          type: array
          items:
            $ref: '#/components/schemas/apiUserMeta'
        role:
          $ref: '#/components/schemas/apiRole'
        lang:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        currentSignInAt:
          type: string
          format: date-time
        lastSignInAt:
          type: string
          format: date-time
    apiDashboard:
      type: object
      required: [ id, name, description, enabled, tabs, entities, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        areaId:
          type: integer
          format: int64
        area:
          $ref: '#/components/schemas/apiArea'
        tabs:
          type: array
          items:
            $ref: '#/components/schemas/apiDashboardTab'
        entities:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiEntity'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiDashboardCard:
      type: object
      required: [ id, title, height, weight, width, enabled, dashboardTabId, payload, items, entities, hidden, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        height:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
        background:
          type: string
        weight:
          type: integer
          format: int32
        enabled:
          type: boolean
        dashboardTabId:
          type: integer
          format: int64
        payload:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiDashboardCardItem'
        entities:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiEntity'
        hidden:
          type: boolean
        entityId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiDashboardCardItem:
      type: object
      required: [ id, title, type, weight, enabled, dashboardCardId, payload, hidden, frozen, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        type:
          type: string
        weight:
          type: integer
          format: int32
        enabled:
          type: boolean
        dashboardCardId:
          type: integer
          format: int64
        entityId:
          type: string
        payload:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        hidden:
          type: boolean
        frozen:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiDashboardShort:
      type: object
      required: [ id, name, description, enabled, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        areaId:
          type: integer
          format: int64
        area:
          $ref: '#/components/schemas/apiArea'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiDashboardTab:
      type: object
      required: [ id, name, icon, columnWidth, gap, enabled, weight, dashboardId, cards, entities, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        columnWidth:
          type: integer
          format: int32
        gap:
          type: boolean
        background:
          type: string
        icon:
          type: string
        enabled:
          type: boolean
        weight:
          type: integer
          format: int32
        dashboardId:
          type: integer
          format: int64
        cards:
          type: array
          items:
            $ref: '#/components/schemas/apiDashboardCard'
        entities:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiEntity'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiDashboardTabShort:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        columnWidth:
          type: integer
          format: int32
        gap:
          type: boolean
        background:
          type: string
        icon:
          type: string
        enabled:
          type: boolean
        weight:
          type: integer
          format: int32
        dashboardId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiDeviceBanRequest:
      type: object
      required: [ id, friendlyName ]
      properties:
        id:
          type: integer
          format: int64
        friendlyName:
          type: string
    apiDeviceListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiZigbee2mqttDevice'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiDeviceRenameRequest:
      type: object
      required: [ friendlyName, newName ]
      properties:
        friendlyName:
          type: string
        newName:
          type: string
    apiDeviceWhitelistRequest:
      type: object
      required: [ id, friendlyName ]
      properties:
        id:
          type: integer
          format: int64
        friendlyName:
          type: string
    apiDisablePluginResult:
      type: object
    apiEnablePluginResult:
      type: object
    apiEntity:
      type: object
      required: [ id, pluginName, description, autoLoad, actions, states,
                  scripts, scriptIds, attributes, settings, metrics, createdAt,
                  updatedAt ]
      properties:
        id:
          type: string
        pluginName:
          type: string
        description:
          type: string
        area:
          $ref: '#/components/schemas/apiArea'
        image:
          $ref: '#/components/schemas/apiImage'
        icon:
          type: string
        autoLoad:
          type: boolean
        parent:
          $ref: '#/components/schemas/apiEntityParent'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/apiEntityAction'
        states:
          type: array
          items:
            $ref: '#/components/schemas/apiEntityState'
        scripts:
          type: array
          items:
            $ref: '#/components/schemas/apiScript'
        scriptIds:
          type: array
          items:
            type: integer
            format: int64
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        settings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/apiMetric'
        isLoaded:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiEntityAction:
      type: object
      required: [ name, description, type ]
      properties:
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        image:
          $ref: '#/components/schemas/apiImage'
        script:
          $ref: '#/components/schemas/apiScript'
        type:
          type: string
    apiEntityCallActionRequest:
      type: object
      required: [ id, name, attributes ]
      properties:
        id:
          type: string
        name:
          type: string
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
    apiEntityParent:
      type: object
      required: [ id ]
      properties:
        id:
          type: string
    apiEntityRequest:
      type: object
      required: [ id, name ]
      properties:
        id:
          type: string
        name:
          type: string
    apiEntityShort:
      type: object
      required: [ id, pluginName, description, autoLoad, createdAt, updatedAt ]
      properties:
        id:
          type: string
        pluginName:
          type: string
        description:
          type: string
        area:
          $ref: '#/components/schemas/apiArea'
        icon:
          type: string
        autoLoad:
          type: boolean
        parentId:
          type: string
        isLoaded:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiEntityState:
      type: object
      required: [ name, description, style ]
      properties:
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        image:
          $ref: '#/components/schemas/apiImage'
        style:
          type: string
    apiEntityStorageFilter:
      type: object
      required: [ entityId, description ]
      properties:
        entityId:
          type: string
        description:
          type: string
    apiEntityStorage:
      type: object
      required: [ id, entityId, entity_description, state, state_description, attributes, createdAt ]
      properties:
        id:
          type: integer
          format: int64
        entityId:
          type: string
        entity_description:
          type: string
        state:
          type: string
        state_description:
          type: string
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        createdAt:
          type: string
          format: date-time
    apiEventBusStateListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiBusStateItem'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiExecScriptResult:
      type: object
      required: [ result ]
      properties:
        result:
          type: string
    apiExecSrcScriptRequest:
      type: object
      required: [ lang, name, source, description ]
      properties:
        lang:
          type: string
        name:
          type: string
        source:
          type: string
        description:
          type: string
    apiGetActionListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiAction'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetAreaListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiArea'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetBackupListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            type: string
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetBridgeListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiZigbee2mqttShort'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetClientListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiClient'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetConditionListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiCondition'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetDashboardCardItemListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiDashboardCardItem'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetDashboardCardListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiDashboardCard'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetDashboardListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiDashboardShort'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetDashboardTabListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiDashboardTabShort'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetEntityListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiEntityShort'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetEntityStorageResult:
      type: object
      required: [ items, filter, meta ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiEntityStorage'
        filter:
          type: array
          items:
            $ref: '#/components/schemas/apiEntityStorageFilter'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetImageFilterListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GetImageFilterListResultfilter'
    apiGetImageListByDateResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiImage'
    apiGetImageListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiImage'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetLogListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiLog'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetMessageDeliveryListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiMessageDelivery'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetPluginListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiPluginShort'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetRoleListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiRole'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetScriptListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiScript'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetSubscriptionListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiSubscription'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetTaskListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiTask'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetTriggerListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiTrigger'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetUserListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiUserShot'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiGetVariableListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiVariable'
        meta:
          $ref: '#/components/schemas/apiMeta'
    apiBackup:
      type: object
      required: [ name, size, fileMode, modTime ]
      properties:
        name:
          type: string
        size:
          type: integer
          format: int64
        fileMode:
          type: integer
          format: uint32
        modTime:
          type: string
          format: date-time
    apiImage:
      type: object
      required: [ id, thumb, url, image, mimeType, title, size, name, createdAt ]
      properties:
        id:
          type: integer
          format: int64
        thumb:
          type: string
        url:
          type: string
        image:
          type: string
        mimeType:
          type: string
        title:
          type: string
        size:
          type: integer
          format: int64
        name:
          type: string
        createdAt:
          type: string
          format: date-time
    apiLog:
      type: object
      required: [ id, level, body, owner, createdAt ]
      properties:
        id:
          type: integer
          format: int64
        level:
          type: string
        body:
          type: string
        owner:
          type: string
        createdAt:
          type: string
          format: date-time
    apiMessage:
      type: object
      required: [ id, type, attributes, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        entityId:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiMessageDelivery:
      type: object
      required: [ id, message, address, status, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        message:
          $ref: '#/components/schemas/apiMessage'
        address:
          type: string
        status:
          type: string
        errorMessageStatus:
          type: string
        errorMessageBody:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiPagination:
      type: object
      required: [ limit, page, total ]
      properties:
        limit:
          type: integer
          format: uint64
        page:
          type: integer
          format: uint64
        total:
          type: integer
          format: uint64
    apiMeta:
      type: object
      required: [ pagination, sort ]
      properties:
        pagination:
          $ref: '#/components/schemas/apiPagination'
        sort:
          type: string
    apiMetric:
      type: object
      required: [ id, name, description, data, type, ranges, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        options:
          $ref: '#/components/schemas/apiMetricOption'
        data:
          type: array
          items:
            $ref: '#/components/schemas/apiMetricOptionData'
        type:
          type: string
        ranges:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiMetricOption:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiMetricOptionItem'
    apiMetricOptionData:
      type: object
      required: [ value, time ]
      properties:
        value:
          type: object
          additionalProperties:
            x-go-type: interface{}
        metricId:
          type: integer
          format: int64
        time:
          type: string
          format: date-time
    apiMetricOptionItem:
      type: object
      required: [ name, description, color, translate, label ]
      properties:
        name:
          type: string
        description:
          type: string
        color:
          type: string
        translate:
          type: string
        label:
          type: string
    apiNetworkmapResponse:
      type: object
      required: [ networkmap ]
      properties:
        networkmap:
          type: string
    apiNewActionRequest:
      type: object
      required: [ name, description ]
      properties:
        name:
          type: string
        description:
          type: string
        scriptId:
          type: integer
          format: int64
        areaId:
          type: integer
          format: int64
        entityId:
          type: string
        entityActionName:
          type: string
    apiNewAreaRequest:
      type: object
      required: [ name, description, zoom, resolution, polygon ]
      properties:
        name:
          type: string
        description:
          type: string
        polygon:
          type: array
          items:
            $ref: '#/components/schemas/apiAreaLocation'
        center:
          $ref: '#/components/schemas/apiAreaLocation'
        zoom:
          type: number
          format: float
        resolution:
          type: number
          format: float
    apiNewConditionRequest:
      type: object
      required: [ name, description ]
      properties:
        name:
          type: string
        description:
          type: string
        scriptId:
          type: integer
          format: int64
        areaId:
          type: integer
          format: int64
    apiNewDashboardCardItemRequest:
      type: object
      required: [ title, type, weight, enabled, dashboardCardId, payload, hidden, frozen ]
      properties:
        title:
          type: string
        type:
          type: string
        weight:
          type: integer
          format: int32
        enabled:
          type: boolean
        dashboardCardId:
          type: integer
          format: int64
        entityId:
          type: string
        payload:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        hidden:
          type: boolean
        frozen:
          type: boolean
    apiNewDashboardCardRequest:
      type: object
      required: [ title, height, width, weight, enabled, dashboardTabId, payload, hidden ]
      properties:
        title:
          type: string
        height:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
        background:
          type: string
        weight:
          type: integer
          format: int32
        enabled:
          type: boolean
        dashboardTabId:
          type: integer
          format: int64
        payload:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        hidden:
          type: boolean
        entityId:
          type: string
    apiNewDashboardRequest:
      type: object
      required: [ name, description, enabled ]
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        areaId:
          type: integer
          format: int64
    apiNewDashboardTabRequest:
      type: object
      required: [ name, columnWidth, gap, icon, enabled, weight, dashboardId ]
      properties:
        name:
          type: string
        columnWidth:
          type: integer
          format: int32
        gap:
          type: boolean
        background:
          type: string
        icon:
          type: string
        enabled:
          type: boolean
        weight:
          type: integer
          format: int32
        dashboardId:
          type: integer
          format: int64
    apiNewEntityRequest:
      type: object
      required: [ name, pluginName, description, autoLoad, attributes, settings, metrics,
                  actions, states, scriptIds ]
      properties:
        name:
          type: string
        pluginName:
          type: string
        description:
          type: string
        areaId:
          type: integer
          format: int64
        icon:
          type: string
        imageId:
          type: integer
          format: int64
        autoLoad:
          type: boolean
        parentId:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/apiNewEntityRequestAction'
        states:
          type: array
          items:
            $ref: '#/components/schemas/apiNewEntityRequestState'
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        settings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/apiMetric'
        scriptIds:
          type: array
          items:
            type: integer
            format: int64
    apiNewEntityRequestAction:
      type: object
      required: [ name, description, type ]
      properties:
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        imageId:
          type: integer
          format: int64
        scriptId:
          type: integer
          format: int64
        type:
          type: string
    apiNewEntityRequestState:
      type: object
      required: [ name, description, style ]
      properties:
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        imageId:
          type: integer
          format: int64
        style:
          type: string
    apiNewImageRequest:
      type: object
      required: [ thumb, image, mimeType, title, size, name ]
      properties:
        thumb:
          type: string
        image:
          type: string
        mimeType:
          type: string
        title:
          type: string
        size:
          type: integer
          format: int64
        name:
          type: string
    apiNewRoleRequest:
      type: object
      required: [ name, description ]
      properties:
        name:
          type: string
        description:
          type: string
        parent:
          type: string
    apiNewScriptRequest:
      type: object
      required: [ lang, name, source, description ]
      properties:
        lang:
          type: string
        name:
          type: string
        source:
          type: string
        description:
          type: string
    apiNewTaskRequest:
      type: object
      required: [ name, description, enabled, condition, triggerIds, conditionIds, actionIds ]
      properties:
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        condition:
          type: string
        triggerIds:
          type: array
          items:
            type: integer
            format: int64
        conditionIds:
          type: array
          items:
            type: integer
            format: int64
        actionIds:
          type: array
          items:
            type: integer
            format: int64
        areaId:
          type: integer
          format: int64
    apiNewTriggerRequest:
      type: object
      required: [ name, description, pluginName, attributes, enabled, entityIds ]
      properties:
        name:
          type: string
        description:
          type: string
        entityIds:
          type: array
          items:
            type: string
        script:
          $ref: '#/components/schemas/apiScript'
        scriptId:
          type: integer
          format: int64
        pluginName:
          type: string
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        enabled:
          type: boolean
        areaId:
          type: integer
          format: int64
    apiNewVariableRequest:
      type: object
      required: [ name, value ]
      properties:
        name:
          type: string
        value:
          type: string
    apiNewZigbee2mqttRequest:
      type: object
      required: [ name, login, permitJoin, baseTopic ]
      properties:
        name:
          type: string
        login:
          type: string
        password:
          type: string
        permitJoin:
          type: boolean
        baseTopic:
          type: string
    apiNewtUserRequest:
      type: object
      required: [ nickname, email, roleName, password, passwordRepeat ]
      properties:
        nickname:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        passwordRepeat:
          type: string
        email:
          type: string
        status:
          type: string
        lang:
          type: string
        imageId:
          type: integer
          format: int64
        roleName:
          type: string
        meta:
          type: array
          items:
            $ref: '#/components/schemas/apiUserMeta'
    apiPasswordResetRequest:
      type: object
      required: [ email ]
      properties:
        email:
          type: string
        token:
          type: string
        newPassword:
          type: string
    apiPlugin:
      type: object
      required: [ name, version, enabled, system, actor, settings ]
      properties:
        name:
          type: string
        version:
          type: string
        enabled:
          type: boolean
        system:
          type: boolean
        actor:
          type: boolean
        settings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        options:
          $ref: '#/components/schemas/apiPluginOptionsResult'
        isLoaded:
          type: boolean
    apiPluginOptionsResult:
      type: object
      required: [ triggers, actors, actorCustomAttrs, actorAttrs, actorCustomActions, actorActions, actorCustomStates,
                  actorStates, actorCustomSetts, actorSetts, setts ]
      properties:
        triggers:
          type: boolean
        actors:
          type: boolean
        actorCustomAttrs:
          type: boolean
        actorAttrs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        actorCustomActions:
          type: boolean
        actorActions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiPluginOptionsResultEntityAction'
        actorCustomStates:
          type: boolean
        actorStates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiPluginOptionsResultEntityState'
        actorCustomSetts:
          type: boolean
        actorSetts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        setts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
    apiPluginOptionsResultEntityAction:
      type: object
      required: [ name, description, imageUrl, icon ]
      properties:
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        icon:
          type: string
    apiPluginOptionsResultEntityState:
      type: object
      required: [ name, description, imageUrl, icon ]
      properties:
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        icon:
          type: string
    apiPluginShort:
      type: object
      required: [ name, version, enabled, system ]
      properties:
        name:
          type: string
        version:
          type: string
        enabled:
          type: boolean
        system:
          type: boolean
        actor:
          type: boolean
        isLoaded:
          type: boolean
    apiReloadRequest:
      type: object
      required: [ id ]
      properties:
        id:
          type: string
    apiResponse:
      type: object
      properties:
        id:
          type: string
        query:
          type: string
        body:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    apiRestoreBackupRequest:
      type: object
      required: [ name ]
      properties:
        name:
          type: string
    apiRole:
      type: object
      required: [ name, description, children, createdAt, updatedAt ]
      properties:
        parent:
          $ref: '#/components/schemas/apiRole'
        name:
          type: string
        description:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/apiRole'
        accessList:
          $ref: '#/components/schemas/apiRoleAccessList'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiRoleAccessList:
      type: object
      required: [ levels ]
      properties:
        levels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AccessListListOfString'
    apiRoleAccessListResult:
      type: object
      required: [ levels ]
      properties:
        levels:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAccessLevels'
    apiScriptVersion:
      type: object
      required: [ id, lang, source, createdAt ]
      properties:
        id:
          type: integer
          format: int64
        lang:
          type: string
        source:
          type: string
        createdAt:
          type: string
          format: date-time
    apiScript:
      type: object
      required: [ id, name, lang, source, description, versions, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        lang:
          type: string
        name:
          type: string
        source:
          type: string
        description:
          type: string
        scriptInfo:
          $ref: '#/components/schemas/apiScriptInfo'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/apiScriptVersion'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiScriptInfo:
      type: object
      required: [ alexaIntents, entityActions, entityScripts, automationTriggers, automationConditions, automationActions ]
      properties:
        alexaIntents:
          type: integer
          format: int32
        entityActions:
          type: integer
          format: int32
        entityScripts:
          type: integer
          format: int32
        automationTriggers:
          type: integer
          format: int32
        automationConditions:
          type: integer
          format: int32
        automationActions:
          type: integer
          format: int32
    apiSearchActionResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiAction'
    apiSearchAreaResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiArea'
    apiSearchConditionResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiCondition'
    apiSearchDashboardResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiDashboard'
    apiSearchDeviceResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiZigbee2mqttDevice'
    apiSearchEntityResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiEntityShort'
    apiSearchPluginResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiPluginShort'
    apiSearchRoleListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiRole'
    apiSearchScriptListResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiScript'
    apiSearchTriggerResult:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiTrigger'
    apiSigninResponse:
      type: object
      required: [ accessToken ]
      properties:
        currentUser:
          $ref: '#/components/schemas/apiCurrentUser'
        accessToken:
          type: string
    apiStatistic:
      type: object
      required: [ name, description, value, diff ]
      properties:
        name:
          type: string
        description:
          type: string
        value:
          type: integer
          format: int32
        diff:
          type: integer
          format: int32
    apiStatistics:
      type: object
      required: [ items ]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/apiStatistic'
    apiSubscription:
      type: object
      required: [ id, clientId, topicName, name, qos, noLocal, retainAsPublished, retainHandling ]
      properties:
        id:
          type: integer
          format: uint32
        clientId:
          type: string
        topicName:
          type: string
        name:
          type: string
        qos:
          type: integer
          format: uint32
        noLocal:
          type: boolean
        retainAsPublished:
          type: boolean
        retainHandling:
          type: integer
          format: uint32
    apiTask:
      type: object
      required: [ id, name, description, enabled, condition, createdAt, updatedAt, triggers, triggerIds,
                  conditions, conditionIds, actions, actionIds, telemetry ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        condition:
          type: string
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/apiTrigger'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/apiCondition'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/apiAction'
        area:
          $ref: '#/components/schemas/apiArea'
        areaId:
          type: integer
          format: int64
        isLoaded:
          type: boolean
        triggerIds:
          type: array
          items:
            type: integer
            format: int64
        conditionIds:
          type: array
          items:
            type: integer
            format: int64
        actionIds:
          type: array
          items:
            type: integer
            format: int64
        completed:
          type: boolean
        telemetry:
          type: array
          items:
            $ref: '#/components/schemas/apiTelemetryItem'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiTelemetryItem:
      type: object
      required: [ name, num, start, timeEstimate, attributes, status, level ]
      properties:
        name:
          type: string
        num:
          type: integer
          format: int32
        start:
          type: integer
          format: int64
        end:
          type: integer
          format: int64
        timeEstimate:
          type: integer
          format: int64
        attributes:
          type: object
          additionalProperties:
            type: string
        status:
          type: string
        level:
          type: integer
          format: int32
    apiTrigger:
      type: object
      required: [ id, name, description, pluginName, enabled, createdAt, updatedAt, attributes, entities, entityIds ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        entities:
          type: array
          items:
            $ref: '#/components/schemas/apiEntityShort'
        entityIds:
          type: array
          items:
            type: string
        script:
          $ref: '#/components/schemas/apiScript'
        scriptId:
          type: integer
          format: int64
        area:
          $ref: '#/components/schemas/apiArea'
        areaId:
          type: integer
          format: int64
        pluginName:
          type: string
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/apiAttribute'
        enabled:
          type: boolean
        isLoaded:
          type: boolean
        completed:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiTypes:
      type: string
      default: INT
      enum:
        - INT
        - STRING
        - FLOAT
        - BOOL
        - ARRAY
        - MAP
        - TIME
        - IMAGE
        - POINT
        - ENCRYPTED
    apiUpdateEntityRequestAction:
      type: object
      required: [ name, description, type ]
      properties:
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        imageId:
          type: integer
          format: int64
        scriptId:
          type: integer
          format: int64
        type:
          type: string
    apiUpdateEntityRequestState:
      type: object
      required: [ name, description, style ]
      properties:
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        imageId:
          type: integer
          format: int64
        style:
          type: string
    apiUserFull:
      type: object
      required: [ id, nickname, email, status, signInCount, role, roleName, lang, createdAt, updatedAt,
                  authenticationToken, history, meta ]
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        status:
          type: string
        history:
          type: array
          items:
            $ref: '#/components/schemas/apiUserHistory'
        image:
          $ref: '#/components/schemas/apiImage'
        signInCount:
          type: integer
          format: int64
        meta:
          type: array
          items:
            $ref: '#/components/schemas/apiUserMeta'
        role:
          $ref: '#/components/schemas/apiRole'
        roleName:
          type: string
        lang:
          type: string
        authenticationToken:
          type: string
        currentSignInIp:
          type: string
        lastSignInIp:
          type: string
        user:
          $ref: '#/components/schemas/apiUserFullParent'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        currentSignInAt:
          type: string
          format: date-time
        lastSignInAt:
          type: string
          format: date-time
        resetPasswordSentAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    apiUserFullParent:
      type: object
      required: [ id, nickname ]
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
    apiUserHistory:
      type: object
      required: [ ip, time ]
      properties:
        ip:
          type: string
        time:
          type: string
          format: date-time
    apiUserMeta:
      type: object
      required: [ key, value ]
      properties:
        key:
          type: string
        value:
          type: string
    apiUserShot:
      type: object
      required: [ id, nickname, email, status, lang, role, roleName, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        status:
          type: string
        image:
          $ref: '#/components/schemas/apiImage'
        lang:
          type: string
        role:
          $ref: '#/components/schemas/apiRole'
        roleName:
          type: string
        user:
          $ref: '#/components/schemas/apiUserShotParent'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiUserShotParent:
      type: object
      required: [ id, nickname ]
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
    apiVariable:
      type: object
      required: [ name, value, system, createdAt, updatedAt ]
      properties:
        name:
          type: string
        value:
          type: string
        system:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiZigbee2mqtt:
      type: object
      required: [ scanInProcess,networkmap, status, id, name, login, permitJoin, baseTopic, createdAt, updatedAt ]
      properties:
        scanInProcess:
          type: boolean
        lastScan:
          type: string
          format: date-time
        networkmap:
          type: string
        status:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        login:
          type: string
        permitJoin:
          type: boolean
        baseTopic:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiZigbee2mqttDevice:
      type: object
      required: [ id, zigbee2mqttId, name, type, model, description, manufacturer, functions, imageUrl, status, createdAt, updatedAt ]
      properties:
        id:
          type: string
        zigbee2mqttId:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        model:
          type: string
        description:
          type: string
        manufacturer:
          type: string
        functions:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    apiZigbee2mqttShort:
      type: object
      required: [ id, name, login, permitJoin, baseTopic, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        login:
          type: string
        permitJoin:
          type: boolean
        baseTopic:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON

        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header
      x-api-key: jwt
    BasicAuth:
      type: http
      scheme: basic
  responses:
    HTTP-201:
      description: Created
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
    HTTP-400:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/GenericErrorResponse'
    HTTP-401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/GenericErrorResponse'
                  - type: object
                    properties:
                      code:
                        type: string
                        enum:
                          - UNAUTHORIZED
    HTTP-404:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/GenericErrorResponse'
    HTTP-409:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/GenericErrorResponse'
    HTTP-413:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/GenericErrorResponse'
    HTTP-422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                allOf:
                  - $ref: '#/components/schemas/GenericErrorResponse'
                  - type: object
                    properties:
                      code:
                        type: string
                        enum:
                          - VALIDATION_ERROR
                      fields:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            message:
                              type: string
