syntax = "proto3";

package api;
option go_package = "/api";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "area.proto";
import "dashboard_tab.proto";
import "pagination.proto";
import "entity.proto";

message Dashboard {
  int64 id = 1;
  string name = 2;
  string description = 3;
  bool enabled = 4;
  optional int64 area_id = 5;
  optional Area area = 6;
  repeated DashboardTab tabs = 7;
  map<string, Entity> entities = 11;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp  updated_at = 100;
}

message DashboardShort {
  int64 id = 1;
  string name = 2;
  string description = 3;
  bool enabled = 4;
  optional int64 area_id = 5;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp  updated_at = 100;
}

message NewDashboardRequest {
  string name = 2;
  string description = 3;
  bool enabled = 4;
  optional int64 area_id = 5;
}

message UpdateDashboardRequest {
  int64 id = 1;
  string name = 2;
  string description = 3;
  bool enabled = 4;
  optional int64 area_id = 5;
}

message GetDashboardRequest {
  int64 id = 1;
}

message GetDashboardListResult {
  repeated DashboardShort items = 1;
  Meta meta = 2;
}

message DeleteDashboardRequest {
  int64 id = 1;
}

message SearchDashboardResult {
  repeated Dashboard items = 1;
}

service DashboardService {

  // add new dashboard
  rpc AddDashboard (NewDashboardRequest) returns (Dashboard){
    option (google.api.http) = {
      post: "/v1/dashboard"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // update dashboard
  rpc UpdateDashboard (UpdateDashboardRequest) returns (Dashboard){
    option (google.api.http) = {
      put: "/v1/dashboard/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get dashboard by id
  rpc GetDashboardById (GetDashboardRequest) returns (Dashboard){
    option (google.api.http) = {
      get: "/v1/dashboard/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get dashboard list
  rpc GetDashboardList (PaginationRequest) returns (GetDashboardListResult){
    option (google.api.http) = {
      get: "/v1/dashboards"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // delete dashboard
  rpc DeleteDashboard (DeleteDashboardRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/v1/dashboard/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // import dashboard
  rpc ImportDashboard (Dashboard) returns (Dashboard){
    option (google.api.http) = {
      post: "/v1/dashboards/import"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // search area
  rpc SearchDashboard (SearchRequest) returns (SearchDashboardResult){
    option (google.api.http) = {
      get: "/v1/dashboards/search"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }
}
