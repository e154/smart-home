syntax = "proto3";

package api;
option go_package = "/api";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "pagination.proto";
import "dashboard_card_item.proto";
import "entity.proto";

message DashboardCard {
  int64 id = 1;
  string title = 2;
  int32 height = 3;
  int32 width = 4;
  string background = 5;
  int32 weight = 6;
  bool enabled = 7;
  int64 dashboard_tab_id = 8;
  bytes payload = 9;
  repeated DashboardCardItem items = 10;
  map<string, Entity> entities = 11;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp  updated_at = 100;
}

message NewDashboardCardRequest {
  string title = 2;
  int32 height = 3;
  int32 width = 4;
  string background = 5;
  int32 weight = 6;
  bool enabled = 7;
  int64 dashboard_tab_id = 8;
  bytes payload = 9;
}

message UpdateDashboardCardRequest {
  int64 id = 1;
  string title = 2;
  int32 height = 3;
  int32 width = 4;
  string background = 5;
  int32 weight = 6;
  bool enabled = 7;
  int64 dashboard_tab_id = 8;
  bytes payload = 9;
  message Item {
    int64 id = 1;
    string title = 2;
    string type = 3;
    int32 weight = 4;
    bool enabled = 5;
    optional string entity_id = 7;
    bytes payload = 8;
    bool hidden = 9;
    bool frozen = 10;
    repeated string show_on = 11;
    repeated string hide_on = 12;
  }
  repeated Item items = 10;
}

message GetDashboardCardRequest {
  int64 id = 1;
}

message GetDashboardCardListResult {
  repeated DashboardCard items = 1;
  Meta meta = 2;
}

message DeleteDashboardCardRequest {
  int64 id = 1;
}

service DashboardCardService {

  // add new dashboard_card
  rpc AddDashboardCard (NewDashboardCardRequest) returns (DashboardCard){
    option (google.api.http) = {
      post: "/v1/dashboard_card"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // update dashboard_card
  rpc UpdateDashboardCard (UpdateDashboardCardRequest) returns (DashboardCard){
    option (google.api.http) = {
      put: "/v1/dashboard_card/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get dashboard_card by id
  rpc GetDashboardCardById (GetDashboardCardRequest) returns (DashboardCard){
    option (google.api.http) = {
      get: "/v1/dashboard_card/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get dashboard_card list
  rpc GetDashboardCardList (PaginationRequest) returns (GetDashboardCardListResult){
    option (google.api.http) = {
      get: "/v1/dashboard_cards"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // delete dashboard_card
  rpc DeleteDashboardCard (DeleteDashboardCardRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/v1/dashboard_card/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // import dashboard_card
  rpc ImportDashboardCard (DashboardCard) returns (DashboardCard){
    option (google.api.http) = {
      post: "/v1/dashboard_card/import"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }
}
