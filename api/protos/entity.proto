syntax = "proto3";

package api;
option go_package = "/api";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

import "area.proto";
import "image.proto";
import "script.proto";
import "attributes.proto";

message EntityAction {
  string name = 1;
  string description = 2;
  optional string icon = 3;
  optional Image image = 5;
  optional Script script = 6;
  string type = 7;
}

message EntityState {
  string name = 1;
  string description = 2;
  optional string icon = 3;
  optional Image image = 5;
  string style = 6;
}

message EntityParent {
  int64 id = 1;
}

message Entity {
  int64 id = 1;
  string plugin_name = 2;
  string description = 3;
  optional Area area = 4;
  optional Image image = 6;
  optional string icon = 5;
  bool hidden = 7;
  bool auto_load = 8;
  optional EntityParent parent = 9;
  repeated EntityAction actions = 10;
  repeated EntityState states = 11;
  repeated Script scripts = 12;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp updated_at = 100;
}

message NewEntityRequest {
  string name = 1;
  string plugin_name = 2;
  string description = 3;
  message Area {
    int64 id = 1;
  }
  optional Area area = 4;
  optional string icon = 5;
  message Image {
    int64 id = 1;
  }
  optional Image image = 6;
  bool hidden = 7;
  bool auto_load = 8;
  optional EntityParent parent = 9;
  message Action {
    string name = 1;
    string description = 2;
    optional string icon = 3;
    optional Image image = 4;
    message Script {
      int64 id = 1;
    }
    optional Script script = 5;
    string type = 6;
  }
  repeated Action actions = 10;
  message State {
    string name = 1;
    string description = 2;
    optional string icon = 3;
    optional Image image = 4;
    string style = 5;
  }
  repeated State states = 11;
  map<string, Attribute> attributes = 12;
  map<string, Attribute> settings = 13;
}

message UpdateEntityRequest {
  string name = 1;
  string plugin_name = 2;
  string description = 3;
  message Area {
    int64 id = 1;
  }
  optional Area area = 4;
  optional string icon = 5;
  message Image {
    int64 id = 1;
  }
  optional Image image = 6;
  bool hidden = 7;
  bool auto_load = 8;
  optional EntityParent parent = 9;
  message Action {
    string name = 1;
    string description = 2;
    optional string icon = 3;
    optional Image image = 4;
    message Script {
      int64 id = 1;
    }
    optional Script script = 5;
    string type = 6;
  }
  repeated Action actions = 10;
  message State {
    string name = 1;
    string description = 2;
    optional string icon = 3;
    optional Image image = 4;
    string style = 5;
  }
  repeated State states = 11;
  map<string, Attribute> attributes = 12;
  map<string, Attribute> settings = 13;
}

message GetEntityRequest {
  string id = 1;
}


message GetEntityListRequest {
  uint64 limit = 1;
  uint64 offset = 2;
  string order = 3;
  string sort_by = 4;
}

message GetEntityListResult {
  repeated Entity items = 1;
  message Meta {
    uint64 limit = 1;
    uint64 objects_count = 2;
    uint64 offset = 3;
  }
  Meta meta = 2;
}

message DeleteEntityRequest {
  string id = 1;
}

service EntityService {

  // add new entity
  rpc AddEntity (NewEntityRequest) returns (Entity){
    option (google.api.http) = {
      post: "/v1/entity"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // update entity
  rpc UpdateEntityByName (UpdateEntityRequest) returns (Entity){
    option (google.api.http) = {
      put: "/v1/entity/{name}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get entity by id
  rpc GetEntityByName (GetEntityRequest) returns (Entity){
    option (google.api.http) = {
      get: "/v1/entity/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get entity list
  rpc GetEntityList (GetEntityListRequest) returns (GetEntityListResult){
    option (google.api.http) = {
      get: "/v1/entities"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // delete entity by id
  rpc DeleteEntityByName (DeleteEntityRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/v1/entity/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }
}
