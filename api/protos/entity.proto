syntax = "proto3";

package api;
option go_package = "/api";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

import "area.proto";
import "image.proto";
import "script.proto";
import "attributes.proto";
import "pagination.proto";
import "metric.proto";

message EntityAction {
  string name = 1;
  string description = 2;
  optional string icon = 3;
  optional Image image = 5;
  optional Script script = 6;
  string type = 7;
}

message EntityState {
  string name = 1;
  string description = 2;
  optional string icon = 3;
  optional Image image = 5;
  string style = 6;
}

message EntityParent {
  string id = 1;
}

message Entity {
  string id = 1;
  string plugin_name = 2;
  string description = 3;
  optional Area area = 4;
  optional Image image = 6;
  optional string icon = 5;
  bool auto_load = 8;
  optional EntityParent parent = 9;
  repeated EntityAction actions = 10;
  repeated EntityState states = 11;
  repeated Script scripts = 12;
  repeated int64 scriptIds = 13;
  map<string, Attribute> attributes = 14;
  map<string, Attribute> settings = 15;
  repeated Metric metrics = 16;
  optional bool isLoaded = 17;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp updated_at = 100;
}

message EntityShort {
  string id = 1;
  string plugin_name = 2;
  string description = 3;
  optional Area area = 4;
  optional Image image = 6;
  optional string icon = 5;
  bool auto_load = 8;
  optional string parentId = 9;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp updated_at = 100;
}

message NewEntityRequest {
  string name = 1;
  string plugin_name = 2;
  string description = 3;
  optional int64 areaId = 4;
  optional string icon = 5;
  optional int64 imageId = 6;
  bool auto_load = 8;
  optional string parentId = 9;
  message Action {
    string name = 1;
    string description = 2;
    optional string icon = 3;
    optional int64 imageId = 4;
    optional int64 scriptId = 5;
    string type = 6;
  }
  repeated Action actions = 10;
  message State {
    string name = 1;
    string description = 2;
    optional string icon = 3;
    optional int64 imageId = 4;
    string style = 5;
  }
  repeated State states = 11;
  map<string, Attribute> attributes = 12;
  map<string, Attribute> settings = 13;
  repeated Metric metrics = 15;
  repeated int64 scriptIds = 16;
}

message UpdateEntityRequest {
  string id = 1;
  string name = 2;
  string plugin_name = 3;
  string description = 4;
  optional int64 areaId = 5;
  optional string icon = 6;
  optional int64 imageId = 7;
  bool auto_load = 9;
  optional string parentId = 10;
  message Action {
    string name = 1;
    string description = 2;
    optional string icon = 3;
    optional int64 imageId = 4;
    optional int64 scriptId = 5;
    string type = 6;
  }
  repeated Action actions = 11;
  message State {
    string name = 1;
    string description = 2;
    optional string icon = 3;
    optional int64 imageId = 4;
    string style = 5;
  }
  repeated State states = 12;
  map<string, Attribute> attributes = 13;
  map<string, Attribute> settings = 14;
  repeated int64 scriptIds = 15;
  repeated Metric metrics = 16;
}

message GetEntityRequest {
  string id = 1;
}

message GetEntityListResult {
  repeated Entity items = 1;
  Meta meta = 2;
}

message DeleteEntityRequest {
  string id = 1;
}

message SearchEntityResult {
  repeated EntityShort items = 1;
}

message EnableEntityRequest {
  string id = 1;
}

message DisableEntityRequest {
  string id = 1;
}

service EntityService {

  // add new entity
  rpc AddEntity (NewEntityRequest) returns (Entity){
    option (google.api.http) = {
      post: "/v1/entity"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // update entity
  rpc UpdateEntity (UpdateEntityRequest) returns (Entity){
    option (google.api.http) = {
      put: "/v1/entity/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get entity
  rpc GetEntity (GetEntityRequest) returns (Entity){
    option (google.api.http) = {
      get: "/v1/entity/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get entity list
  rpc GetEntityList (PaginationRequest) returns (GetEntityListResult){
    option (google.api.http) = {
      get: "/v1/entities"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // delete entity
  rpc DeleteEntity (DeleteEntityRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/v1/entity/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // search entity
  rpc SearchEntity (SearchRequest) returns (SearchEntityResult){
    option (google.api.http) = {
      get: "/v1/entity/search"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // import entity
  rpc ImportEntity (Entity) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/entities/import"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // enabled entity
  rpc EnabledEntity (EnableEntityRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/entity/{id}/enable"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // disable entity
  rpc DisabledEntity (DisableEntityRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/entity/{id}/disable"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }
}
