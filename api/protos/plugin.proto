syntax = "proto3";

package api;

option go_package = "/api";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "attributes.proto";
import "pagination.proto";

message Plugin {
  string name = 1;
  string version = 2;
  bool enabled = 3;
  bool system = 4;
  bool actor = 5;
  map<string, Attribute> settings = 6;
}

message GetPluginListResult {
  repeated Plugin items = 1;
  Meta meta = 2;
}

message EnablePluginRequest {
  string name = 1;
}
message EnablePluginResult {

}

message DisablePluginRequest {
  string name = 1;
}
message DisablePluginResult {

}

message GetPluginOptionsRequest {
  string name = 1;
}

message GetPluginOptionsResult {
  bool triggers = 1;
  bool actors = 2;
  bool actor_custom_attrs = 3;
  map<string, Attribute> actor_attrs = 4;
  bool actor_custom_actions = 5;
  message EntityAction {
    string name = 1;
    string description = 2;
    string image_url = 3;
    string icon = 4;
  }
  map<string, EntityAction>  actor_actions = 6;
  bool actor_custom_states = 7;
  message EntityState {
    string name = 1;
    string description = 2;
    string image_url = 3;
    string icon = 4;
  }
  map<string, EntityState>  actor_states = 8;
  bool actor_custom_setts = 9;
  map<string, Attribute> actor_setts = 10;
  map<string, Attribute> setts = 11;
}

message SearchPluginResult {
  repeated Plugin items = 1;
}

service PluginService {

  // get plugin list
  rpc GetPluginList(PaginationRequest) returns (GetPluginListResult) {
    option (google.api.http) = {
      get: "/v1/plugins"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // enable plugin
  rpc EnablePlugin(EnablePluginRequest) returns (EnablePluginResult) {
    option (google.api.http) = {
      post: "/v1/plugin/{name}/enable"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // disable plugin
  rpc DisablePlugin(DisablePluginRequest) returns (DisablePluginResult) {
    option (google.api.http) = {
      post: "/v1/plugin/{name}/disable"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get plugin options
  rpc GetPluginOptions(GetPluginOptionsRequest) returns (GetPluginOptionsResult) {
    option (google.api.http) = {
      get: "/v1/plugin/{name}/options"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // search plugin
  rpc SearchPlugin (SearchRequest) returns (SearchPluginResult){
    option (google.api.http) = {
      get: "/v1/plugins/search"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

}
