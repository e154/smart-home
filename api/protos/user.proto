syntax = "proto3";

package api;
option go_package = "/api";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "image.proto";
import "role.proto";


message UserHistory {
  string ip = 1;
  google.protobuf.Timestamp time = 2;
}
message UserMeta {
  string key = 1;
  string value = 2;
}

message CurrentUser {
  int64 id = 1;
  string nickname = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
  string status = 6;
  repeated UserHistory history = 7;
  Image image = 8;
  int64 sign_in_count = 9;
  repeated UserMeta meta = 10;
  Role role = 11;
  string lang = 12;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp updated_at = 100;
  google.protobuf.Timestamp current_sign_in_at = 101;
  google.protobuf.Timestamp last_sign_in_at = 102;
}

message NewtUserRequest {
  string nickname = 1;
  string first_name = 2;
  string last_name = 3;
  string password = 4;
  string password_repeat = 5;
  string email = 6;
  string status = 7;
  string lang = 8;
  message Image {
    int64 id = 1;
  }
  Image image = 9;
  message Role {
    string name = 1;
  }
  Role role = 10;
  repeated UserMeta meta = 11;
}

message UpdateUserRequest {
  int64 id = 1;
  string nickname = 2;
  string first_name = 3;
  string last_name = 4;
  string password = 5;
  string password_repeat = 6;
  string email = 7;
  string status = 8;
  string lang = 9;
  message Image {
    int64 id = 1;
  }
  Image image = 10;
  message Role {
    string name = 1;
  }
  Role role = 11;
  repeated UserMeta meta = 12;
}

message UserFull {
  int64 id = 1;
  string nickname = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
  string status = 6;
  repeated UserHistory history = 7;
  Image image = 8;
  int64 sign_in_count = 9;
  repeated UserMeta meta = 10;
  Role role = 11;
  string role_name = 12;
  string lang = 13;

  string authentication_token = 14;
  string current_sign_in_ip = 15;
  string last_sign_in_ip = 16;

  message Parent {
    int64 id = 1;
    string nickname = 2;
  }

  Parent user = 17;

  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp updated_at = 100;
  google.protobuf.Timestamp current_sign_in_at = 101;
  google.protobuf.Timestamp last_sign_in_at = 102;
  google.protobuf.Timestamp reset_password_sent_at = 103;
  google.protobuf.Timestamp deleted_at = 104;

}

message UserShot {
  int64 id = 1;
  string nickname = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
  string status = 7;
  message NewImage {
    int64 id = 1;
  }
  Image image = 9;
  string lang = 8;
  Role role = 10;
  string role_name = 11;
  message Parent {
    int64 id = 1;
    string nickname = 2;
  }

  Parent user = 12;
  google.protobuf.Timestamp created_at = 13;
  google.protobuf.Timestamp updated_at = 14;
}

message GetUserByIdRequest {
  // user id
  int64 id = 1;
}

message GetUserListRequest {
  uint64 limit = 1;
  uint64 offset = 2;
  string order = 3;
  string sort_by = 4;
}

message GetUserListResult {
  repeated UserShot items = 1;
  message Meta {
    uint64 limit = 1;
    uint64 objects_count = 2;
    uint64 offset = 3;
  }
  Meta meta = 2;
}

message GetUserSearchResult {
  repeated UserShot items = 1;
}

message DeleteUserRequest {
  // user id
  int64 id = 1;
}

service UserService {

  // add new user
  rpc AddUser (NewtUserRequest) returns (UserFull){
    option (google.api.http) = {
      post: "/v1/user"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get user by id
  rpc GetUserById (GetUserByIdRequest) returns (UserFull){
    option (google.api.http) = {
      get: "/v1/user/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // update user by id
  rpc UpdateUserById (UpdateUserRequest) returns (UserFull){
    option (google.api.http) = {
      put: "/v1/user/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get user list
  rpc GetUserList (GetUserListRequest) returns (GetUserListResult){
    option (google.api.http) = {
      get: "/v1/users"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // delete user by id
  rpc DeleteUserById (DeleteUserRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/v1/user/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }
}
