syntax = "proto3";

package api;
option go_package = "/api";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "pagination.proto";

message NewZigbee2mqttRequest {
  string name = 1;
  string login = 2;
  optional string password = 3;
  bool permit_join = 4;
  string base_topic = 5;
}

message Zigbee2mqttShort {
  int64 id = 1;
  string name = 2;
  string login = 3;
  bool permit_join = 4;
  string base_topic = 5;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp updated_at = 100;
}

message Zigbee2mqtt {
  bool scan_in_process = 1;
  optional google.protobuf.Timestamp last_scan = 2;
  string networkmap = 3;
  string status = 4;
  int64 id = 5;
  string name = 6;
  string login = 7;
  bool permit_join = 8;
  string base_topic = 9;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp updated_at = 100;
}

message GetBridgeRequest {
  int64 id = 1;
}

message UpdateBridgeRequest {
  int64 id = 1;
  string name = 2;
  string login = 3;
  optional string password = 4;
  bool permit_join = 5;
  string base_topic = 6;
}

message GetBridgeListResult {
  repeated Zigbee2mqttShort items = 1;
  Meta meta = 2;
}

message DeleteBridgeRequest {
  int64 id = 1;
}

message ResetBridgeRequest {
  int64 id = 1;
}

message DeviceBanRequest {
  int64 id = 1;
  string friendly_name = 2;
}

message DeviceWhitelistRequest {
  int64 id = 1;
  string friendly_name = 2;
}

message NetworkmapRequest {
  int64 id = 1;
}

message NetworkmapResponse {
  string networkmap = 1;
}

message DeviceRenameRequest {
  string friendly_name = 1;
  string new_name = 2;
}

message Zigbee2mqttDevice {
  string id = 1;
  int64 zigbee2mqtt_id = 2;
  string  name = 3;
  string     type = 4;
  string  model = 5;
  string     description = 6;
  string  manufacturer = 7;
  repeated string functions = 8;
  string image_url = 9;
  string status = 10;
  google.protobuf.Timestamp created_at = 99;
  google.protobuf.Timestamp updated_at = 100;
}

message SearchDeviceResult {
  repeated Zigbee2mqttDevice items = 1;
}

service Zigbee2mqttService {

  // add new bridge
  rpc AddZigbee2mqttBridge (NewZigbee2mqttRequest) returns (Zigbee2mqtt){
    option (google.api.http) = {
      post: "/v1/zigbee2mqtt/bridge"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get bridge
  rpc GetZigbee2mqttBridge (GetBridgeRequest) returns (Zigbee2mqtt){
    option (google.api.http) = {
      get: "/v1/zigbee2mqtt/bridge/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // update bridge by id
  rpc UpdateBridgeById (UpdateBridgeRequest) returns (Zigbee2mqtt){
    option (google.api.http) = {
      put: "/v1/zigbee2mqtt/bridge/{id}/bridge"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // get bridge list
  rpc GetBridgeList (PaginationRequest) returns (GetBridgeListResult){
    option (google.api.http) = {
      get: "/v1/zigbee2mqtt/bridge"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // delete bridge by id
  rpc DeleteBridgeById (DeleteBridgeRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/v1/zigbee2mqtt/bridge/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // reset bridge by id
  rpc ResetBridgeById (ResetBridgeRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/zigbee2mqtt/bridge/{id}/reset"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // device ban
  rpc DeviceBan (DeviceBanRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/zigbee2mqtt/device_ban"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // device whitelist
  rpc DeviceWhitelist (DeviceWhitelistRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/zigbee2mqtt/device_whitelist"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // device rename
  rpc DeviceRename (DeviceRenameRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/zigbee2mqtt/device_rename"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // search device
  rpc SearchDevice (SearchRequest) returns (SearchDeviceResult){
    option (google.api.http) = {
      get: "/v1/zigbee2mqtt/search_device"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // networkmap
  rpc Networkmap (NetworkmapRequest) returns (NetworkmapResponse){
    option (google.api.http) = {
      get: "/v1/zigbee2mqtt/bridge/{id}/networkmap"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

  // update networkmap
  rpc UpdateNetworkmap (NetworkmapRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/zigbee2mqtt/bridge/{id}/networkmap"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth"
          value: {}
        }
      }
    };
  }

}
