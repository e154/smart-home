basePath: /api/v1
consumes:
- application/json
definitions:
  AccessItem:
    properties:
      actions:
        items:
          type: string
        type: array
        x-go-name: Actions
      description:
        type: string
        x-go-name: Description
      method:
        type: string
        x-go-name: Method
      role_name:
        type: string
        x-go-name: RoleName
    title: AccessItem ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  AccessLevels:
    additionalProperties:
      $ref: '#/definitions/AccessItem'
    title: AccessLevels ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  AccessList:
    additionalProperties:
      $ref: '#/definitions/AccessLevels'
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  AccessListDiff:
    additionalProperties:
      additionalProperties:
        type: boolean
      type: object
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Area:
    properties:
      description:
        type: string
        x-go-name: Description
      id:
        format: int64
        type: integer
        x-go-name: Id
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  AuthSignInResponse:
    properties:
      access_token:
        type: string
        x-go-name: AccessToken
      current_user:
        $ref: '#/definitions/CurrentUser'
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  CurrentUser:
    description: Current User represents the user for this application
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      current_sign_in_at:
        format: date-time
        type: string
        x-go-name: CurrentSignInAt
      email:
        type: string
        x-go-name: Email
      first_name:
        type: string
        x-go-name: FirstName
      history:
        items:
          $ref: '#/definitions/UserHistory'
        type: array
        x-go-name: History
      id:
        format: int64
        type: integer
        x-go-name: Id
      image:
        $ref: '#/definitions/Image'
      lang:
        type: string
        x-go-name: Lang
      last_name:
        type: string
        x-go-name: LastName
      last_sign_in_at:
        format: date-time
        type: string
        x-go-name: LastSignInAt
      meta:
        items:
          $ref: '#/definitions/UserByIdModelMeta'
        type: array
        x-go-name: Meta
      nickname:
        type: string
        x-go-name: Nickname
      role:
        $ref: '#/definitions/Role'
      sign_in_count:
        format: int64
        type: integer
        x-go-name: SignInCount
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Entity:
    properties:
      actions:
        items:
          $ref: '#/definitions/EntityAction'
        type: array
        x-go-name: Actions
      area_id:
        format: int64
        type: integer
        x-go-name: AreaId
      attributes:
        $ref: '#/definitions/EntityAttributes'
      auto_load:
        type: boolean
        x-go-name: AutoLoad
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      hidden:
        type: boolean
        x-go-name: Hidden
      icon:
        type: string
        x-go-name: Icon
      id:
        type: string
        x-go-name: Id
      image:
        $ref: '#/definitions/Image'
      metrics:
        items:
          $ref: '#/definitions/Metric'
        type: array
        x-go-name: Metrics
      scripts:
        items:
          $ref: '#/definitions/Script'
        type: array
        x-go-name: Scripts
      states:
        items:
          $ref: '#/definitions/EntityState'
        type: array
        x-go-name: States
      type:
        type: string
        x-go-name: Type
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  EntityAction:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      entity_id:
        type: string
        x-go-name: EntityId
      icon:
        type: string
        x-go-name: Icon
      id:
        format: int64
        type: integer
        x-go-name: Id
      image:
        $ref: '#/definitions/Image'
      image_id:
        format: int64
        type: integer
        x-go-name: ImageId
      name:
        type: string
        x-go-name: Name
      script:
        $ref: '#/definitions/Script'
      script_id:
        format: int64
        type: integer
        x-go-name: ScriptId
      type:
        type: string
        x-go-name: Type
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  EntityAttribute:
    properties:
      name:
        type: string
        x-go-name: Name
      type:
        type: string
        x-go-name: Type
      value:
        type: object
        x-go-name: Value
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  EntityAttributes:
    additionalProperties:
      $ref: '#/definitions/EntityAttribute'
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  EntityState:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      entity_id:
        type: string
        x-go-name: EntityId
      icon:
        type: string
        x-go-name: Icon
      id:
        format: int64
        type: integer
        x-go-name: Id
      image:
        $ref: '#/definitions/Image'
      image_id:
        format: int64
        type: integer
        x-go-name: ImageId
      name:
        type: string
        x-go-name: Name
      style:
        type: string
        x-go-name: Style
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Error:
    properties:
      code:
        $ref: '#/definitions/ResponseType'
      errors:
        $ref: '#/definitions/ErrorErrors'
      message:
        description: описание ошибки
        type: string
        x-go-name: Message
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  ErrorErrors:
    items:
      $ref: '#/definitions/ErrorErrorsItems'
    title: ErrorErrors ...
    type: array
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  ErrorErrorsItems:
    properties:
      code:
        description: тип ишибки
        type: string
        x-go-name: Code
      field:
        description: поле вызвавшее ошибку
        type: string
        x-go-name: Field
      message:
        description: описание
        type: string
        x-go-name: Message
    title: ErrorErrorsItems ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  ExecScript:
    properties:
      description:
        type: string
        x-go-name: Description
      lang:
        type: string
        x-go-name: Lang
      name:
        type: string
        x-go-name: Name
      source:
        type: string
        x-go-name: Source
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Image:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      id:
        format: int64
        type: integer
        x-go-name: Id
      image:
        type: string
        x-go-name: Image
      mime_type:
        type: string
        x-go-name: MimeType
      name:
        type: string
        x-go-name: Name
      size:
        format: int64
        type: integer
        x-go-name: Size
      thumb:
        type: string
        x-go-name: Thumb
      title:
        type: string
        x-go-name: Title
      url:
        type: string
        x-go-name: Url
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Log:
    properties:
      body:
        type: string
        x-go-name: Body
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      id:
        format: int64
        type: integer
        x-go-name: Id
      level:
        type: string
        x-go-name: Level
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Message:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      email_body:
        type: string
        x-go-name: EmailBody
      email_from:
        type: string
        x-go-name: EmailFrom
      email_subject:
        type: string
        x-go-name: EmailSubject
      id:
        format: int64
        type: integer
        x-go-name: Id
      slack_text:
        type: string
        x-go-name: SlackText
      sms_text:
        type: string
        x-go-name: SmsText
      telegram_text:
        type: string
        x-go-name: TelegramText
      type:
        type: string
        x-go-name: Type
      ui_text:
        type: string
        x-go-name: UiText
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  MessageDelivery:
    properties:
      address:
        type: string
        x-go-name: Address
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      error_message_body:
        type: string
        x-go-name: ErrorMessageBody
      error_message_status:
        type: string
        x-go-name: ErrorMessageStatus
      id:
        format: int64
        type: integer
        x-go-name: Id
      message:
        $ref: '#/definitions/Message'
      message_id:
        format: int64
        type: integer
        x-go-name: MessageId
      status:
        type: string
        x-go-name: Status
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Metric:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      data:
        items:
          $ref: '#/definitions/MetricDataItem'
        type: array
        x-go-name: Data
      description:
        type: string
        x-go-name: Description
      id:
        format: int64
        type: integer
        x-go-name: Id
      name:
        type: string
        x-go-name: Name
      options:
        $ref: '#/definitions/MetricOptions'
      ranges:
        items:
          type: string
        type: array
        x-go-name: Ranges
      type:
        type: string
        x-go-name: Type
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  MetricDataItem:
    properties:
      metric:
        $ref: '#/definitions/Metric'
      metric_id:
        format: int64
        type: integer
        x-go-name: MetricId
      time:
        format: date-time
        type: string
        x-go-name: Time
      value:
        type: object
        x-go-name: Value
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  MetricOptions:
    properties:
      items:
        items:
          $ref: '#/definitions/MetricOptionsItem'
        type: array
        x-go-name: Items
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  MetricOptionsItem:
    properties:
      color:
        type: string
        x-go-name: Color
      description:
        type: string
        x-go-name: Description
      label:
        type: string
        x-go-name: Label
      name:
        type: string
        x-go-name: Name
      translate:
        type: string
        x-go-name: Translate
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  MqttClient:
    properties:
      clean_session:
        type: boolean
        x-go-name: CleanSession
      client_id:
        type: string
        x-go-name: ClientID
      connected_at:
        format: date-time
        type: string
        x-go-name: ConnectedAt
      disconnected_at:
        format: date-time
        type: string
        x-go-name: DisconnectedAt
      keep_alive:
        format: uint16
        type: integer
        x-go-name: KeepAlive
      local_addr:
        type: string
        x-go-name: LocalAddr
      password:
        type: string
        x-go-name: Password
      remote_addr:
        type: string
        x-go-name: RemoteAddr
      username:
        type: string
        x-go-name: Username
      will_flag:
        type: boolean
        x-go-name: WillFlag
      will_payload:
        type: string
        x-go-name: WillPayload
      will_qos:
        format: uint8
        type: integer
        x-go-name: WillQos
      will_retain:
        type: boolean
        x-go-name: WillRetain
      will_topic:
        type: string
        x-go-name: WillTopic
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  MqttSession:
    properties:
      await_rel_len:
        format: uint64
        type: integer
        x-go-name: AwaitRelLen
      clean_session:
        type: boolean
        x-go-name: CleanSession
      client_id:
        type: string
        x-go-name: ClientID
      connected_at:
        format: date-time
        type: string
        x-go-name: ConnectedAt
      disconnected_at:
        format: date-time
        type: string
        x-go-name: DisconnectedAt
      inflight_len:
        format: uint64
        type: integer
        x-go-name: InflightLen
      max_await_rel:
        format: int64
        type: integer
        x-go-name: MaxAwaitRel
      max_inflight:
        format: int64
        type: integer
        x-go-name: MaxInflight
      max_msg_queue:
        format: int64
        type: integer
        x-go-name: MaxMsgQueue
      msg_queue_len:
        format: uint64
        type: integer
        x-go-name: MsgQueueLen
      qos0_msg_delivered_total:
        format: uint64
        type: integer
        x-go-name: Qos0MsgDeliveredTotal
      qos0_msg_dropped_total:
        format: uint64
        type: integer
        x-go-name: Qos0MsgDroppedTotal
      qos1_msg_delivered_total:
        format: uint64
        type: integer
        x-go-name: Qos1MsgDeliveredTotal
      qos1_msg_dropped_total:
        format: uint64
        type: integer
        x-go-name: Qos1MsgDroppedTotal
      qos2_msg_delivered_total:
        format: uint64
        type: integer
        x-go-name: Qos2MsgDeliveredTotal
      qos2_msg_dropped_total:
        format: uint64
        type: integer
        x-go-name: Qos2MsgDroppedTotal
      status:
        type: string
        x-go-name: Status
      subscriptions:
        format: uint64
        type: integer
        x-go-name: Subscriptions
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  MqttSubscription:
    properties:
      at:
        format: date-time
        type: string
        x-go-name: At
      client_id:
        type: string
        x-go-name: ClientID
      name:
        type: string
        x-go-name: Name
      qos:
        format: uint8
        type: integer
        x-go-name: Qos
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewArea:
    properties:
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewEntity:
    properties:
      actions:
        items:
          $ref: '#/definitions/NewEntityAction'
        type: array
        x-go-name: Actions
      area_id:
        format: int64
        type: integer
        x-go-name: AreaId
      attributes:
        $ref: '#/definitions/EntityAttributes'
      auto_load:
        type: boolean
        x-go-name: AutoLoad
      description:
        type: string
        x-go-name: Description
      hidden:
        type: boolean
        x-go-name: Hidden
      icon:
        type: string
        x-go-name: Icon
      id:
        type: string
        x-go-name: Id
      image:
        $ref: '#/definitions/Image'
      metrics:
        items:
          $ref: '#/definitions/Metric'
        type: array
        x-go-name: Metrics
      scripts:
        items:
          $ref: '#/definitions/Script'
        type: array
        x-go-name: Scripts
      states:
        items:
          $ref: '#/definitions/NewEntityState'
        type: array
        x-go-name: States
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewEntityAction:
    properties:
      description:
        type: string
        x-go-name: Description
      icon:
        type: string
        x-go-name: Icon
      image:
        $ref: '#/definitions/Image'
      image_id:
        format: int64
        type: integer
        x-go-name: ImageId
      name:
        type: string
        x-go-name: Name
      script:
        $ref: '#/definitions/Script'
      script_id:
        format: int64
        type: integer
        x-go-name: ScriptId
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewEntityState:
    properties:
      description:
        type: string
        x-go-name: Description
      icon:
        type: string
        x-go-name: Icon
      id:
        format: int64
        type: integer
        x-go-name: Id
      image:
        $ref: '#/definitions/Image'
      image_id:
        format: int64
        type: integer
        x-go-name: ImageId
      name:
        type: string
        x-go-name: Name
      style:
        type: string
        x-go-name: Style
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewImage:
    properties:
      image:
        type: string
        x-go-name: Image
      mime_type:
        type: string
        x-go-name: MimeType
      name:
        type: string
        x-go-name: Name
      size:
        format: int64
        type: integer
        x-go-name: Size
      thumb:
        type: string
        x-go-name: Thumb
      title:
        type: string
        x-go-name: Title
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewLog:
    properties:
      Level:
        type: string
      body:
        type: string
        x-go-name: Body
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewMetric:
    properties:
      data:
        items:
          $ref: '#/definitions/MetricDataItem'
        type: array
        x-go-name: Data
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      options:
        $ref: '#/definitions/MetricOptions'
      ranges:
        items:
          type: string
        type: array
        x-go-name: Ranges
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewMqttPublish:
    properties:
      payload:
        items:
          format: uint8
          type: integer
        type: array
        x-go-name: Payload
      qos:
        format: int64
        type: integer
        x-go-name: Qos
      retain:
        type: boolean
        x-go-name: Retain
      topic:
        type: string
        x-go-name: Topic
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewNode:
    properties:
      description:
        type: string
        x-go-name: Description
      ip:
        type: string
        x-go-name: IP
      login:
        type: string
        x-go-name: Login
      name:
        type: string
        x-go-name: Name
      password:
        type: string
        x-go-name: Password
      password_repeat:
        type: string
        x-go-name: PasswordRepeat
      port:
        format: int64
        type: integer
        x-go-name: Port
      status:
        type: string
        x-go-name: Status
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewNotifrMessage:
    properties:
      address:
        type: string
        x-go-name: Address
      body_type:
        type: string
        x-go-name: BodyType
      email_body:
        type: string
        x-go-name: EmailBody
      email_from:
        type: string
        x-go-name: EmailFrom
      email_subject:
        type: string
        x-go-name: EmailSubject
      params:
        additionalProperties:
          type: string
        type: object
        x-go-name: Params
      slack_text:
        type: string
        x-go-name: SlackText
      sms_text:
        type: string
        x-go-name: SmsText
      template:
        type: string
        x-go-name: Template
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewRole:
    properties:
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      parent:
        properties:
          name:
            type: string
            x-go-name: Name
        type: object
        x-go-name: Parent
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewScript:
    properties:
      description:
        type: string
        x-go-name: Description
      lang:
        type: string
        x-go-name: Lang
      name:
        type: string
        x-go-name: Name
      source:
        type: string
        x-go-name: Source
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewTemplate:
    properties:
      content:
        type: string
        x-go-name: Content
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      parent:
        type: string
        x-go-name: ParentName
      status:
        type: string
        x-go-name: Status
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewTemplateItem:
    properties:
      content:
        type: string
        x-go-name: Content
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      parent:
        type: string
        x-go-name: ParentName
      status:
        type: string
        x-go-name: Status
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewUser:
    properties:
      email:
        type: string
        x-go-name: Email
      first_name:
        type: string
        x-go-name: FirstName
      image:
        $ref: '#/definitions/NewUserImage'
      lang:
        type: string
        x-go-name: Lang
      last_name:
        type: string
        x-go-name: LastName
      meta:
        items:
          $ref: '#/definitions/NewUserMeta'
        type: array
        x-go-name: Meta
      nickname:
        type: string
        x-go-name: Nickname
      password:
        type: string
        x-go-name: Password
      password_repeat:
        type: string
        x-go-name: PasswordRepeat
      role:
        $ref: '#/definitions/NewUserRole'
      status:
        type: string
        x-go-name: Status
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewUserImage:
    properties:
      id:
        format: int64
        type: integer
        x-go-name: Id
    title: NewUserImage ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewUserMeta:
    properties:
      key:
        type: string
        x-go-name: Key
      value:
        type: string
        x-go-name: Value
    title: NewUserMeta ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewUserRole:
    properties:
      name:
        type: string
        x-go-name: Name
    title: NewUserRole ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NewZigbee2mqtt:
    properties:
      base_topic:
        type: string
        x-go-name: BaseTopic
      login:
        type: string
        x-go-name: Login
      name:
        type: string
        x-go-name: Name
      password:
        type: string
        x-go-name: Password
      password_repeat:
        type: string
        x-go-name: PasswordRepeat
      permit_join:
        type: boolean
        x-go-name: PermitJoin
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Node:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      id:
        format: int64
        type: integer
        x-go-name: Id
      ip:
        type: string
        x-go-name: Ip
      login:
        type: string
        x-go-name: Login
      name:
        type: string
        x-go-name: Name
      port:
        format: int64
        type: integer
        x-go-name: Port
      status:
        type: string
        x-go-name: Status
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  NotifrConfig:
    properties:
      email_auth:
        type: string
        x-go-name: EmailAuth
      email_pass:
        type: string
        x-go-name: EmailPass
      email_port:
        format: int64
        type: integer
        x-go-name: EmailPort
      email_sender:
        type: string
        x-go-name: EmailSender
      email_smtp:
        type: string
        x-go-name: EmailSmtp
      mb_access_key:
        type: string
        x-go-name: MbAccessKey
      mb_name:
        type: string
        x-go-name: MbName
      slack_token:
        type: string
        x-go-name: SlackToken
      slack_user_name:
        type: string
        x-go-name: SlackUserName
      telegram_chat_id:
        format: int64
        type: integer
        x-go-name: TelegramChatId
      telegram_token:
        type: string
        x-go-name: TelegramToken
      tw_auth_token:
        type: string
        x-go-name: TWAuthToken
      tw_from:
        type: string
        x-go-name: TWFrom
      tw_sid:
        type: string
        x-go-name: TWSid
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  ResponseType:
    title: ResponseType ...
    type: string
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Role:
    properties:
      access_list:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
        x-go-name: AccessList
      children:
        items:
          $ref: '#/definitions/Role'
        type: array
        x-go-name: Children
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      parent:
        properties:
          name:
            type: string
            x-go-name: Name
        type: object
        x-go-name: Parent
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Script:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      id:
        format: int64
        type: integer
        x-go-name: Id
      lang:
        type: string
        x-go-name: Lang
      name:
        type: string
        x-go-name: Name
      source:
        type: string
        x-go-name: Source
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Template:
    properties:
      content:
        type: string
        x-go-name: Content
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      markers:
        items:
          type: string
        type: array
        x-go-name: Markers
      name:
        type: string
        x-go-name: Name
      parent:
        type: string
        x-go-name: ParentName
      status:
        type: string
        x-go-name: Status
      type:
        type: string
        x-go-name: Type
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  TemplateContent:
    properties:
      fields:
        items:
          $ref: '#/definitions/TemplateField'
        type: array
        x-go-name: Fields
      items:
        items:
          type: string
        type: array
        x-go-name: Items
      title:
        type: string
        x-go-name: Title
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  TemplateField:
    properties:
      name:
        type: string
        x-go-name: Name
      value:
        type: string
        x-go-name: Value
    title: TemplateField ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  TemplateItem:
    properties:
      content:
        type: string
        x-go-name: Content
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      parent:
        type: string
        x-go-name: ParentName
      status:
        type: string
        x-go-name: Status
      type:
        type: string
        x-go-name: Type
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  TemplateTree:
    items:
      $ref: '#/definitions/TemplateTreeBranch'
    type: array
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  TemplateTreeBranch:
    properties:
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      nodes:
        items:
          $ref: '#/definitions/TemplateTreeBranch'
        type: array
        x-go-name: Nodes
      status:
        type: string
        x-go-name: Status
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateEntity:
    properties:
      actions:
        items:
          $ref: '#/definitions/EntityAction'
        type: array
        x-go-name: Actions
      area_id:
        format: int64
        type: integer
        x-go-name: AreaId
      attributes:
        $ref: '#/definitions/EntityAttributes'
      auto_load:
        type: boolean
        x-go-name: AutoLoad
      description:
        type: string
        x-go-name: Description
      hidden:
        type: boolean
        x-go-name: Hidden
      icon:
        type: string
        x-go-name: Icon
      image:
        $ref: '#/definitions/Image'
      metrics:
        items:
          $ref: '#/definitions/Metric'
        type: array
        x-go-name: Metrics
      scripts:
        items:
          $ref: '#/definitions/Script'
        type: array
        x-go-name: Scripts
      states:
        items:
          $ref: '#/definitions/EntityState'
        type: array
        x-go-name: States
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateImage:
    properties:
      id:
        format: int64
        type: integer
        x-go-name: Id
      image:
        type: string
        x-go-name: Image
      mime_type:
        type: string
        x-go-name: MimeType
      name:
        type: string
        x-go-name: Name
      size:
        format: int64
        type: integer
        x-go-name: Size
      thumb:
        type: string
        x-go-name: Thumb
      title:
        type: string
        x-go-name: Title
      url:
        type: string
        x-go-name: Url
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateNode:
    properties:
      description:
        type: string
        x-go-name: Description
      id:
        format: int64
        type: integer
        x-go-name: Id
      ip:
        type: string
        x-go-name: IP
      login:
        type: string
        x-go-name: Login
      name:
        type: string
        x-go-name: Name
      password:
        type: string
        x-go-name: Password
      password_repeat:
        type: string
        x-go-name: PasswordRepeat
      port:
        format: int64
        type: integer
        x-go-name: Port
      status:
        type: string
        x-go-name: Status
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateNotifrConfig:
    properties:
      email_auth:
        type: string
        x-go-name: EmailAuth
      email_pass:
        type: string
        x-go-name: EmailPass
      email_port:
        format: int64
        type: integer
        x-go-name: EmailPort
      email_sender:
        type: string
        x-go-name: EmailSender
      email_smtp:
        type: string
        x-go-name: EmailSmtp
      mb_access_key:
        type: string
        x-go-name: MbAccessKey
      mb_name:
        type: string
        x-go-name: MbName
      slack_token:
        type: string
        x-go-name: SlackToken
      slack_user_name:
        type: string
        x-go-name: SlackUserName
      telegram_chat_id:
        format: int64
        type: integer
        x-go-name: TelegramChatId
      telegram_token:
        type: string
        x-go-name: TelegramToken
      tw_auth_token:
        type: string
        x-go-name: TWAuthToken
      tw_from:
        type: string
        x-go-name: TWFrom
      tw_sid:
        type: string
        x-go-name: TWSid
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateRole:
    properties:
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      parent:
        properties:
          name:
            type: string
            x-go-name: Name
        type: object
        x-go-name: Parent
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateScript:
    properties:
      description:
        type: string
        x-go-name: Description
      id:
        format: int64
        type: integer
        x-go-name: Id
      lang:
        type: string
        x-go-name: Lang
      name:
        type: string
        x-go-name: Name
      source:
        type: string
        x-go-name: Source
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateTemplate:
    properties:
      content:
        type: string
        x-go-name: Content
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      parent:
        type: string
        x-go-name: ParentName
      status:
        type: string
        x-go-name: Status
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateTemplateItem:
    properties:
      content:
        type: string
        x-go-name: Content
      description:
        type: string
        x-go-name: Description
      name:
        type: string
        x-go-name: Name
      parent:
        type: string
        x-go-name: ParentName
      status:
        type: string
        x-go-name: Status
      type:
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateTemplateItemStatus:
    properties:
      name:
        type: string
        x-go-name: Name
      status:
        type: string
        x-go-name: Status
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateTemplateTree:
    items:
      $ref: '#/definitions/TemplateTreeBranch'
    type: array
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateUser:
    properties:
      email:
        type: string
        x-go-name: Email
      first_name:
        type: string
        x-go-name: FirstName
      id:
        format: int64
        type: integer
        x-go-name: Id
      image:
        $ref: '#/definitions/NewUserImage'
      lang:
        type: string
        x-go-name: Lang
      last_name:
        type: string
        x-go-name: LastName
      meta:
        items:
          $ref: '#/definitions/NewUserMeta'
        type: array
        x-go-name: Meta
      nickname:
        type: string
        x-go-name: Nickname
      password:
        type: string
        x-go-name: Password
      password_repeat:
        type: string
        x-go-name: PasswordRepeat
      role:
        $ref: '#/definitions/NewUserRole'
      status:
        type: string
        x-go-name: Status
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UpdateZigbee2mqtt:
    properties:
      base_topic:
        type: string
        x-go-name: BaseTopic
      login:
        type: string
        x-go-name: Login
      name:
        type: string
        x-go-name: Name
      password:
        type: string
        x-go-name: Password
      password_repeat:
        type: string
        x-go-name: PasswordRepeat
      permit_join:
        type: boolean
        x-go-name: PermitJoin
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UserByIdModelMeta:
    properties:
      key:
        type: string
        x-go-name: Key
      value:
        type: string
        x-go-name: Value
    title: UserByIdModelMeta ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UserByIdModelParent:
    properties:
      id:
        format: int64
        type: integer
        x-go-name: Id
      nickname:
        type: string
        x-go-name: Nickname
    title: UserByIdModelParent ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UserFull:
    properties:
      authentication_token:
        type: string
        x-go-name: AuthenticationToken
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      current_sign_in_at:
        format: date-time
        type: string
        x-go-name: CurrentSignInAt
      current_sign_in_ip:
        type: string
        x-go-name: CurrentSignInIp
      deleted_at:
        format: date-time
        type: string
        x-go-name: DeletedAt
      email:
        type: string
        x-go-name: Email
      first_name:
        type: string
        x-go-name: FirstName
      history:
        items:
          $ref: '#/definitions/UserHistory'
        type: array
        x-go-name: History
      id:
        format: int64
        type: integer
        x-go-name: Id
      image:
        $ref: '#/definitions/Image'
      lang:
        type: string
        x-go-name: Lang
      last_name:
        type: string
        x-go-name: LastName
      last_sign_in_at:
        format: date-time
        type: string
        x-go-name: LastSignInAt
      last_sign_in_ip:
        type: string
        x-go-name: LastSignInIp
      meta:
        items:
          $ref: '#/definitions/UserByIdModelMeta'
        type: array
        x-go-name: Meta
      nickname:
        type: string
        x-go-name: Nickname
      reset_password_sent_at:
        format: date-time
        type: string
        x-go-name: ResetPasswordSentAt
      role:
        $ref: '#/definitions/Role'
      role_name:
        type: string
        x-go-name: RoleName
      sign_in_count:
        format: int64
        type: integer
        x-go-name: SignInCount
      status:
        type: string
        x-go-name: Status
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
      user:
        $ref: '#/definitions/UserByIdModelParent'
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UserHistory:
    properties:
      ip:
        type: string
        x-go-name: Ip
      time:
        format: date-time
        type: string
        x-go-name: Time
    title: UserHistory ...
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UserShot:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      email:
        type: string
        x-go-name: Email
      first_name:
        type: string
        x-go-name: FirstName
      id:
        format: int64
        type: integer
        x-go-name: Id
      image:
        $ref: '#/definitions/Image'
      lang:
        type: string
        x-go-name: Lang
      last_name:
        type: string
        x-go-name: LastName
      nickname:
        type: string
        x-go-name: Nickname
      role:
        $ref: '#/definitions/Role'
      role_name:
        type: string
        x-go-name: RoleName
      status:
        type: string
        x-go-name: Status
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
      user:
        $ref: '#/definitions/UserByIdModelParent'
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  UserUpdateStatusRequest:
    properties:
      status:
        type: string
        x-go-name: Status
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Version:
    properties:
      build_num:
        type: string
        x-go-name: BuildNum
      developers:
        type: string
        x-go-name: Developers
      docker_image:
        type: string
        x-go-name: DockerImage
      generated:
        type: string
        x-go-name: Generated
      revision:
        type: string
        x-go-name: Revision
      revision_url:
        type: string
        x-go-name: RevisionURL
      version:
        type: string
        x-go-name: Version
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Zigbee2mqtt:
    properties:
      base_topic:
        type: string
        x-go-name: BaseTopic
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      devices:
        items:
          $ref: '#/definitions/Zigbee2mqttDevice'
        type: array
        x-go-name: Devices
      id:
        format: int64
        type: integer
        x-go-name: Id
      login:
        type: string
        x-go-name: Login
      name:
        type: string
        x-go-name: Name
      permit_join:
        type: boolean
        x-go-name: PermitJoin
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Zigbee2mqttDevice:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      functions:
        items:
          type: string
        type: array
        x-go-name: Functions
      id:
        type: string
        x-go-name: Id
      image_url:
        type: string
        x-go-name: ImageUrl
      manufacturer:
        type: string
        x-go-name: Manufacturer
      model:
        type: string
        x-go-name: Model
      name:
        type: string
        x-go-name: Name
      status:
        type: string
        x-go-name: Status
      type:
        type: string
        x-go-name: Type
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
      zigbee2mqtt_id:
        format: int64
        type: integer
        x-go-name: Zigbee2mqttId
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Zigbee2mqttDeviceShort:
    properties:
      description:
        type: string
        x-go-name: Description
      id:
        type: string
        x-go-name: Id
      image_url:
        type: string
        x-go-name: ImageUrl
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
  Zigbee2mqttInfo:
    properties:
      last_scan:
        format: date-time
        type: string
        x-go-name: LastScan
      model:
        $ref: '#/definitions/Zigbee2mqtt'
      networkmap:
        type: string
        x-go-name: Networkmap
      scan_in_process:
        type: boolean
        x-go-name: ScanInProcess
      status:
        type: string
        x-go-name: Status
    type: object
    x-go-package: github.com/e154/smart-home/api/server/v1/models
info:
  contact:
    email: support@e154.ru
    name: Alex Filippov
    url: https://e154.github.io/smart-home/
  description: This documentation describes APIs found under https://github.com/e154/smart-home
  license:
    name: GPLv3
    url: https://raw.githubusercontent.com/e154/smart-home/master/LICENSE
  title: Smart home
  version: 1.0.0
paths:
  /:
    get:
      consumes:
      - text/plain
      operationId: index
      produces:
      - text/plain
      responses:
        "200":
          description: Success response
      summary: index page
      tags:
      - index
  /access_list:
    get:
      operationId: authGetAccessList
      responses:
        "200":
          description: OK
          schema:
            properties:
              access_list:
                $ref: '#/definitions/AccessList'
            type: object
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get user access list
      tags:
      - auth
  /entities:
    get:
      operationId: entityList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: DESC
        description: order
        in: query
        name: order
        type: string
      - default: id
        description: sort_by
        in: query
        name: sort_by
        type: string
      responses:
        "200":
          $ref: '#/responses/EntityList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get entity list
      tags:
      - entity
  /entities/search:
    get:
      operationId: entitySearch
      parameters:
      - description: query
        in: query
        name: query
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/EntitySearch'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: search entity
      tags:
      - entity
  /entity:
    post:
      operationId: entityAdd
      parameters:
      - description: entity params
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/NewEntity'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Entity'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new entity
      tags:
      - entity
  /entity/{id}:
    delete:
      operationId: entityDeleteById
      parameters:
      - description: Entity ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete entity by id
      tags:
      - entity
    get:
      operationId: entityGetById
      parameters:
      - description: Entity ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Entity'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get entity by id
      tags:
      - entity
    put:
      operationId: entityUpdateById
      parameters:
      - description: Entity ID
        in: path
        name: id
        required: true
        type: string
      - description: Update entity params
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/Update'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Entity'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update entity by id
      tags:
      - entity
  /image:
    post:
      operationId: imageAdd
      parameters:
      - description: image params
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/NewImage'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Image'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new image
      tags:
      - image
  /image/{id}:
    delete:
      operationId: imageDeleteById
      parameters:
      - description: Image ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete image by id
      tags:
      - image
    get:
      operationId: imageGetById
      parameters:
      - description: Image ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Image'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get image by id
      tags:
      - image
    put:
      operationId: imageUpdateById
      parameters:
      - description: Image ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update image params
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/UpdateImage'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Image'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update image by id
      tags:
      - image
  /image/upload:
    post:
      consumes:
      - multipart/form-data
      operationId: imageUpload
      parameters:
      - description: image file
        in: formData
        items:
          type: file
        name: file
        required: true
        type: array
      responses:
        "200":
          $ref: '#/responses/NewObjectSuccess'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: upload image files
      tags:
      - image
  /images:
    get:
      operationId: imageList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: DESC
        description: order
        in: query
        name: order
        type: string
      - default: id
        description: sort_by
        in: query
        name: sort_by
        type: string
      responses:
        "200":
          $ref: '#/responses/ImageList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get image list
      tags:
      - image
  /log:
    post:
      operationId: logAdd
      parameters:
      - description: log params
        in: body
        name: log
        required: true
        schema:
          $ref: '#/definitions/NewLog'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Log'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new log
      tags:
      - log
  /log/{id}:
    delete:
      operationId: logDeleteById
      parameters:
      - description: Log ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete log by id
      tags:
      - log
    get:
      operationId: logGetById
      parameters:
      - description: Log ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Log'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get log by id
      tags:
      - log
  /logs:
    get:
      operationId: logList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: DESC
        description: order
        in: query
        name: order
        type: string
      - default: id
        description: sort_by
        in: query
        name: sort_by
        type: string
      - default: id
        description: query
        in: query
        name: query
        type: string
      responses:
        "200":
          $ref: '#/responses/LogList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get log list
      tags:
      - log
  /logs/search:
    get:
      operationId: logSearch
      parameters:
      - description: query
        in: query
        name: query
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/LogSearch'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: search log
      tags:
      - log
  /mqtt/client/{id}:
    delete:
      operationId: mqttCloseClient
      parameters:
      - description: client ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: close client
      tags:
      - mqtt
    get:
      operationId: mqttClientGetById
      parameters:
      - description: client ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MqttClient'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get client by ID
      tags:
      - mqtt
  /mqtt/client/{id}/session:
    get:
      operationId: mqttClientGetById
      parameters:
      - description: client ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MqttSession'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get session by client ID
      tags:
      - mqtt
  /mqtt/client/{id}/subscriptions:
    get:
      operationId: mqttSubscriptionList
      parameters:
      - description: client ID
        in: path
        name: id
        required: true
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/MqttSubscriptionList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get subscription list
      tags:
      - mqtt
  /mqtt/client/{id}/topic:
    delete:
      operationId: mqttUnsubscribeTopic
      parameters:
      - description: client ID
        in: path
        name: id
        required: true
        type: string
      - description: topic
        in: query
        name: topic
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete mqtt by id
      tags:
      - mqtt
  /mqtt/clients:
    get:
      operationId: mqttClientList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/MqttClientList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get client list
      tags:
      - mqtt
  /mqtt/publish:
    post:
      operationId: mqttPublish
      parameters:
      - description: publish params
        in: body
        name: mqtt
        required: true
        schema:
          $ref: '#/definitions/NewMqttPublish'
          type: object
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: publish
      tags:
      - mqtt
  /mqtt/search_topic:
    get:
      operationId: mqttSearchTopic
      parameters:
      - description: query
        in: query
        name: query
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/MqttSearchSubscriptionResult'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: search mqtt topic
      tags:
      - mqtt
  /mqtt/sessions:
    get:
      operationId: mqttSessionList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/MqttSessionList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get session list
      tags:
      - mqtt
  /node:
    post:
      operationId: nodeAdd
      parameters:
      - description: node params
        in: body
        name: node
        required: true
        schema:
          $ref: '#/definitions/NewNode'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Node'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new node
      tags:
      - node
  /node/{id}:
    delete:
      operationId: nodeDeleteById
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete node by id
      tags:
      - node
    get:
      operationId: nodeGetById
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Node'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get node by id
      tags:
      - node
    put:
      operationId: nodeUpdateById
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update node params
        in: body
        name: node
        required: true
        schema:
          $ref: '#/definitions/UpdateNode'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Node'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update node by id
      tags:
      - node
  /nodes:
    get:
      operationId: nodeList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: DESC
        description: order
        in: query
        name: order
        type: string
      - default: id
        description: sort_by
        in: query
        name: sort_by
        type: string
      responses:
        "200":
          $ref: '#/responses/NodeList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get node list
      tags:
      - node
  /nodes/search:
    get:
      operationId: nodeSearch
      parameters:
      - description: query
        in: query
        name: query
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/NodeSearch'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: search node
      tags:
      - node
  /notifr:
    post:
      operationId: notifySendNewMessage
      parameters:
      - description: message object
        in: body
        required: true
        schema:
          $ref: '#/definitions/NewNotifrMessage'
          type: object
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: repeat notification by id
      tags:
      - notifr
  /notifr/{id}:
    delete:
      operationId: notifrDeleteById
      parameters:
      - description: notification ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete notification by id
      tags:
      - notifr
  /notifr/{id}/repeat:
    post:
      operationId: notifyRepeatMessage
      parameters:
      - description: notification ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: repeat notification by id
      tags:
      - notifr
  /notifr/config:
    get:
      operationId: notifyGetSettings
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NotifrConfig'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get notifr settings
      tags:
      - notifr
    put:
      operationId: notifyUpdateSettings
      parameters:
      - description: Update notifr params
        in: body
        name: notifr
        required: true
        schema:
          $ref: '#/definitions/UpdateNotifrConfig'
          type: object
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update notifr settings
      tags:
      - notifr
  /notifrs:
    get:
      operationId: notifrList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: DESC
        description: order
        in: query
        name: order
        type: string
      - default: id
        description: sort_by
        in: query
        name: sort_by
        type: string
      responses:
        "200":
          $ref: '#/responses/MessageDeliveryList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get notification list
      tags:
      - notifr
  /recovery:
    post:
      operationId: authRecovery
      responses:
        "200":
          $ref: '#/responses/Success'
        "500":
          $ref: '#/responses/Error'
      summary: recovery access
      tags:
      - auth
  /reset:
    post:
      operationId: authReset
      responses:
        "200":
          $ref: '#/responses/Success'
        "500":
          $ref: '#/responses/Error'
      summary: reset access
      tags:
      - auth
  /role:
    post:
      operationId: roleAdd
      parameters:
      - description: role params
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/NewRole'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Role'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new role
      tags:
      - role
  /role/{name}:
    delete:
      operationId: roleDeleteById
      parameters:
      - description: Role ID
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete role by name
      tags:
      - role
    get:
      operationId: roleGetById
      parameters:
      - description: Role name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Role'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get role by name
      tags:
      - role
    put:
      operationId: roleUpdateById
      parameters:
      - description: Role ID
        in: path
        name: name
        required: true
        type: string
      - description: Update role params
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/UpdateRole'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Role'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update role by name
      tags:
      - role
  /role/{name}/access_list:
    get:
      operationId: roleGetById
      parameters:
      - description: Role name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            properties:
              access_list:
                $ref: '#/definitions/AccessList'
            type: object
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get access list by role name
      tags:
      - role
    put:
      operationId: roleUpdateById
      parameters:
      - description: Role name
        in: path
        name: name
        required: true
        type: string
      - description: Update access list params
        in: body
        name: access_list_diff
        required: true
        schema:
          $ref: '#/definitions/AccessListDiff'
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update role access list
      tags:
      - role
  /roles:
    get:
      operationId: roleList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: DESC
        description: order
        in: query
        name: order
        type: string
      - default: id
        description: sort_by
        in: query
        name: sort_by
        type: string
      responses:
        "200":
          $ref: '#/responses/RoleList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get role list
      tags:
      - role
  /roles/search:
    get:
      operationId: roleSearch
      parameters:
      - description: query
        in: query
        name: query
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/RoleSearch'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: search role
      tags:
      - role
  /script:
    post:
      operationId: scriptAdd
      parameters:
      - description: script params
        in: body
        name: script
        required: true
        schema:
          $ref: '#/definitions/NewScript'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Script'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new script
      tags:
      - script
  /script/{id}:
    delete:
      operationId: scriptDeleteById
      parameters:
      - description: Script ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete script by id
      tags:
      - script
    get:
      operationId: scriptGetById
      parameters:
      - description: Script ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Script'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get script by id
      tags:
      - script
    put:
      operationId: scriptUpdateById
      parameters:
      - description: Script ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update script params
        in: body
        name: script
        required: true
        schema:
          $ref: '#/definitions/UpdateScript'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Script'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update script by id
      tags:
      - script
  /script/{id}/copy:
    post:
      operationId: scriptCopyById
      parameters:
      - description: Script ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Script'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: copy script by id
      tags:
      - script
  /script/{id}/exec:
    post:
      operationId: scriptExecById
      parameters:
      - description: Script ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/ScriptExec'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: Execute script by id
      tags:
      - script
  /script/{id}/exec_src:
    post:
      operationId: scriptExecSrc
      parameters:
      - description: source script
        in: body
        name: script
        required: true
        schema:
          $ref: '#/definitions/ExecScript'
          type: object
      responses:
        "200":
          $ref: '#/responses/ScriptExec'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: Exec script from request params
      tags:
      - script
  /scripts:
    get:
      operationId: scriptList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: DESC
        description: order
        in: query
        name: order
        type: string
      - default: id
        description: sort_by
        in: query
        name: sort_by
        type: string
      responses:
        "200":
          $ref: '#/responses/ScriptList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get script list
      tags:
      - script
  /scripts/search:
    get:
      operationId: scriptSearch
      parameters:
      - description: query
        in: query
        name: query
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/ScriptSearch'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: search script
      tags:
      - script
  /signin:
    post:
      operationId: authSignin
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthSignInResponse'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - BasicAuth: []
      summary: sign in
      tags:
      - auth
  /signout:
    post:
      operationId: authSignout
      responses:
        "200":
          $ref: '#/responses/Success'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: sign out
      tags:
      - auth
  /template:
    post:
      operationId: templateAdd
      parameters:
      - description: template params
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/NewTemplate'
          type: object
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new template item
      tags:
      - template
  /template/{name}:
    delete:
      operationId: templateDeleteByName
      parameters:
      - description: Template Name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete template by string
      tags:
      - template
    get:
      operationId: templateGetByName
      parameters:
      - description: Template Name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Template'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get template by name
      tags:
      - template
    put:
      operationId: templateUpdateByName
      parameters:
      - description: Template Name
        in: path
        name: name
        required: true
        type: string
      - description: Update item params
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/UpdateTemplate'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Template'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update template by id
      tags:
      - template
  /template_item:
    post:
      operationId: templateAddItem
      parameters:
      - description: template params
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/NewTemplateItem'
          type: object
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new template item
      tags:
      - template_item
  /template_item/{name}:
    delete:
      operationId: templateDeleteItemByName
      parameters:
      - description: TemplateItem Name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete template item by string
      tags:
      - template_item
    get:
      operationId: templateGetItemByName
      parameters:
      - description: TemplateItem Name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TemplateItem'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get template item by name
      tags:
      - template_item
    put:
      operationId: templateUpdateItemByName
      parameters:
      - description: Template Name
        in: path
        name: name
        required: true
        type: string
      - description: Update item params
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/UpdateTemplateItem'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Template'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update template by id
      tags:
      - template_item
  /template_item/status/{name}:
    put:
      operationId: templateUpdateStatusItemByName
      parameters:
      - description: Template Name
        in: path
        name: name
        required: true
        type: string
      - description: Update item params
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/UpdateTemplateItemStatus'
          type: object
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update template by id
      tags:
      - template_item
  /template_items:
    get:
      operationId: templateGetItemList
      responses:
        "200":
          $ref: '#/responses/TemplateItemSortedList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get template item list
      tags:
      - template_item
  /template_items/tree:
    get:
      operationId: templateGetItemsTree
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TemplateTree'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get template items tree
      tags:
      - template_item
    put:
      operationId: templateUpdateItemsTree
      parameters:
      - description: Update item params
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/UpdateTemplateTree'
          type: object
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update template by id
      tags:
      - template_item
  /templates:
    get:
      operationId: templateList
      responses:
        "200":
          $ref: '#/responses/TemplateList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get template list
      tags:
      - template
  /templates/preview:
    post:
      operationId: templatePreview
      parameters:
      - description: Update item params
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/TemplateContent'
          type: object
      responses:
        "200":
          $ref: '#/responses/Success'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: preview template
      tags:
      - template
  /templates/search:
    get:
      operationId: templateSearch
      parameters:
      - description: query
        in: query
        name: query
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/TemplateSearch'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: search template
      tags:
      - template
  /user:
    post:
      operationId: userAdd
      parameters:
      - description: user params
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/NewUser'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserFull'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new user
      tags:
      - user
  /user/{id}:
    delete:
      operationId: userDeleteById
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete user by id
      tags:
      - user
    get:
      operationId: userGetById
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserFull'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get user by id
      tags:
      - user
    put:
      operationId: userUpdateById
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user params
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UpdateUser'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserFull'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update user by id
      tags:
      - user
  /user/{id}/update_status:
    put:
      operationId: userUpdateStatus
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: status params
        in: body
        name: user_status
        required: true
        schema:
          $ref: '#/definitions/UserUpdateStatusRequest'
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update user status
      tags:
      - user
  /users:
    get:
      operationId: userList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: DESC
        description: order
        in: query
        name: order
        type: string
      - default: id
        description: sort_by
        in: query
        name: sort_by
        type: string
      responses:
        "200":
          $ref: '#/responses/UserList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get user list
      tags:
      - user
  /version:
    get:
      operationId: getServerVersion
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Version'
      summary: get server version
      tags:
      - version
  /zigbee2mqtt:
    post:
      operationId: bridgeAdd
      parameters:
      - description: zigbee2mqtt params
        in: body
        name: zigbee2mqtt
        required: true
        schema:
          $ref: '#/definitions/NewZigbee2mqtt'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Zigbee2mqtt'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: add new zigbee2mqtt
      tags:
      - zigbee2mqtt
  /zigbee2mqtt/{id}:
    delete:
      operationId: bridgeDeleteById
      parameters:
      - description: Zigbee2mqtt ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: delete bridge by id
      tags:
      - zigbee2mqtt
    get:
      operationId: bridgeGetById
      parameters:
      - description: get zigbee2mqtt bridge by ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Zigbee2mqttInfo'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get zigbee2mqtt bridge by ID
      tags:
      - zigbee2mqtt
    put:
      operationId: bridgeUpdateById
      parameters:
      - description: Zigbee2mqtt ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update bridge params
        in: body
        name: bridge
        required: true
        schema:
          $ref: '#/definitions/UpdateZigbee2mqtt'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Zigbee2mqtt'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: update bridge by id
      tags:
      - zigbee2mqtt
  /zigbee2mqtt/{id}/device_ban:
    post:
      operationId: banDevice
      parameters:
      - description: set device to ban
        in: path
        name: id
        required: true
        type: integer
      - description: device id
        in: query
        name: friendly_name
        required: true
        type: text
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: set device to ban
      tags:
      - zigbee2mqtt
  /zigbee2mqtt/{id}/device_whitelist:
    post:
      operationId: deviceWhitelist
      parameters:
      - description: set device by id to white list
        in: path
        name: id
        required: true
        type: integer
      - description: device id
        in: query
        name: friendly_name
        required: true
        type: text
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: set device by id to white list
      tags:
      - zigbee2mqtt
  /zigbee2mqtt/{id}/networkmap:
    get:
      operationId: Networkmap
      parameters:
      - description: get network map
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get network map
      tags:
      - zigbee2mqtt
  /zigbee2mqtt/{id}/reset:
    post:
      operationId: bridgeResetById
      parameters:
      - description: reset zigbee2mqtt bridge by ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: reset zigbee2mqtt bridge by ID
      tags:
      - zigbee2mqtt
  /zigbee2mqtt/{id}/update_networkmap:
    post:
      operationId: UpdateNetworkmap
      parameters:
      - description: update network map
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: reset update network map
      tags:
      - zigbee2mqtt
  /zigbee2mqtts:
    get:
      operationId: bridgeList
      parameters:
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: DESC
        description: order
        in: query
        name: order
        type: string
      - default: id
        description: sort_by
        in: query
        name: sort_by
        type: string
      responses:
        "200":
          $ref: '#/responses/Zigbee2mqttList'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: get bridge list
      tags:
      - zigbee2mqtt
  /zigbee2mqtts/device_rename:
    patch:
      operationId: deviceRename
      parameters:
      - description: device id
        in: query
        name: friendly_name
        required: true
        type: string
      - description: new name
        in: query
        name: name
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Success'
        "400":
          $ref: '#/responses/Error'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          $ref: '#/responses/Error'
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: rename device
      tags:
      - zigbee2mqtt
  /zigbee2mqtts/search_device:
    get:
      operationId: zigbee2mqttSearchDevice
      parameters:
      - description: query
        in: query
        name: query
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/Zigbee2mqttDeviceSearch'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          $ref: '#/responses/Error'
      security:
      - ApiKeyAuth: []
      summary: search device by name
      tags:
      - zigbee2mqtt
produces:
- application/json
responses:
  EntityList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/Entity'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  EntitySearch:
    description: ""
    schema:
      properties:
        entities:
          items:
            $ref: '#/definitions/Entity'
          type: array
          x-go-name: Entities
      type: object
  Error:
    description: Error response
    schema:
      properties:
        code:
          $ref: '#/definitions/ResponseType'
        errors:
          $ref: '#/definitions/ErrorErrors'
        message:
          description: описание ошибки
          type: string
          x-go-name: Message
      type: object
  ImageList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/Image'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  LogList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/Log'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  LogSearch:
    description: ""
    schema:
      properties:
        logs:
          items:
            $ref: '#/definitions/Log'
          type: array
          x-go-name: Logs
      type: object
  MessageDeliveryList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/MessageDelivery'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  MqttClientList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/MqttClient'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            object_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  MqttSearchSubscriptionResult:
    description: ""
    schema:
      properties:
        subscriptions:
          items:
            $ref: '#/definitions/MqttSubscription'
          type: array
          x-go-name: Subscriptions
      type: object
  MqttSessionList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/MqttSession'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            object_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  MqttSubscriptionList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/MqttSubscription'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            object_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  NewObjectSuccess:
    description: Success with id response
    schema:
      properties:
        id:
          format: int64
          type: integer
          x-go-name: Id
      type: object
  NodeList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/Node'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  NodeSearch:
    description: ""
    schema:
      properties:
        nodes:
          items:
            $ref: '#/definitions/Node'
          type: array
          x-go-name: Nodes
      type: object
  RoleList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/Role'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  RoleSearch:
    description: ""
    schema:
      properties:
        roles:
          items:
            $ref: '#/definitions/Role'
          type: array
          x-go-name: Roles
      type: object
  ScriptExec:
    description: ""
    schema:
      properties:
        result:
          type: string
          x-go-name: Result
      type: object
  ScriptList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/Script'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  ScriptSearch:
    description: ""
    schema:
      properties:
        scripts:
          items:
            $ref: '#/definitions/Script'
          type: array
          x-go-name: Scripts
      type: object
  Success:
    description: Success response
    schema:
      type: object
  TemplateItemList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/TemplateItem'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  TemplateItemSortedList:
    description: ""
    schema:
      properties:
        items:
          items:
            type: string
          type: array
          x-go-name: Items
        total:
          format: int64
          type: integer
          x-go-name: Total
      type: object
  TemplateList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/Template'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  TemplateSearch:
    description: ""
    schema:
      properties:
        templates:
          items:
            $ref: '#/definitions/Template'
          type: array
          x-go-name: Templates
      type: object
  UserList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/UserShot'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
  UserSearch:
    description: ""
    schema:
      properties:
        users:
          items:
            $ref: '#/definitions/UserShot'
          type: array
          x-go-name: Users
      type: object
  Zigbee2mqttDeviceSearch:
    description: ""
    schema:
      properties:
        devices:
          items:
            $ref: '#/definitions/Zigbee2mqttDeviceShort'
          type: array
          x-go-name: Zigbee2mqttDevices
      type: object
  Zigbee2mqttList:
    description: ""
    schema:
      properties:
        items:
          items:
            $ref: '#/definitions/Zigbee2mqttInfo'
          type: array
          x-go-name: Items
        meta:
          properties:
            limit:
              format: int64
              type: integer
              x-go-name: Limit
            objects_count:
              format: int64
              type: integer
              x-go-name: ObjectCount
            offset:
              format: int64
              type: integer
              x-go-name: Offset
          type: object
          x-go-name: Meta
      type: object
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
