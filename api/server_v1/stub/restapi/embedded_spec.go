// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Server API",
    "title": "Server API",
    "termsOfService": "https://e154.ru/",
    "contact": {
      "email": "filippov.a@e154.ru"
    },
    "version": "0.0.1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/": {
      "get": {
        "produces": [
          "text/html"
        ],
        "tags": [
          "index"
        ],
        "operationId": "index",
        "responses": {
          "200": {
            "description": "server api"
          },
          "default": {
            "description": "какая-то ошибка",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/node": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "summary": "get node list",
        "operationId": "getNodeList",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "type": "number",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "number",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sortby",
            "in": "query"
          },
          {
            "type": "string",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "$ref": "#/definitions/ResponseType"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "node": {
                      "$ref": "#/definitions/NodeModel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "summary": "add new node",
        "operationId": "addNode",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "description": "request params",
            "name": "postNodeParams",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NodeModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "$ref": "#/definitions/ResponseType"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "node id",
                      "type": "number",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/node/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "summary": "get node by id",
        "operationId": "getNodeById",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "type": "number",
            "description": "Node ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "$ref": "#/definitions/ResponseType"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "node": {
                      "$ref": "#/definitions/NodeModel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "summary": "delete node by id",
        "operationId": "deleteNodeById",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "type": "number",
            "description": "Node ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "$ref": "#/definitions/ResponseType"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorModel": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/ResponseType"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "description": "тип ишибки",
                "type": "string"
              },
              "field": {
                "description": "поле вызвавшее ошибку",
                "type": "string"
              },
              "message": {
                "description": "описание",
                "type": "string"
              }
            }
          }
        },
        "message": {
          "description": "описание ошибки",
          "type": "string"
        }
      }
    },
    "NodeModel": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "number",
          "format": "int64"
        },
        "ip": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "port": {
          "type": "number",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled"
          ]
        },
        "update_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResponseType": {
      "description": "Тип ответов",
      "type": "string",
      "enum": [
        "success",
        "business_conflict",
        "unprocessable_entity",
        "bad_parameters",
        "internal_error",
        "not_found",
        "security_error",
        "permission_error"
      ]
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "access_token",
      "in": "header"
    }
  }
}`))
}
