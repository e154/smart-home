// Code generated by go-swagger; DO NOT EDIT.

package index

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/e154/smart-home/api/server_v1/stub/models"
)

// IndexOKCode is the HTTP code returned for type IndexOK
const IndexOKCode int = 200

/*IndexOK server api

swagger:response indexOK
*/
type IndexOK struct {
}

// NewIndexOK creates IndexOK with default headers values
func NewIndexOK() *IndexOK {
	return &IndexOK{}
}

// WriteResponse to the client
func (o *IndexOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*IndexDefault какая-то ошибка

swagger:response indexDefault
*/
type IndexDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewIndexDefault creates IndexDefault with default headers values
func NewIndexDefault(code int) *IndexDefault {
	if code <= 0 {
		code = 500
	}

	return &IndexDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the index default response
func (o *IndexDefault) WithStatusCode(code int) *IndexDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the index default response
func (o *IndexDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the index default response
func (o *IndexDefault) WithPayload(payload *models.ErrorModel) *IndexDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the index default response
func (o *IndexDefault) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *IndexDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
