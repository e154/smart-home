// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/e154/smart-home/api/server_v1/stub/models"
)

// AddNodeOKCode is the HTTP code returned for type AddNodeOK
const AddNodeOKCode int = 200

/*AddNodeOK success

swagger:response addNodeOK
*/
type AddNodeOK struct {

	/*
	  In: Body
	*/
	Payload *models.AddNodeOKBody `json:"body,omitempty"`
}

// NewAddNodeOK creates AddNodeOK with default headers values
func NewAddNodeOK() *AddNodeOK {
	return &AddNodeOK{}
}

// WithPayload adds the payload to the add node o k response
func (o *AddNodeOK) WithPayload(payload *models.AddNodeOKBody) *AddNodeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add node o k response
func (o *AddNodeOK) SetPayload(payload *models.AddNodeOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddNodeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AddNodeDefault error

swagger:response addNodeDefault
*/
type AddNodeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewAddNodeDefault creates AddNodeDefault with default headers values
func NewAddNodeDefault(code int) *AddNodeDefault {
	if code <= 0 {
		code = 500
	}

	return &AddNodeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add node default response
func (o *AddNodeDefault) WithStatusCode(code int) *AddNodeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add node default response
func (o *AddNodeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add node default response
func (o *AddNodeDefault) WithPayload(payload *models.ErrorModel) *AddNodeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add node default response
func (o *AddNodeDefault) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddNodeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
