// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AreaServiceClient is the client API for AreaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AreaServiceClient interface {
	// add new area
	AddArea(ctx context.Context, in *NewAreaRequest, opts ...grpc.CallOption) (*Area, error)
	// update area
	UpdateArea(ctx context.Context, in *UpdateAreaRequest, opts ...grpc.CallOption) (*Area, error)
	// get area by id
	GetAreaById(ctx context.Context, in *GetAreaRequest, opts ...grpc.CallOption) (*Area, error)
	// get area list
	GetAreaList(ctx context.Context, in *GetAreaListRequest, opts ...grpc.CallOption) (*GetAreaListResult, error)
	// delete area
	DeleteArea(ctx context.Context, in *DeleteAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// search area
	SearchArea(ctx context.Context, in *SearchAreaRequest, opts ...grpc.CallOption) (*SearchAreaResult, error)
}

type areaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAreaServiceClient(cc grpc.ClientConnInterface) AreaServiceClient {
	return &areaServiceClient{cc}
}

func (c *areaServiceClient) AddArea(ctx context.Context, in *NewAreaRequest, opts ...grpc.CallOption) (*Area, error) {
	out := new(Area)
	err := c.cc.Invoke(ctx, "/api.AreaService/AddArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaServiceClient) UpdateArea(ctx context.Context, in *UpdateAreaRequest, opts ...grpc.CallOption) (*Area, error) {
	out := new(Area)
	err := c.cc.Invoke(ctx, "/api.AreaService/UpdateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaServiceClient) GetAreaById(ctx context.Context, in *GetAreaRequest, opts ...grpc.CallOption) (*Area, error) {
	out := new(Area)
	err := c.cc.Invoke(ctx, "/api.AreaService/GetAreaById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaServiceClient) GetAreaList(ctx context.Context, in *GetAreaListRequest, opts ...grpc.CallOption) (*GetAreaListResult, error) {
	out := new(GetAreaListResult)
	err := c.cc.Invoke(ctx, "/api.AreaService/GetAreaList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaServiceClient) DeleteArea(ctx context.Context, in *DeleteAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.AreaService/DeleteArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaServiceClient) SearchArea(ctx context.Context, in *SearchAreaRequest, opts ...grpc.CallOption) (*SearchAreaResult, error) {
	out := new(SearchAreaResult)
	err := c.cc.Invoke(ctx, "/api.AreaService/SearchArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaServiceServer is the server API for AreaService service.
// All implementations should embed UnimplementedAreaServiceServer
// for forward compatibility
type AreaServiceServer interface {
	// add new area
	AddArea(context.Context, *NewAreaRequest) (*Area, error)
	// update area
	UpdateArea(context.Context, *UpdateAreaRequest) (*Area, error)
	// get area by id
	GetAreaById(context.Context, *GetAreaRequest) (*Area, error)
	// get area list
	GetAreaList(context.Context, *GetAreaListRequest) (*GetAreaListResult, error)
	// delete area
	DeleteArea(context.Context, *DeleteAreaRequest) (*emptypb.Empty, error)
	// search area
	SearchArea(context.Context, *SearchAreaRequest) (*SearchAreaResult, error)
}

// UnimplementedAreaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAreaServiceServer struct {
}

func (UnimplementedAreaServiceServer) AddArea(context.Context, *NewAreaRequest) (*Area, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArea not implemented")
}
func (UnimplementedAreaServiceServer) UpdateArea(context.Context, *UpdateAreaRequest) (*Area, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArea not implemented")
}
func (UnimplementedAreaServiceServer) GetAreaById(context.Context, *GetAreaRequest) (*Area, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaById not implemented")
}
func (UnimplementedAreaServiceServer) GetAreaList(context.Context, *GetAreaListRequest) (*GetAreaListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaList not implemented")
}
func (UnimplementedAreaServiceServer) DeleteArea(context.Context, *DeleteAreaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArea not implemented")
}
func (UnimplementedAreaServiceServer) SearchArea(context.Context, *SearchAreaRequest) (*SearchAreaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArea not implemented")
}

// UnsafeAreaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AreaServiceServer will
// result in compilation errors.
type UnsafeAreaServiceServer interface {
	mustEmbedUnimplementedAreaServiceServer()
}

func RegisterAreaServiceServer(s grpc.ServiceRegistrar, srv AreaServiceServer) {
	s.RegisterService(&AreaService_ServiceDesc, srv)
}

func _AreaService_AddArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServiceServer).AddArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AreaService/AddArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServiceServer).AddArea(ctx, req.(*NewAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaService_UpdateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServiceServer).UpdateArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AreaService/UpdateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServiceServer).UpdateArea(ctx, req.(*UpdateAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaService_GetAreaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServiceServer).GetAreaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AreaService/GetAreaById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServiceServer).GetAreaById(ctx, req.(*GetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaService_GetAreaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAreaListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServiceServer).GetAreaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AreaService/GetAreaList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServiceServer).GetAreaList(ctx, req.(*GetAreaListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaService_DeleteArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServiceServer).DeleteArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AreaService/DeleteArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServiceServer).DeleteArea(ctx, req.(*DeleteAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaService_SearchArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServiceServer).SearchArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AreaService/SearchArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServiceServer).SearchArea(ctx, req.(*SearchAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AreaService_ServiceDesc is the grpc.ServiceDesc for AreaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AreaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AreaService",
	HandlerType: (*AreaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddArea",
			Handler:    _AreaService_AddArea_Handler,
		},
		{
			MethodName: "UpdateArea",
			Handler:    _AreaService_UpdateArea_Handler,
		},
		{
			MethodName: "GetAreaById",
			Handler:    _AreaService_GetAreaById_Handler,
		},
		{
			MethodName: "GetAreaList",
			Handler:    _AreaService_GetAreaList_Handler,
		},
		{
			MethodName: "DeleteArea",
			Handler:    _AreaService_DeleteArea_Handler,
		},
		{
			MethodName: "SearchArea",
			Handler:    _AreaService_SearchArea_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "area.proto",
}
