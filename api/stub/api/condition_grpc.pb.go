// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConditionServiceClient is the client API for ConditionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConditionServiceClient interface {
	// add new condition
	AddCondition(ctx context.Context, in *NewConditionRequest, opts ...grpc.CallOption) (*Condition, error)
	// update condition
	UpdateCondition(ctx context.Context, in *UpdateConditionRequest, opts ...grpc.CallOption) (*Condition, error)
	// get condition by id
	GetConditionById(ctx context.Context, in *GetConditionRequest, opts ...grpc.CallOption) (*Condition, error)
	// get condition list
	GetConditionList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetConditionListResult, error)
	// delete condition
	DeleteCondition(ctx context.Context, in *DeleteConditionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// search condition
	SearchCondition(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchConditionResult, error)
}

type conditionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConditionServiceClient(cc grpc.ClientConnInterface) ConditionServiceClient {
	return &conditionServiceClient{cc}
}

func (c *conditionServiceClient) AddCondition(ctx context.Context, in *NewConditionRequest, opts ...grpc.CallOption) (*Condition, error) {
	out := new(Condition)
	err := c.cc.Invoke(ctx, "/api.ConditionService/AddCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) UpdateCondition(ctx context.Context, in *UpdateConditionRequest, opts ...grpc.CallOption) (*Condition, error) {
	out := new(Condition)
	err := c.cc.Invoke(ctx, "/api.ConditionService/UpdateCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) GetConditionById(ctx context.Context, in *GetConditionRequest, opts ...grpc.CallOption) (*Condition, error) {
	out := new(Condition)
	err := c.cc.Invoke(ctx, "/api.ConditionService/GetConditionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) GetConditionList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetConditionListResult, error) {
	out := new(GetConditionListResult)
	err := c.cc.Invoke(ctx, "/api.ConditionService/GetConditionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) DeleteCondition(ctx context.Context, in *DeleteConditionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ConditionService/DeleteCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionServiceClient) SearchCondition(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchConditionResult, error) {
	out := new(SearchConditionResult)
	err := c.cc.Invoke(ctx, "/api.ConditionService/SearchCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConditionServiceServer is the server API for ConditionService service.
// All implementations should embed UnimplementedConditionServiceServer
// for forward compatibility
type ConditionServiceServer interface {
	// add new condition
	AddCondition(context.Context, *NewConditionRequest) (*Condition, error)
	// update condition
	UpdateCondition(context.Context, *UpdateConditionRequest) (*Condition, error)
	// get condition by id
	GetConditionById(context.Context, *GetConditionRequest) (*Condition, error)
	// get condition list
	GetConditionList(context.Context, *PaginationRequest) (*GetConditionListResult, error)
	// delete condition
	DeleteCondition(context.Context, *DeleteConditionRequest) (*emptypb.Empty, error)
	// search condition
	SearchCondition(context.Context, *SearchRequest) (*SearchConditionResult, error)
}

// UnimplementedConditionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConditionServiceServer struct {
}

func (UnimplementedConditionServiceServer) AddCondition(context.Context, *NewConditionRequest) (*Condition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCondition not implemented")
}
func (UnimplementedConditionServiceServer) UpdateCondition(context.Context, *UpdateConditionRequest) (*Condition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCondition not implemented")
}
func (UnimplementedConditionServiceServer) GetConditionById(context.Context, *GetConditionRequest) (*Condition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConditionById not implemented")
}
func (UnimplementedConditionServiceServer) GetConditionList(context.Context, *PaginationRequest) (*GetConditionListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConditionList not implemented")
}
func (UnimplementedConditionServiceServer) DeleteCondition(context.Context, *DeleteConditionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCondition not implemented")
}
func (UnimplementedConditionServiceServer) SearchCondition(context.Context, *SearchRequest) (*SearchConditionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCondition not implemented")
}

// UnsafeConditionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConditionServiceServer will
// result in compilation errors.
type UnsafeConditionServiceServer interface {
	mustEmbedUnimplementedConditionServiceServer()
}

func RegisterConditionServiceServer(s grpc.ServiceRegistrar, srv ConditionServiceServer) {
	s.RegisterService(&ConditionService_ServiceDesc, srv)
}

func _ConditionService_AddCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).AddCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConditionService/AddCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).AddCondition(ctx, req.(*NewConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_UpdateCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).UpdateCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConditionService/UpdateCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).UpdateCondition(ctx, req.(*UpdateConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_GetConditionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).GetConditionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConditionService/GetConditionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).GetConditionById(ctx, req.(*GetConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_GetConditionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).GetConditionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConditionService/GetConditionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).GetConditionList(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_DeleteCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).DeleteCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConditionService/DeleteCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).DeleteCondition(ctx, req.(*DeleteConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConditionService_SearchCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConditionServiceServer).SearchCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConditionService/SearchCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConditionServiceServer).SearchCondition(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConditionService_ServiceDesc is the grpc.ServiceDesc for ConditionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConditionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ConditionService",
	HandlerType: (*ConditionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCondition",
			Handler:    _ConditionService_AddCondition_Handler,
		},
		{
			MethodName: "UpdateCondition",
			Handler:    _ConditionService_UpdateCondition_Handler,
		},
		{
			MethodName: "GetConditionById",
			Handler:    _ConditionService_GetConditionById_Handler,
		},
		{
			MethodName: "GetConditionList",
			Handler:    _ConditionService_GetConditionList_Handler,
		},
		{
			MethodName: "DeleteCondition",
			Handler:    _ConditionService_DeleteCondition_Handler,
		},
		{
			MethodName: "SearchCondition",
			Handler:    _ConditionService_SearchCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "condition.proto",
}
