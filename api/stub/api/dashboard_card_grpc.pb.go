// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dashboard_card.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DashboardCardServiceClient is the client API for DashboardCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardCardServiceClient interface {
	// add new dashboard_card
	AddDashboardCard(ctx context.Context, in *NewDashboardCardRequest, opts ...grpc.CallOption) (*DashboardCard, error)
	// update dashboard_card
	UpdateDashboardCard(ctx context.Context, in *UpdateDashboardCardRequest, opts ...grpc.CallOption) (*DashboardCard, error)
	// get dashboard_card by id
	GetDashboardCardById(ctx context.Context, in *GetDashboardCardRequest, opts ...grpc.CallOption) (*DashboardCard, error)
	// get dashboard_card list
	GetDashboardCardList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetDashboardCardListResult, error)
	// delete dashboard_card
	DeleteDashboardCard(ctx context.Context, in *DeleteDashboardCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// import dashboard_card
	ImportDashboardCard(ctx context.Context, in *DashboardCard, opts ...grpc.CallOption) (*DashboardCard, error)
}

type dashboardCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardCardServiceClient(cc grpc.ClientConnInterface) DashboardCardServiceClient {
	return &dashboardCardServiceClient{cc}
}

func (c *dashboardCardServiceClient) AddDashboardCard(ctx context.Context, in *NewDashboardCardRequest, opts ...grpc.CallOption) (*DashboardCard, error) {
	out := new(DashboardCard)
	err := c.cc.Invoke(ctx, "/api.DashboardCardService/AddDashboardCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardCardServiceClient) UpdateDashboardCard(ctx context.Context, in *UpdateDashboardCardRequest, opts ...grpc.CallOption) (*DashboardCard, error) {
	out := new(DashboardCard)
	err := c.cc.Invoke(ctx, "/api.DashboardCardService/UpdateDashboardCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardCardServiceClient) GetDashboardCardById(ctx context.Context, in *GetDashboardCardRequest, opts ...grpc.CallOption) (*DashboardCard, error) {
	out := new(DashboardCard)
	err := c.cc.Invoke(ctx, "/api.DashboardCardService/GetDashboardCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardCardServiceClient) GetDashboardCardList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetDashboardCardListResult, error) {
	out := new(GetDashboardCardListResult)
	err := c.cc.Invoke(ctx, "/api.DashboardCardService/GetDashboardCardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardCardServiceClient) DeleteDashboardCard(ctx context.Context, in *DeleteDashboardCardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DashboardCardService/DeleteDashboardCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardCardServiceClient) ImportDashboardCard(ctx context.Context, in *DashboardCard, opts ...grpc.CallOption) (*DashboardCard, error) {
	out := new(DashboardCard)
	err := c.cc.Invoke(ctx, "/api.DashboardCardService/ImportDashboardCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardCardServiceServer is the server API for DashboardCardService service.
// All implementations should embed UnimplementedDashboardCardServiceServer
// for forward compatibility
type DashboardCardServiceServer interface {
	// add new dashboard_card
	AddDashboardCard(context.Context, *NewDashboardCardRequest) (*DashboardCard, error)
	// update dashboard_card
	UpdateDashboardCard(context.Context, *UpdateDashboardCardRequest) (*DashboardCard, error)
	// get dashboard_card by id
	GetDashboardCardById(context.Context, *GetDashboardCardRequest) (*DashboardCard, error)
	// get dashboard_card list
	GetDashboardCardList(context.Context, *PaginationRequest) (*GetDashboardCardListResult, error)
	// delete dashboard_card
	DeleteDashboardCard(context.Context, *DeleteDashboardCardRequest) (*emptypb.Empty, error)
	// import dashboard_card
	ImportDashboardCard(context.Context, *DashboardCard) (*DashboardCard, error)
}

// UnimplementedDashboardCardServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDashboardCardServiceServer struct {
}

func (UnimplementedDashboardCardServiceServer) AddDashboardCard(context.Context, *NewDashboardCardRequest) (*DashboardCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDashboardCard not implemented")
}
func (UnimplementedDashboardCardServiceServer) UpdateDashboardCard(context.Context, *UpdateDashboardCardRequest) (*DashboardCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardCard not implemented")
}
func (UnimplementedDashboardCardServiceServer) GetDashboardCardById(context.Context, *GetDashboardCardRequest) (*DashboardCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardCardById not implemented")
}
func (UnimplementedDashboardCardServiceServer) GetDashboardCardList(context.Context, *PaginationRequest) (*GetDashboardCardListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardCardList not implemented")
}
func (UnimplementedDashboardCardServiceServer) DeleteDashboardCard(context.Context, *DeleteDashboardCardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboardCard not implemented")
}
func (UnimplementedDashboardCardServiceServer) ImportDashboardCard(context.Context, *DashboardCard) (*DashboardCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDashboardCard not implemented")
}

// UnsafeDashboardCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardCardServiceServer will
// result in compilation errors.
type UnsafeDashboardCardServiceServer interface {
	mustEmbedUnimplementedDashboardCardServiceServer()
}

func RegisterDashboardCardServiceServer(s grpc.ServiceRegistrar, srv DashboardCardServiceServer) {
	s.RegisterService(&DashboardCardService_ServiceDesc, srv)
}

func _DashboardCardService_AddDashboardCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDashboardCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardServiceServer).AddDashboardCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardService/AddDashboardCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardServiceServer).AddDashboardCard(ctx, req.(*NewDashboardCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardCardService_UpdateDashboardCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardServiceServer).UpdateDashboardCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardService/UpdateDashboardCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardServiceServer).UpdateDashboardCard(ctx, req.(*UpdateDashboardCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardCardService_GetDashboardCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardServiceServer).GetDashboardCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardService/GetDashboardCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardServiceServer).GetDashboardCardById(ctx, req.(*GetDashboardCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardCardService_GetDashboardCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardServiceServer).GetDashboardCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardService/GetDashboardCardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardServiceServer).GetDashboardCardList(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardCardService_DeleteDashboardCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDashboardCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardServiceServer).DeleteDashboardCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardService/DeleteDashboardCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardServiceServer).DeleteDashboardCard(ctx, req.(*DeleteDashboardCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardCardService_ImportDashboardCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardServiceServer).ImportDashboardCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardService/ImportDashboardCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardServiceServer).ImportDashboardCard(ctx, req.(*DashboardCard))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardCardService_ServiceDesc is the grpc.ServiceDesc for DashboardCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DashboardCardService",
	HandlerType: (*DashboardCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDashboardCard",
			Handler:    _DashboardCardService_AddDashboardCard_Handler,
		},
		{
			MethodName: "UpdateDashboardCard",
			Handler:    _DashboardCardService_UpdateDashboardCard_Handler,
		},
		{
			MethodName: "GetDashboardCardById",
			Handler:    _DashboardCardService_GetDashboardCardById_Handler,
		},
		{
			MethodName: "GetDashboardCardList",
			Handler:    _DashboardCardService_GetDashboardCardList_Handler,
		},
		{
			MethodName: "DeleteDashboardCard",
			Handler:    _DashboardCardService_DeleteDashboardCard_Handler,
		},
		{
			MethodName: "ImportDashboardCard",
			Handler:    _DashboardCardService_ImportDashboardCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard_card.proto",
}
