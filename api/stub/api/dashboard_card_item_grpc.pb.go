// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dashboard_card_item.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DashboardCardItemServiceClient is the client API for DashboardCardItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardCardItemServiceClient interface {
	// add new dashboard_card
	AddDashboardCardItem(ctx context.Context, in *NewDashboardCardItemRequest, opts ...grpc.CallOption) (*DashboardCardItem, error)
	// update dashboard_card_item
	UpdateDashboardCardItem(ctx context.Context, in *UpdateDashboardCardItemRequest, opts ...grpc.CallOption) (*DashboardCardItem, error)
	// get dashboard_card_item by id
	GetDashboardCardItemById(ctx context.Context, in *GetDashboardCardItemRequest, opts ...grpc.CallOption) (*DashboardCardItem, error)
	// get dashboard_card_item list
	GetDashboardCardItemList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetDashboardCardItemListResult, error)
	// delete dashboard_card_item
	DeleteDashboardCardItem(ctx context.Context, in *DeleteDashboardCardItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dashboardCardItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardCardItemServiceClient(cc grpc.ClientConnInterface) DashboardCardItemServiceClient {
	return &dashboardCardItemServiceClient{cc}
}

func (c *dashboardCardItemServiceClient) AddDashboardCardItem(ctx context.Context, in *NewDashboardCardItemRequest, opts ...grpc.CallOption) (*DashboardCardItem, error) {
	out := new(DashboardCardItem)
	err := c.cc.Invoke(ctx, "/api.DashboardCardItemService/AddDashboardCardItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardCardItemServiceClient) UpdateDashboardCardItem(ctx context.Context, in *UpdateDashboardCardItemRequest, opts ...grpc.CallOption) (*DashboardCardItem, error) {
	out := new(DashboardCardItem)
	err := c.cc.Invoke(ctx, "/api.DashboardCardItemService/UpdateDashboardCardItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardCardItemServiceClient) GetDashboardCardItemById(ctx context.Context, in *GetDashboardCardItemRequest, opts ...grpc.CallOption) (*DashboardCardItem, error) {
	out := new(DashboardCardItem)
	err := c.cc.Invoke(ctx, "/api.DashboardCardItemService/GetDashboardCardItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardCardItemServiceClient) GetDashboardCardItemList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetDashboardCardItemListResult, error) {
	out := new(GetDashboardCardItemListResult)
	err := c.cc.Invoke(ctx, "/api.DashboardCardItemService/GetDashboardCardItemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardCardItemServiceClient) DeleteDashboardCardItem(ctx context.Context, in *DeleteDashboardCardItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DashboardCardItemService/DeleteDashboardCardItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardCardItemServiceServer is the server API for DashboardCardItemService service.
// All implementations should embed UnimplementedDashboardCardItemServiceServer
// for forward compatibility
type DashboardCardItemServiceServer interface {
	// add new dashboard_card
	AddDashboardCardItem(context.Context, *NewDashboardCardItemRequest) (*DashboardCardItem, error)
	// update dashboard_card_item
	UpdateDashboardCardItem(context.Context, *UpdateDashboardCardItemRequest) (*DashboardCardItem, error)
	// get dashboard_card_item by id
	GetDashboardCardItemById(context.Context, *GetDashboardCardItemRequest) (*DashboardCardItem, error)
	// get dashboard_card_item list
	GetDashboardCardItemList(context.Context, *PaginationRequest) (*GetDashboardCardItemListResult, error)
	// delete dashboard_card_item
	DeleteDashboardCardItem(context.Context, *DeleteDashboardCardItemRequest) (*emptypb.Empty, error)
}

// UnimplementedDashboardCardItemServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDashboardCardItemServiceServer struct {
}

func (UnimplementedDashboardCardItemServiceServer) AddDashboardCardItem(context.Context, *NewDashboardCardItemRequest) (*DashboardCardItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDashboardCardItem not implemented")
}
func (UnimplementedDashboardCardItemServiceServer) UpdateDashboardCardItem(context.Context, *UpdateDashboardCardItemRequest) (*DashboardCardItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardCardItem not implemented")
}
func (UnimplementedDashboardCardItemServiceServer) GetDashboardCardItemById(context.Context, *GetDashboardCardItemRequest) (*DashboardCardItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardCardItemById not implemented")
}
func (UnimplementedDashboardCardItemServiceServer) GetDashboardCardItemList(context.Context, *PaginationRequest) (*GetDashboardCardItemListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardCardItemList not implemented")
}
func (UnimplementedDashboardCardItemServiceServer) DeleteDashboardCardItem(context.Context, *DeleteDashboardCardItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboardCardItem not implemented")
}

// UnsafeDashboardCardItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardCardItemServiceServer will
// result in compilation errors.
type UnsafeDashboardCardItemServiceServer interface {
	mustEmbedUnimplementedDashboardCardItemServiceServer()
}

func RegisterDashboardCardItemServiceServer(s grpc.ServiceRegistrar, srv DashboardCardItemServiceServer) {
	s.RegisterService(&DashboardCardItemService_ServiceDesc, srv)
}

func _DashboardCardItemService_AddDashboardCardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDashboardCardItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardItemServiceServer).AddDashboardCardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardItemService/AddDashboardCardItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardItemServiceServer).AddDashboardCardItem(ctx, req.(*NewDashboardCardItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardCardItemService_UpdateDashboardCardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardCardItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardItemServiceServer).UpdateDashboardCardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardItemService/UpdateDashboardCardItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardItemServiceServer).UpdateDashboardCardItem(ctx, req.(*UpdateDashboardCardItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardCardItemService_GetDashboardCardItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardCardItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardItemServiceServer).GetDashboardCardItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardItemService/GetDashboardCardItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardItemServiceServer).GetDashboardCardItemById(ctx, req.(*GetDashboardCardItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardCardItemService_GetDashboardCardItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardItemServiceServer).GetDashboardCardItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardItemService/GetDashboardCardItemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardItemServiceServer).GetDashboardCardItemList(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardCardItemService_DeleteDashboardCardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDashboardCardItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardCardItemServiceServer).DeleteDashboardCardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardCardItemService/DeleteDashboardCardItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardCardItemServiceServer).DeleteDashboardCardItem(ctx, req.(*DeleteDashboardCardItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardCardItemService_ServiceDesc is the grpc.ServiceDesc for DashboardCardItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardCardItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DashboardCardItemService",
	HandlerType: (*DashboardCardItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDashboardCardItem",
			Handler:    _DashboardCardItemService_AddDashboardCardItem_Handler,
		},
		{
			MethodName: "UpdateDashboardCardItem",
			Handler:    _DashboardCardItemService_UpdateDashboardCardItem_Handler,
		},
		{
			MethodName: "GetDashboardCardItemById",
			Handler:    _DashboardCardItemService_GetDashboardCardItemById_Handler,
		},
		{
			MethodName: "GetDashboardCardItemList",
			Handler:    _DashboardCardItemService_GetDashboardCardItemList_Handler,
		},
		{
			MethodName: "DeleteDashboardCardItem",
			Handler:    _DashboardCardItemService_DeleteDashboardCardItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard_card_item.proto",
}
