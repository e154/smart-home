// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DashboardTabServiceClient is the client API for DashboardTabService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardTabServiceClient interface {
	// add new dashboard_tab
	AddDashboardTab(ctx context.Context, in *NewDashboardTabRequest, opts ...grpc.CallOption) (*DashboardTab, error)
	// update dashboard
	UpdateDashboardTab(ctx context.Context, in *UpdateDashboardTabRequest, opts ...grpc.CallOption) (*DashboardTab, error)
	// get dashboard_tab by id
	GetDashboardTabById(ctx context.Context, in *GetDashboardTabRequest, opts ...grpc.CallOption) (*DashboardTab, error)
	// get dashboard_tab list
	GetDashboardTabList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetDashboardTabListResult, error)
	// delete dashboard_tab
	DeleteDashboardTab(ctx context.Context, in *DeleteDashboardTabRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dashboardTabServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardTabServiceClient(cc grpc.ClientConnInterface) DashboardTabServiceClient {
	return &dashboardTabServiceClient{cc}
}

func (c *dashboardTabServiceClient) AddDashboardTab(ctx context.Context, in *NewDashboardTabRequest, opts ...grpc.CallOption) (*DashboardTab, error) {
	out := new(DashboardTab)
	err := c.cc.Invoke(ctx, "/api.DashboardTabService/AddDashboardTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTabServiceClient) UpdateDashboardTab(ctx context.Context, in *UpdateDashboardTabRequest, opts ...grpc.CallOption) (*DashboardTab, error) {
	out := new(DashboardTab)
	err := c.cc.Invoke(ctx, "/api.DashboardTabService/UpdateDashboardTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTabServiceClient) GetDashboardTabById(ctx context.Context, in *GetDashboardTabRequest, opts ...grpc.CallOption) (*DashboardTab, error) {
	out := new(DashboardTab)
	err := c.cc.Invoke(ctx, "/api.DashboardTabService/GetDashboardTabById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTabServiceClient) GetDashboardTabList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetDashboardTabListResult, error) {
	out := new(GetDashboardTabListResult)
	err := c.cc.Invoke(ctx, "/api.DashboardTabService/GetDashboardTabList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardTabServiceClient) DeleteDashboardTab(ctx context.Context, in *DeleteDashboardTabRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DashboardTabService/DeleteDashboardTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardTabServiceServer is the server API for DashboardTabService service.
// All implementations should embed UnimplementedDashboardTabServiceServer
// for forward compatibility
type DashboardTabServiceServer interface {
	// add new dashboard_tab
	AddDashboardTab(context.Context, *NewDashboardTabRequest) (*DashboardTab, error)
	// update dashboard
	UpdateDashboardTab(context.Context, *UpdateDashboardTabRequest) (*DashboardTab, error)
	// get dashboard_tab by id
	GetDashboardTabById(context.Context, *GetDashboardTabRequest) (*DashboardTab, error)
	// get dashboard_tab list
	GetDashboardTabList(context.Context, *PaginationRequest) (*GetDashboardTabListResult, error)
	// delete dashboard_tab
	DeleteDashboardTab(context.Context, *DeleteDashboardTabRequest) (*emptypb.Empty, error)
}

// UnimplementedDashboardTabServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDashboardTabServiceServer struct {
}

func (UnimplementedDashboardTabServiceServer) AddDashboardTab(context.Context, *NewDashboardTabRequest) (*DashboardTab, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDashboardTab not implemented")
}
func (UnimplementedDashboardTabServiceServer) UpdateDashboardTab(context.Context, *UpdateDashboardTabRequest) (*DashboardTab, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboardTab not implemented")
}
func (UnimplementedDashboardTabServiceServer) GetDashboardTabById(context.Context, *GetDashboardTabRequest) (*DashboardTab, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardTabById not implemented")
}
func (UnimplementedDashboardTabServiceServer) GetDashboardTabList(context.Context, *PaginationRequest) (*GetDashboardTabListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardTabList not implemented")
}
func (UnimplementedDashboardTabServiceServer) DeleteDashboardTab(context.Context, *DeleteDashboardTabRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboardTab not implemented")
}

// UnsafeDashboardTabServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardTabServiceServer will
// result in compilation errors.
type UnsafeDashboardTabServiceServer interface {
	mustEmbedUnimplementedDashboardTabServiceServer()
}

func RegisterDashboardTabServiceServer(s grpc.ServiceRegistrar, srv DashboardTabServiceServer) {
	s.RegisterService(&DashboardTabService_ServiceDesc, srv)
}

func _DashboardTabService_AddDashboardTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDashboardTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTabServiceServer).AddDashboardTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardTabService/AddDashboardTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTabServiceServer).AddDashboardTab(ctx, req.(*NewDashboardTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTabService_UpdateDashboardTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTabServiceServer).UpdateDashboardTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardTabService/UpdateDashboardTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTabServiceServer).UpdateDashboardTab(ctx, req.(*UpdateDashboardTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTabService_GetDashboardTabById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTabServiceServer).GetDashboardTabById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardTabService/GetDashboardTabById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTabServiceServer).GetDashboardTabById(ctx, req.(*GetDashboardTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTabService_GetDashboardTabList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTabServiceServer).GetDashboardTabList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardTabService/GetDashboardTabList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTabServiceServer).GetDashboardTabList(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardTabService_DeleteDashboardTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDashboardTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardTabServiceServer).DeleteDashboardTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DashboardTabService/DeleteDashboardTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardTabServiceServer).DeleteDashboardTab(ctx, req.(*DeleteDashboardTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardTabService_ServiceDesc is the grpc.ServiceDesc for DashboardTabService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardTabService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DashboardTabService",
	HandlerType: (*DashboardTabServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDashboardTab",
			Handler:    _DashboardTabService_AddDashboardTab_Handler,
		},
		{
			MethodName: "UpdateDashboardTab",
			Handler:    _DashboardTabService_UpdateDashboardTab_Handler,
		},
		{
			MethodName: "GetDashboardTabById",
			Handler:    _DashboardTabService_GetDashboardTabById_Handler,
		},
		{
			MethodName: "GetDashboardTabList",
			Handler:    _DashboardTabService_GetDashboardTabList_Handler,
		},
		{
			MethodName: "DeleteDashboardTab",
			Handler:    _DashboardTabService_DeleteDashboardTab_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard_tab.proto",
}
