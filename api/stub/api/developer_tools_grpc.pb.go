// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: developer_tools.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeveloperToolsServiceClient is the client API for DeveloperToolsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeveloperToolsServiceClient interface {
	// entity set state
	EntitySetState(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// reload entity
	ReloadEntity(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// task call trigger
	TaskCallTrigger(ctx context.Context, in *AutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// task call action
	TaskCallAction(ctx context.Context, in *AutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type developerToolsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeveloperToolsServiceClient(cc grpc.ClientConnInterface) DeveloperToolsServiceClient {
	return &developerToolsServiceClient{cc}
}

func (c *developerToolsServiceClient) EntitySetState(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DeveloperToolsService/EntitySetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerToolsServiceClient) ReloadEntity(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DeveloperToolsService/ReloadEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerToolsServiceClient) TaskCallTrigger(ctx context.Context, in *AutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DeveloperToolsService/TaskCallTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerToolsServiceClient) TaskCallAction(ctx context.Context, in *AutomationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.DeveloperToolsService/TaskCallAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeveloperToolsServiceServer is the server API for DeveloperToolsService service.
// All implementations should embed UnimplementedDeveloperToolsServiceServer
// for forward compatibility
type DeveloperToolsServiceServer interface {
	// entity set state
	EntitySetState(context.Context, *EntityRequest) (*emptypb.Empty, error)
	// reload entity
	ReloadEntity(context.Context, *ReloadRequest) (*emptypb.Empty, error)
	// task call trigger
	TaskCallTrigger(context.Context, *AutomationRequest) (*emptypb.Empty, error)
	// task call action
	TaskCallAction(context.Context, *AutomationRequest) (*emptypb.Empty, error)
}

// UnimplementedDeveloperToolsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeveloperToolsServiceServer struct {
}

func (UnimplementedDeveloperToolsServiceServer) EntitySetState(context.Context, *EntityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntitySetState not implemented")
}
func (UnimplementedDeveloperToolsServiceServer) ReloadEntity(context.Context, *ReloadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadEntity not implemented")
}
func (UnimplementedDeveloperToolsServiceServer) TaskCallTrigger(context.Context, *AutomationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCallTrigger not implemented")
}
func (UnimplementedDeveloperToolsServiceServer) TaskCallAction(context.Context, *AutomationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCallAction not implemented")
}

// UnsafeDeveloperToolsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeveloperToolsServiceServer will
// result in compilation errors.
type UnsafeDeveloperToolsServiceServer interface {
	mustEmbedUnimplementedDeveloperToolsServiceServer()
}

func RegisterDeveloperToolsServiceServer(s grpc.ServiceRegistrar, srv DeveloperToolsServiceServer) {
	s.RegisterService(&DeveloperToolsService_ServiceDesc, srv)
}

func _DeveloperToolsService_EntitySetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperToolsServiceServer).EntitySetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeveloperToolsService/EntitySetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperToolsServiceServer).EntitySetState(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperToolsService_ReloadEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperToolsServiceServer).ReloadEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeveloperToolsService/ReloadEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperToolsServiceServer).ReloadEntity(ctx, req.(*ReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperToolsService_TaskCallTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperToolsServiceServer).TaskCallTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeveloperToolsService/TaskCallTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperToolsServiceServer).TaskCallTrigger(ctx, req.(*AutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperToolsService_TaskCallAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperToolsServiceServer).TaskCallAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeveloperToolsService/TaskCallAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperToolsServiceServer).TaskCallAction(ctx, req.(*AutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeveloperToolsService_ServiceDesc is the grpc.ServiceDesc for DeveloperToolsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeveloperToolsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DeveloperToolsService",
	HandlerType: (*DeveloperToolsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EntitySetState",
			Handler:    _DeveloperToolsService_EntitySetState_Handler,
		},
		{
			MethodName: "ReloadEntity",
			Handler:    _DeveloperToolsService_ReloadEntity_Handler,
		},
		{
			MethodName: "TaskCallTrigger",
			Handler:    _DeveloperToolsService_TaskCallTrigger_Handler,
		},
		{
			MethodName: "TaskCallAction",
			Handler:    _DeveloperToolsService_TaskCallAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "developer_tools.proto",
}
