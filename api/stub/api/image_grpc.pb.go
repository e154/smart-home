// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: image.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	// add new image
	AddImage(ctx context.Context, in *NewImageRequest, opts ...grpc.CallOption) (*Image, error)
	// get image by id
	GetImageById(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*Image, error)
	// update image
	UpdateImageById(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*Image, error)
	// get image list
	GetImageList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetImageListResult, error)
	// delete image by id
	DeleteImageById(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// upload image
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*Image, error)
	// get image list by date
	GetImageListByDate(ctx context.Context, in *GetImageListByDateRequest, opts ...grpc.CallOption) (*GetImageListByDateResult, error)
	// get image filter list
	GetImageFilterList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetImageFilterListResult, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) AddImage(ctx context.Context, in *NewImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImageService/AddImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetImageById(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImageService/GetImageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) UpdateImageById(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImageService/UpdateImageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetImageList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetImageListResult, error) {
	out := new(GetImageListResult)
	err := c.cc.Invoke(ctx, "/api.ImageService/GetImageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) DeleteImageById(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ImageService/DeleteImageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.ImageService/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetImageListByDate(ctx context.Context, in *GetImageListByDateRequest, opts ...grpc.CallOption) (*GetImageListByDateResult, error) {
	out := new(GetImageListByDateResult)
	err := c.cc.Invoke(ctx, "/api.ImageService/GetImageListByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetImageFilterList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetImageFilterListResult, error) {
	out := new(GetImageFilterListResult)
	err := c.cc.Invoke(ctx, "/api.ImageService/GetImageFilterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations should embed UnimplementedImageServiceServer
// for forward compatibility
type ImageServiceServer interface {
	// add new image
	AddImage(context.Context, *NewImageRequest) (*Image, error)
	// get image by id
	GetImageById(context.Context, *GetImageRequest) (*Image, error)
	// update image
	UpdateImageById(context.Context, *UpdateImageRequest) (*Image, error)
	// get image list
	GetImageList(context.Context, *PaginationRequest) (*GetImageListResult, error)
	// delete image by id
	DeleteImageById(context.Context, *DeleteImageRequest) (*emptypb.Empty, error)
	// upload image
	UploadImage(context.Context, *UploadImageRequest) (*Image, error)
	// get image list by date
	GetImageListByDate(context.Context, *GetImageListByDateRequest) (*GetImageListByDateResult, error)
	// get image filter list
	GetImageFilterList(context.Context, *emptypb.Empty) (*GetImageFilterListResult, error)
}

// UnimplementedImageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (UnimplementedImageServiceServer) AddImage(context.Context, *NewImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImage not implemented")
}
func (UnimplementedImageServiceServer) GetImageById(context.Context, *GetImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageById not implemented")
}
func (UnimplementedImageServiceServer) UpdateImageById(context.Context, *UpdateImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageById not implemented")
}
func (UnimplementedImageServiceServer) GetImageList(context.Context, *PaginationRequest) (*GetImageListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageList not implemented")
}
func (UnimplementedImageServiceServer) DeleteImageById(context.Context, *DeleteImageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImageById not implemented")
}
func (UnimplementedImageServiceServer) UploadImage(context.Context, *UploadImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageServiceServer) GetImageListByDate(context.Context, *GetImageListByDateRequest) (*GetImageListByDateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageListByDate not implemented")
}
func (UnimplementedImageServiceServer) GetImageFilterList(context.Context, *emptypb.Empty) (*GetImageFilterListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageFilterList not implemented")
}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_AddImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).AddImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImageService/AddImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).AddImage(ctx, req.(*NewImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetImageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetImageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImageService/GetImageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetImageById(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_UpdateImageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).UpdateImageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImageService/UpdateImageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).UpdateImageById(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImageService/GetImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetImageList(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_DeleteImageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).DeleteImageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImageService/DeleteImageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).DeleteImageById(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImageService/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetImageListByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageListByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetImageListByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImageService/GetImageListByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetImageListByDate(ctx, req.(*GetImageListByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetImageFilterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetImageFilterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ImageService/GetImageFilterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetImageFilterList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddImage",
			Handler:    _ImageService_AddImage_Handler,
		},
		{
			MethodName: "GetImageById",
			Handler:    _ImageService_GetImageById_Handler,
		},
		{
			MethodName: "UpdateImageById",
			Handler:    _ImageService_UpdateImageById_Handler,
		},
		{
			MethodName: "GetImageList",
			Handler:    _ImageService_GetImageList_Handler,
		},
		{
			MethodName: "DeleteImageById",
			Handler:    _ImageService_DeleteImageById_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _ImageService_UploadImage_Handler,
		},
		{
			MethodName: "GetImageListByDate",
			Handler:    _ImageService_GetImageListByDate_Handler,
		},
		{
			MethodName: "GetImageFilterList",
			Handler:    _ImageService_GetImageFilterList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image.proto",
}
