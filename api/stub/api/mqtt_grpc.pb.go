// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MqttServiceClient is the client API for MqttService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqttServiceClient interface {
	// get mqtt by id
	GetClientById(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error)
	// get mqtt list
	GetClientList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetClientListResult, error)
}

type mqttServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMqttServiceClient(cc grpc.ClientConnInterface) MqttServiceClient {
	return &mqttServiceClient{cc}
}

func (c *mqttServiceClient) GetClientById(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/api.MqttService/GetClientById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqttServiceClient) GetClientList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetClientListResult, error) {
	out := new(GetClientListResult)
	err := c.cc.Invoke(ctx, "/api.MqttService/GetClientList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqttServiceServer is the server API for MqttService service.
// All implementations should embed UnimplementedMqttServiceServer
// for forward compatibility
type MqttServiceServer interface {
	// get mqtt by id
	GetClientById(context.Context, *GetClientRequest) (*Client, error)
	// get mqtt list
	GetClientList(context.Context, *PaginationRequest) (*GetClientListResult, error)
}

// UnimplementedMqttServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMqttServiceServer struct {
}

func (UnimplementedMqttServiceServer) GetClientById(context.Context, *GetClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientById not implemented")
}
func (UnimplementedMqttServiceServer) GetClientList(context.Context, *PaginationRequest) (*GetClientListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientList not implemented")
}

// UnsafeMqttServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqttServiceServer will
// result in compilation errors.
type UnsafeMqttServiceServer interface {
	mustEmbedUnimplementedMqttServiceServer()
}

func RegisterMqttServiceServer(s grpc.ServiceRegistrar, srv MqttServiceServer) {
	s.RegisterService(&MqttService_ServiceDesc, srv)
}

func _MqttService_GetClientById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqttServiceServer).GetClientById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MqttService/GetClientById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqttServiceServer).GetClientById(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqttService_GetClientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqttServiceServer).GetClientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MqttService/GetClientList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqttServiceServer).GetClientList(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MqttService_ServiceDesc is the grpc.ServiceDesc for MqttService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MqttService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MqttService",
	HandlerType: (*MqttServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientById",
			Handler:    _MqttService_GetClientById_Handler,
		},
		{
			MethodName: "GetClientList",
			Handler:    _MqttService_GetClientList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mqtt.proto",
}
