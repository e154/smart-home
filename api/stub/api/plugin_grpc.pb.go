// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	// get plugin list
	GetPluginList(ctx context.Context, in *GetPluginListRequest, opts ...grpc.CallOption) (*GetPluginListResult, error)
	// enable plugin
	EnablePlugin(ctx context.Context, in *EnablePluginRequest, opts ...grpc.CallOption) (*EnablePluginResult, error)
	// disable plugin
	DisablePlugin(ctx context.Context, in *DisablePluginRequest, opts ...grpc.CallOption) (*DisablePluginResult, error)
	// get plugin options
	GetPluginOptions(ctx context.Context, in *GetPluginOptionsRequest, opts ...grpc.CallOption) (*GetPluginOptionsResult, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) GetPluginList(ctx context.Context, in *GetPluginListRequest, opts ...grpc.CallOption) (*GetPluginListResult, error) {
	out := new(GetPluginListResult)
	err := c.cc.Invoke(ctx, "/api.PluginService/GetPluginList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) EnablePlugin(ctx context.Context, in *EnablePluginRequest, opts ...grpc.CallOption) (*EnablePluginResult, error) {
	out := new(EnablePluginResult)
	err := c.cc.Invoke(ctx, "/api.PluginService/EnablePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) DisablePlugin(ctx context.Context, in *DisablePluginRequest, opts ...grpc.CallOption) (*DisablePluginResult, error) {
	out := new(DisablePluginResult)
	err := c.cc.Invoke(ctx, "/api.PluginService/DisablePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetPluginOptions(ctx context.Context, in *GetPluginOptionsRequest, opts ...grpc.CallOption) (*GetPluginOptionsResult, error) {
	out := new(GetPluginOptionsResult)
	err := c.cc.Invoke(ctx, "/api.PluginService/GetPluginOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations should embed UnimplementedPluginServiceServer
// for forward compatibility
type PluginServiceServer interface {
	// get plugin list
	GetPluginList(context.Context, *GetPluginListRequest) (*GetPluginListResult, error)
	// enable plugin
	EnablePlugin(context.Context, *EnablePluginRequest) (*EnablePluginResult, error)
	// disable plugin
	DisablePlugin(context.Context, *DisablePluginRequest) (*DisablePluginResult, error)
	// get plugin options
	GetPluginOptions(context.Context, *GetPluginOptionsRequest) (*GetPluginOptionsResult, error)
}

// UnimplementedPluginServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) GetPluginList(context.Context, *GetPluginListRequest) (*GetPluginListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginList not implemented")
}
func (UnimplementedPluginServiceServer) EnablePlugin(context.Context, *EnablePluginRequest) (*EnablePluginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePlugin not implemented")
}
func (UnimplementedPluginServiceServer) DisablePlugin(context.Context, *DisablePluginRequest) (*DisablePluginResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePlugin not implemented")
}
func (UnimplementedPluginServiceServer) GetPluginOptions(context.Context, *GetPluginOptionsRequest) (*GetPluginOptionsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginOptions not implemented")
}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_GetPluginList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetPluginList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PluginService/GetPluginList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetPluginList(ctx, req.(*GetPluginListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_EnablePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).EnablePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PluginService/EnablePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).EnablePlugin(ctx, req.(*EnablePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_DisablePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).DisablePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PluginService/DisablePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).DisablePlugin(ctx, req.(*DisablePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetPluginOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetPluginOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PluginService/GetPluginOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetPluginOptions(ctx, req.(*GetPluginOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPluginList",
			Handler:    _PluginService_GetPluginList_Handler,
		},
		{
			MethodName: "EnablePlugin",
			Handler:    _PluginService_EnablePlugin_Handler,
		},
		{
			MethodName: "DisablePlugin",
			Handler:    _PluginService_DisablePlugin_Handler,
		},
		{
			MethodName: "GetPluginOptions",
			Handler:    _PluginService_GetPluginOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
