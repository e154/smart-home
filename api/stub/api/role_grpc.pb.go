// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	// add new role
	AddRole(ctx context.Context, in *NewRoleRequest, opts ...grpc.CallOption) (*Role, error)
	// get role by name
	GetRoleByName(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error)
	// get role access list
	GetRoleAccessList(ctx context.Context, in *GetRoleAccessListRequest, opts ...grpc.CallOption) (*RoleAccessListResult, error)
	// update role access list
	UpdateRoleAccessList(ctx context.Context, in *UpdateRoleAccessListRequest, opts ...grpc.CallOption) (*RoleAccessListResult, error)
	// update role
	UpdateRoleByName(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	// get role list
	GetRoleList(ctx context.Context, in *GetRoleListRequest, opts ...grpc.CallOption) (*GetRoleListResult, error)
	// delete role by name
	SearchRoleByName(ctx context.Context, in *SearchRoleRequest, opts ...grpc.CallOption) (*SearchRoleListResult, error)
	// delete role by name
	DeleteRoleByName(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) AddRole(ctx context.Context, in *NewRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/api.RoleService/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRoleByName(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/api.RoleService/GetRoleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRoleAccessList(ctx context.Context, in *GetRoleAccessListRequest, opts ...grpc.CallOption) (*RoleAccessListResult, error) {
	out := new(RoleAccessListResult)
	err := c.cc.Invoke(ctx, "/api.RoleService/GetRoleAccessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRoleAccessList(ctx context.Context, in *UpdateRoleAccessListRequest, opts ...grpc.CallOption) (*RoleAccessListResult, error) {
	out := new(RoleAccessListResult)
	err := c.cc.Invoke(ctx, "/api.RoleService/UpdateRoleAccessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRoleByName(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/api.RoleService/UpdateRoleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRoleList(ctx context.Context, in *GetRoleListRequest, opts ...grpc.CallOption) (*GetRoleListResult, error) {
	out := new(GetRoleListResult)
	err := c.cc.Invoke(ctx, "/api.RoleService/GetRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) SearchRoleByName(ctx context.Context, in *SearchRoleRequest, opts ...grpc.CallOption) (*SearchRoleListResult, error) {
	out := new(SearchRoleListResult)
	err := c.cc.Invoke(ctx, "/api.RoleService/SearchRoleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRoleByName(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.RoleService/DeleteRoleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations should embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	// add new role
	AddRole(context.Context, *NewRoleRequest) (*Role, error)
	// get role by name
	GetRoleByName(context.Context, *GetRoleRequest) (*Role, error)
	// get role access list
	GetRoleAccessList(context.Context, *GetRoleAccessListRequest) (*RoleAccessListResult, error)
	// update role access list
	UpdateRoleAccessList(context.Context, *UpdateRoleAccessListRequest) (*RoleAccessListResult, error)
	// update role
	UpdateRoleByName(context.Context, *UpdateRoleRequest) (*Role, error)
	// get role list
	GetRoleList(context.Context, *GetRoleListRequest) (*GetRoleListResult, error)
	// delete role by name
	SearchRoleByName(context.Context, *SearchRoleRequest) (*SearchRoleListResult, error)
	// delete role by name
	DeleteRoleByName(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
}

// UnimplementedRoleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) AddRole(context.Context, *NewRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedRoleServiceServer) GetRoleByName(context.Context, *GetRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByName not implemented")
}
func (UnimplementedRoleServiceServer) GetRoleAccessList(context.Context, *GetRoleAccessListRequest) (*RoleAccessListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleAccessList not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRoleAccessList(context.Context, *UpdateRoleAccessListRequest) (*RoleAccessListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleAccessList not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRoleByName(context.Context, *UpdateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleByName not implemented")
}
func (UnimplementedRoleServiceServer) GetRoleList(context.Context, *GetRoleListRequest) (*GetRoleListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedRoleServiceServer) SearchRoleByName(context.Context, *SearchRoleRequest) (*SearchRoleListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRoleByName not implemented")
}
func (UnimplementedRoleServiceServer) DeleteRoleByName(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleByName not implemented")
}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleService/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AddRole(ctx, req.(*NewRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleService/GetRoleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoleByName(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRoleAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleAccessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoleAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleService/GetRoleAccessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoleAccessList(ctx, req.(*GetRoleAccessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRoleAccessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleAccessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRoleAccessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleService/UpdateRoleAccessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRoleAccessList(ctx, req.(*UpdateRoleAccessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleService/UpdateRoleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRoleByName(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleService/GetRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoleList(ctx, req.(*GetRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_SearchRoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).SearchRoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleService/SearchRoleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).SearchRoleByName(ctx, req.(*SearchRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RoleService/DeleteRoleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRoleByName(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRole",
			Handler:    _RoleService_AddRole_Handler,
		},
		{
			MethodName: "GetRoleByName",
			Handler:    _RoleService_GetRoleByName_Handler,
		},
		{
			MethodName: "GetRoleAccessList",
			Handler:    _RoleService_GetRoleAccessList_Handler,
		},
		{
			MethodName: "UpdateRoleAccessList",
			Handler:    _RoleService_UpdateRoleAccessList_Handler,
		},
		{
			MethodName: "UpdateRoleByName",
			Handler:    _RoleService_UpdateRoleByName_Handler,
		},
		{
			MethodName: "GetRoleList",
			Handler:    _RoleService_GetRoleList_Handler,
		},
		{
			MethodName: "SearchRoleByName",
			Handler:    _RoleService_SearchRoleByName_Handler,
		},
		{
			MethodName: "DeleteRoleByName",
			Handler:    _RoleService_DeleteRoleByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}
