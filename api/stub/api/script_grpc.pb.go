// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScriptServiceClient is the client API for ScriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScriptServiceClient interface {
	// add new script
	AddScript(ctx context.Context, in *NewScriptRequest, opts ...grpc.CallOption) (*Script, error)
	// get script by id
	GetScriptById(ctx context.Context, in *GetScriptRequest, opts ...grpc.CallOption) (*Script, error)
	// update script
	UpdateScriptById(ctx context.Context, in *UpdateScriptRequest, opts ...grpc.CallOption) (*Script, error)
	// get script list
	GetScriptList(ctx context.Context, in *GetScriptListRequest, opts ...grpc.CallOption) (*GetScriptListResult, error)
	// delete script by id
	SearchScript(ctx context.Context, in *SearchScriptRequest, opts ...grpc.CallOption) (*SearchScriptListResult, error)
	// delete script by id
	DeleteScriptById(ctx context.Context, in *DeleteScriptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// exec script by id
	ExecScriptById(ctx context.Context, in *ExecScriptRequest, opts ...grpc.CallOption) (*ExecScriptResult, error)
	// exec src script by id
	ExecSrcScriptById(ctx context.Context, in *ExecSrcScriptRequest, opts ...grpc.CallOption) (*ExecScriptResult, error)
	// copy script by id
	CopyScriptById(ctx context.Context, in *CopyScriptRequest, opts ...grpc.CallOption) (*Script, error)
}

type scriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScriptServiceClient(cc grpc.ClientConnInterface) ScriptServiceClient {
	return &scriptServiceClient{cc}
}

func (c *scriptServiceClient) AddScript(ctx context.Context, in *NewScriptRequest, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/api.ScriptService/AddScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) GetScriptById(ctx context.Context, in *GetScriptRequest, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/api.ScriptService/GetScriptById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) UpdateScriptById(ctx context.Context, in *UpdateScriptRequest, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/api.ScriptService/UpdateScriptById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) GetScriptList(ctx context.Context, in *GetScriptListRequest, opts ...grpc.CallOption) (*GetScriptListResult, error) {
	out := new(GetScriptListResult)
	err := c.cc.Invoke(ctx, "/api.ScriptService/GetScriptList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) SearchScript(ctx context.Context, in *SearchScriptRequest, opts ...grpc.CallOption) (*SearchScriptListResult, error) {
	out := new(SearchScriptListResult)
	err := c.cc.Invoke(ctx, "/api.ScriptService/SearchScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) DeleteScriptById(ctx context.Context, in *DeleteScriptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ScriptService/DeleteScriptById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) ExecScriptById(ctx context.Context, in *ExecScriptRequest, opts ...grpc.CallOption) (*ExecScriptResult, error) {
	out := new(ExecScriptResult)
	err := c.cc.Invoke(ctx, "/api.ScriptService/ExecScriptById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) ExecSrcScriptById(ctx context.Context, in *ExecSrcScriptRequest, opts ...grpc.CallOption) (*ExecScriptResult, error) {
	out := new(ExecScriptResult)
	err := c.cc.Invoke(ctx, "/api.ScriptService/ExecSrcScriptById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptServiceClient) CopyScriptById(ctx context.Context, in *CopyScriptRequest, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/api.ScriptService/CopyScriptById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScriptServiceServer is the server API for ScriptService service.
// All implementations should embed UnimplementedScriptServiceServer
// for forward compatibility
type ScriptServiceServer interface {
	// add new script
	AddScript(context.Context, *NewScriptRequest) (*Script, error)
	// get script by id
	GetScriptById(context.Context, *GetScriptRequest) (*Script, error)
	// update script
	UpdateScriptById(context.Context, *UpdateScriptRequest) (*Script, error)
	// get script list
	GetScriptList(context.Context, *GetScriptListRequest) (*GetScriptListResult, error)
	// delete script by id
	SearchScript(context.Context, *SearchScriptRequest) (*SearchScriptListResult, error)
	// delete script by id
	DeleteScriptById(context.Context, *DeleteScriptRequest) (*emptypb.Empty, error)
	// exec script by id
	ExecScriptById(context.Context, *ExecScriptRequest) (*ExecScriptResult, error)
	// exec src script by id
	ExecSrcScriptById(context.Context, *ExecSrcScriptRequest) (*ExecScriptResult, error)
	// copy script by id
	CopyScriptById(context.Context, *CopyScriptRequest) (*Script, error)
}

// UnimplementedScriptServiceServer should be embedded to have forward compatible implementations.
type UnimplementedScriptServiceServer struct {
}

func (UnimplementedScriptServiceServer) AddScript(context.Context, *NewScriptRequest) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScript not implemented")
}
func (UnimplementedScriptServiceServer) GetScriptById(context.Context, *GetScriptRequest) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptById not implemented")
}
func (UnimplementedScriptServiceServer) UpdateScriptById(context.Context, *UpdateScriptRequest) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScriptById not implemented")
}
func (UnimplementedScriptServiceServer) GetScriptList(context.Context, *GetScriptListRequest) (*GetScriptListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScriptList not implemented")
}
func (UnimplementedScriptServiceServer) SearchScript(context.Context, *SearchScriptRequest) (*SearchScriptListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchScript not implemented")
}
func (UnimplementedScriptServiceServer) DeleteScriptById(context.Context, *DeleteScriptRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScriptById not implemented")
}
func (UnimplementedScriptServiceServer) ExecScriptById(context.Context, *ExecScriptRequest) (*ExecScriptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecScriptById not implemented")
}
func (UnimplementedScriptServiceServer) ExecSrcScriptById(context.Context, *ExecSrcScriptRequest) (*ExecScriptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecSrcScriptById not implemented")
}
func (UnimplementedScriptServiceServer) CopyScriptById(context.Context, *CopyScriptRequest) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyScriptById not implemented")
}

// UnsafeScriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScriptServiceServer will
// result in compilation errors.
type UnsafeScriptServiceServer interface {
	mustEmbedUnimplementedScriptServiceServer()
}

func RegisterScriptServiceServer(s grpc.ServiceRegistrar, srv ScriptServiceServer) {
	s.RegisterService(&ScriptService_ServiceDesc, srv)
}

func _ScriptService_AddScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).AddScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScriptService/AddScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).AddScript(ctx, req.(*NewScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_GetScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).GetScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScriptService/GetScriptById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).GetScriptById(ctx, req.(*GetScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_UpdateScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).UpdateScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScriptService/UpdateScriptById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).UpdateScriptById(ctx, req.(*UpdateScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_GetScriptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).GetScriptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScriptService/GetScriptList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).GetScriptList(ctx, req.(*GetScriptListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_SearchScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).SearchScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScriptService/SearchScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).SearchScript(ctx, req.(*SearchScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_DeleteScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).DeleteScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScriptService/DeleteScriptById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).DeleteScriptById(ctx, req.(*DeleteScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_ExecScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).ExecScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScriptService/ExecScriptById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).ExecScriptById(ctx, req.(*ExecScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_ExecSrcScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecSrcScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).ExecSrcScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScriptService/ExecSrcScriptById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).ExecSrcScriptById(ctx, req.(*ExecSrcScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptService_CopyScriptById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptServiceServer).CopyScriptById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScriptService/CopyScriptById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptServiceServer).CopyScriptById(ctx, req.(*CopyScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScriptService_ServiceDesc is the grpc.ServiceDesc for ScriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ScriptService",
	HandlerType: (*ScriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddScript",
			Handler:    _ScriptService_AddScript_Handler,
		},
		{
			MethodName: "GetScriptById",
			Handler:    _ScriptService_GetScriptById_Handler,
		},
		{
			MethodName: "UpdateScriptById",
			Handler:    _ScriptService_UpdateScriptById_Handler,
		},
		{
			MethodName: "GetScriptList",
			Handler:    _ScriptService_GetScriptList_Handler,
		},
		{
			MethodName: "SearchScript",
			Handler:    _ScriptService_SearchScript_Handler,
		},
		{
			MethodName: "DeleteScriptById",
			Handler:    _ScriptService_DeleteScriptById_Handler,
		},
		{
			MethodName: "ExecScriptById",
			Handler:    _ScriptService_ExecScriptById_Handler,
		},
		{
			MethodName: "ExecSrcScriptById",
			Handler:    _ScriptService_ExecSrcScriptById_Handler,
		},
		{
			MethodName: "CopyScriptById",
			Handler:    _ScriptService_CopyScriptById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "script.proto",
}
