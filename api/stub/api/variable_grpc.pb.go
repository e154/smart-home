// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VariableServiceClient is the client API for VariableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VariableServiceClient interface {
	// add new variable
	AddVariable(ctx context.Context, in *NewVariableRequest, opts ...grpc.CallOption) (*Variable, error)
	// update variable
	UpdateVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*Variable, error)
	// get variable by name
	GetVariableByName(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*Variable, error)
	// get variable list
	GetVariableList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetVariableListResult, error)
	// delete variable
	DeleteVariable(ctx context.Context, in *DeleteVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type variableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVariableServiceClient(cc grpc.ClientConnInterface) VariableServiceClient {
	return &variableServiceClient{cc}
}

func (c *variableServiceClient) AddVariable(ctx context.Context, in *NewVariableRequest, opts ...grpc.CallOption) (*Variable, error) {
	out := new(Variable)
	err := c.cc.Invoke(ctx, "/api.VariableService/AddVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableServiceClient) UpdateVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*Variable, error) {
	out := new(Variable)
	err := c.cc.Invoke(ctx, "/api.VariableService/UpdateVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableServiceClient) GetVariableByName(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*Variable, error) {
	out := new(Variable)
	err := c.cc.Invoke(ctx, "/api.VariableService/GetVariableByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableServiceClient) GetVariableList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetVariableListResult, error) {
	out := new(GetVariableListResult)
	err := c.cc.Invoke(ctx, "/api.VariableService/GetVariableList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variableServiceClient) DeleteVariable(ctx context.Context, in *DeleteVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.VariableService/DeleteVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VariableServiceServer is the server API for VariableService service.
// All implementations should embed UnimplementedVariableServiceServer
// for forward compatibility
type VariableServiceServer interface {
	// add new variable
	AddVariable(context.Context, *NewVariableRequest) (*Variable, error)
	// update variable
	UpdateVariable(context.Context, *UpdateVariableRequest) (*Variable, error)
	// get variable by name
	GetVariableByName(context.Context, *GetVariableRequest) (*Variable, error)
	// get variable list
	GetVariableList(context.Context, *PaginationRequest) (*GetVariableListResult, error)
	// delete variable
	DeleteVariable(context.Context, *DeleteVariableRequest) (*emptypb.Empty, error)
}

// UnimplementedVariableServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVariableServiceServer struct {
}

func (UnimplementedVariableServiceServer) AddVariable(context.Context, *NewVariableRequest) (*Variable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVariable not implemented")
}
func (UnimplementedVariableServiceServer) UpdateVariable(context.Context, *UpdateVariableRequest) (*Variable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariable not implemented")
}
func (UnimplementedVariableServiceServer) GetVariableByName(context.Context, *GetVariableRequest) (*Variable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariableByName not implemented")
}
func (UnimplementedVariableServiceServer) GetVariableList(context.Context, *PaginationRequest) (*GetVariableListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariableList not implemented")
}
func (UnimplementedVariableServiceServer) DeleteVariable(context.Context, *DeleteVariableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariable not implemented")
}

// UnsafeVariableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VariableServiceServer will
// result in compilation errors.
type UnsafeVariableServiceServer interface {
	mustEmbedUnimplementedVariableServiceServer()
}

func RegisterVariableServiceServer(s grpc.ServiceRegistrar, srv VariableServiceServer) {
	s.RegisterService(&VariableService_ServiceDesc, srv)
}

func _VariableService_AddVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServiceServer).AddVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VariableService/AddVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServiceServer).AddVariable(ctx, req.(*NewVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariableService_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServiceServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VariableService/UpdateVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServiceServer).UpdateVariable(ctx, req.(*UpdateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariableService_GetVariableByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServiceServer).GetVariableByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VariableService/GetVariableByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServiceServer).GetVariableByName(ctx, req.(*GetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariableService_GetVariableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServiceServer).GetVariableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VariableService/GetVariableList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServiceServer).GetVariableList(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VariableService_DeleteVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariableServiceServer).DeleteVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VariableService/DeleteVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariableServiceServer).DeleteVariable(ctx, req.(*DeleteVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VariableService_ServiceDesc is the grpc.ServiceDesc for VariableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VariableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.VariableService",
	HandlerType: (*VariableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVariable",
			Handler:    _VariableService_AddVariable_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _VariableService_UpdateVariable_Handler,
		},
		{
			MethodName: "GetVariableByName",
			Handler:    _VariableService_GetVariableByName_Handler,
		},
		{
			MethodName: "GetVariableList",
			Handler:    _VariableService_GetVariableList_Handler,
		},
		{
			MethodName: "DeleteVariable",
			Handler:    _VariableService_DeleteVariable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "variable.proto",
}
