// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Zigbee2MqttServiceClient is the client API for Zigbee2MqttService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Zigbee2MqttServiceClient interface {
	// add new bridge
	AddZigbee2MqttBridge(ctx context.Context, in *NewZigbee2MqttRequest, opts ...grpc.CallOption) (*Zigbee2Mqtt, error)
	// get bridge
	GetZigbee2MqttBridge(ctx context.Context, in *GetBridgeRequest, opts ...grpc.CallOption) (*Zigbee2Mqtt, error)
	// update bridge by id
	UpdateBridgeById(ctx context.Context, in *UpdateBridgeRequest, opts ...grpc.CallOption) (*Zigbee2Mqtt, error)
	// get bridge list
	GetBridgeList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetBridgeListResult, error)
	// delete bridge by id
	DeleteBridgeById(ctx context.Context, in *DeleteBridgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// reset bridge by id
	ResetBridgeById(ctx context.Context, in *ResetBridgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// device ban
	DeviceBan(ctx context.Context, in *DeviceBanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// device whitelist
	DeviceWhitelist(ctx context.Context, in *DeviceWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// device rename
	DeviceRename(ctx context.Context, in *DeviceRenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// search device
	SearchDevice(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchDeviceResult, error)
	// list device
	DeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*DeviceListResult, error)
	// networkmap
	Networkmap(ctx context.Context, in *NetworkmapRequest, opts ...grpc.CallOption) (*NetworkmapResponse, error)
	// update networkmap
	UpdateNetworkmap(ctx context.Context, in *NetworkmapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type zigbee2MqttServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZigbee2MqttServiceClient(cc grpc.ClientConnInterface) Zigbee2MqttServiceClient {
	return &zigbee2MqttServiceClient{cc}
}

func (c *zigbee2MqttServiceClient) AddZigbee2MqttBridge(ctx context.Context, in *NewZigbee2MqttRequest, opts ...grpc.CallOption) (*Zigbee2Mqtt, error) {
	out := new(Zigbee2Mqtt)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/AddZigbee2mqttBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) GetZigbee2MqttBridge(ctx context.Context, in *GetBridgeRequest, opts ...grpc.CallOption) (*Zigbee2Mqtt, error) {
	out := new(Zigbee2Mqtt)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/GetZigbee2mqttBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) UpdateBridgeById(ctx context.Context, in *UpdateBridgeRequest, opts ...grpc.CallOption) (*Zigbee2Mqtt, error) {
	out := new(Zigbee2Mqtt)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/UpdateBridgeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) GetBridgeList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetBridgeListResult, error) {
	out := new(GetBridgeListResult)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/GetBridgeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) DeleteBridgeById(ctx context.Context, in *DeleteBridgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/DeleteBridgeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) ResetBridgeById(ctx context.Context, in *ResetBridgeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/ResetBridgeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) DeviceBan(ctx context.Context, in *DeviceBanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/DeviceBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) DeviceWhitelist(ctx context.Context, in *DeviceWhitelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/DeviceWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) DeviceRename(ctx context.Context, in *DeviceRenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/DeviceRename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) SearchDevice(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchDeviceResult, error) {
	out := new(SearchDeviceResult)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/SearchDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) DeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*DeviceListResult, error) {
	out := new(DeviceListResult)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/DeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) Networkmap(ctx context.Context, in *NetworkmapRequest, opts ...grpc.CallOption) (*NetworkmapResponse, error) {
	out := new(NetworkmapResponse)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/Networkmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbee2MqttServiceClient) UpdateNetworkmap(ctx context.Context, in *NetworkmapRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Zigbee2mqttService/UpdateNetworkmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Zigbee2MqttServiceServer is the server API for Zigbee2MqttService service.
// All implementations should embed UnimplementedZigbee2MqttServiceServer
// for forward compatibility
type Zigbee2MqttServiceServer interface {
	// add new bridge
	AddZigbee2MqttBridge(context.Context, *NewZigbee2MqttRequest) (*Zigbee2Mqtt, error)
	// get bridge
	GetZigbee2MqttBridge(context.Context, *GetBridgeRequest) (*Zigbee2Mqtt, error)
	// update bridge by id
	UpdateBridgeById(context.Context, *UpdateBridgeRequest) (*Zigbee2Mqtt, error)
	// get bridge list
	GetBridgeList(context.Context, *PaginationRequest) (*GetBridgeListResult, error)
	// delete bridge by id
	DeleteBridgeById(context.Context, *DeleteBridgeRequest) (*emptypb.Empty, error)
	// reset bridge by id
	ResetBridgeById(context.Context, *ResetBridgeRequest) (*emptypb.Empty, error)
	// device ban
	DeviceBan(context.Context, *DeviceBanRequest) (*emptypb.Empty, error)
	// device whitelist
	DeviceWhitelist(context.Context, *DeviceWhitelistRequest) (*emptypb.Empty, error)
	// device rename
	DeviceRename(context.Context, *DeviceRenameRequest) (*emptypb.Empty, error)
	// search device
	SearchDevice(context.Context, *SearchRequest) (*SearchDeviceResult, error)
	// list device
	DeviceList(context.Context, *DeviceListRequest) (*DeviceListResult, error)
	// networkmap
	Networkmap(context.Context, *NetworkmapRequest) (*NetworkmapResponse, error)
	// update networkmap
	UpdateNetworkmap(context.Context, *NetworkmapRequest) (*emptypb.Empty, error)
}

// UnimplementedZigbee2MqttServiceServer should be embedded to have forward compatible implementations.
type UnimplementedZigbee2MqttServiceServer struct {
}

func (UnimplementedZigbee2MqttServiceServer) AddZigbee2MqttBridge(context.Context, *NewZigbee2MqttRequest) (*Zigbee2Mqtt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddZigbee2MqttBridge not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) GetZigbee2MqttBridge(context.Context, *GetBridgeRequest) (*Zigbee2Mqtt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZigbee2MqttBridge not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) UpdateBridgeById(context.Context, *UpdateBridgeRequest) (*Zigbee2Mqtt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBridgeById not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) GetBridgeList(context.Context, *PaginationRequest) (*GetBridgeListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgeList not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) DeleteBridgeById(context.Context, *DeleteBridgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBridgeById not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) ResetBridgeById(context.Context, *ResetBridgeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBridgeById not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) DeviceBan(context.Context, *DeviceBanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceBan not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) DeviceWhitelist(context.Context, *DeviceWhitelistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceWhitelist not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) DeviceRename(context.Context, *DeviceRenameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceRename not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) SearchDevice(context.Context, *SearchRequest) (*SearchDeviceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDevice not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) DeviceList(context.Context, *DeviceListRequest) (*DeviceListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceList not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) Networkmap(context.Context, *NetworkmapRequest) (*NetworkmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Networkmap not implemented")
}
func (UnimplementedZigbee2MqttServiceServer) UpdateNetworkmap(context.Context, *NetworkmapRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkmap not implemented")
}

// UnsafeZigbee2MqttServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Zigbee2MqttServiceServer will
// result in compilation errors.
type UnsafeZigbee2MqttServiceServer interface {
	mustEmbedUnimplementedZigbee2MqttServiceServer()
}

func RegisterZigbee2MqttServiceServer(s grpc.ServiceRegistrar, srv Zigbee2MqttServiceServer) {
	s.RegisterService(&Zigbee2MqttService_ServiceDesc, srv)
}

func _Zigbee2MqttService_AddZigbee2MqttBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewZigbee2MqttRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).AddZigbee2MqttBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/AddZigbee2mqttBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).AddZigbee2MqttBridge(ctx, req.(*NewZigbee2MqttRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_GetZigbee2MqttBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).GetZigbee2MqttBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/GetZigbee2mqttBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).GetZigbee2MqttBridge(ctx, req.(*GetBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_UpdateBridgeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).UpdateBridgeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/UpdateBridgeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).UpdateBridgeById(ctx, req.(*UpdateBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_GetBridgeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).GetBridgeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/GetBridgeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).GetBridgeList(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_DeleteBridgeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).DeleteBridgeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/DeleteBridgeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).DeleteBridgeById(ctx, req.(*DeleteBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_ResetBridgeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).ResetBridgeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/ResetBridgeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).ResetBridgeById(ctx, req.(*ResetBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_DeviceBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).DeviceBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/DeviceBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).DeviceBan(ctx, req.(*DeviceBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_DeviceWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).DeviceWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/DeviceWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).DeviceWhitelist(ctx, req.(*DeviceWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_DeviceRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).DeviceRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/DeviceRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).DeviceRename(ctx, req.(*DeviceRenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_SearchDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).SearchDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/SearchDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).SearchDevice(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_DeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).DeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/DeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).DeviceList(ctx, req.(*DeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_Networkmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).Networkmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/Networkmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).Networkmap(ctx, req.(*NetworkmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zigbee2MqttService_UpdateNetworkmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Zigbee2MqttServiceServer).UpdateNetworkmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Zigbee2mqttService/UpdateNetworkmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Zigbee2MqttServiceServer).UpdateNetworkmap(ctx, req.(*NetworkmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Zigbee2MqttService_ServiceDesc is the grpc.ServiceDesc for Zigbee2MqttService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zigbee2MqttService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Zigbee2mqttService",
	HandlerType: (*Zigbee2MqttServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddZigbee2mqttBridge",
			Handler:    _Zigbee2MqttService_AddZigbee2MqttBridge_Handler,
		},
		{
			MethodName: "GetZigbee2mqttBridge",
			Handler:    _Zigbee2MqttService_GetZigbee2MqttBridge_Handler,
		},
		{
			MethodName: "UpdateBridgeById",
			Handler:    _Zigbee2MqttService_UpdateBridgeById_Handler,
		},
		{
			MethodName: "GetBridgeList",
			Handler:    _Zigbee2MqttService_GetBridgeList_Handler,
		},
		{
			MethodName: "DeleteBridgeById",
			Handler:    _Zigbee2MqttService_DeleteBridgeById_Handler,
		},
		{
			MethodName: "ResetBridgeById",
			Handler:    _Zigbee2MqttService_ResetBridgeById_Handler,
		},
		{
			MethodName: "DeviceBan",
			Handler:    _Zigbee2MqttService_DeviceBan_Handler,
		},
		{
			MethodName: "DeviceWhitelist",
			Handler:    _Zigbee2MqttService_DeviceWhitelist_Handler,
		},
		{
			MethodName: "DeviceRename",
			Handler:    _Zigbee2MqttService_DeviceRename_Handler,
		},
		{
			MethodName: "SearchDevice",
			Handler:    _Zigbee2MqttService_SearchDevice_Handler,
		},
		{
			MethodName: "DeviceList",
			Handler:    _Zigbee2MqttService_DeviceList_Handler,
		},
		{
			MethodName: "Networkmap",
			Handler:    _Zigbee2MqttService_Networkmap_Handler,
		},
		{
			MethodName: "UpdateNetworkmap",
			Handler:    _Zigbee2MqttService_UpdateNetworkmap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zigbee2mqtt.proto",
}
