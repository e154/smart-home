<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Smart home</title>
    <link>https://e154.github.io/smart-home/en/</link>
    <description>Recent content on Smart home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    
	<atom:link href="https://e154.github.io/smart-home/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>overview</title>
      <link>https://e154.github.io/smart-home/en/javascript/_overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/javascript/_overview/</guid>
      <description>Обзор API SmartHome. Объекты и функции, методы, свойства объектов, используемых для управления устройствами &amp;ldquo;умного дома&amp;rdquo;
Методы Объект IC - глобальный объект, содержащий в себе все функции и константы API SmartHome.
пример скрипта
# Контекст применения: # action (действие) # # Описание: # Проверка состояния устройства. (частное) # Не имеет зависимостей, и ни чего не передает наружу # Должен вызываться в рамках воркера, или действия устройства, # иначе выдаст ошибку, так как контекст выполнения накладывает # некоторые ограничения fetchStatus =(node, dev)-&amp;gt; # номер комманнды # 3 - проверка состояния # 4 - выполнить комманду FUNCTION = 3 # получим адрес устройства из контекста запуска DEVICE_ADDR = dev.</description>
    </item>
    
    <item>
      <title>overview</title>
      <link>https://e154.github.io/smart-home/en/getting-started/_overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/getting-started/_overview/</guid>
      <description>Обзор Программный комплекс Умный дом начал своё развитие с не большого домашнего проекта осенью 2016 года. Основные принципы лежащие в основе разрабатываемой системы - простота настройки и содержания, дешевизна и доступность компонентной базы.
С помощью программного комплекса Умный дом Вы сможете управлять множеством устройствами на базе AVR микроконтроллеров и не только. Распределённая сеть устройств на основе програмного комплекса Умный дом не имеег географических границ и позволяет управлять устройствами в любой точке сети интернет через систему узлов - микросервисов.</description>
    </item>
    
    <item>
      <title>overview</title>
      <link>https://e154.github.io/smart-home/en/getting-started/_requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/getting-started/_requirements/</guid>
      <description>Системные требования Поддерживаемые операционные системы:
 macOS 386 10.6 macOS amd64 10.6 linux 386 linux amd64 linux arm-5 linux arm-6 linux arm-7 linux arm-64 linux mips64 linux mips64le windows 386 windows amd64  Сервера Orange Pi Средние и крупные инсталляции:  Коттедж, Таунхаус Офис (более пяти контроллеров на этаж), Гостиница    Raspberry Pi Средние и крупные инсталляции:  Коттедж, Таунхаус Офис (более пяти контроллеров на этаж), Гостиница     Для работы серверов не требуется запуск графической оболочки  Загрузка Готовые архиве содержат все исполняемые фйлы под все поддерживаемые архитектуры и операционные системы.</description>
    </item>
    
    <item>
      <title>workflow</title>
      <link>https://e154.github.io/smart-home/en/javascript/_workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/javascript/_workflow/</guid>
      <description>IC.Workflow() Получить текущий Workflow. Выражение может вырнуть null если скрипт исполняется вне контекста Workflow
Синтаксис
workflow = IC.Workflow()  На выходе
   Значение Описание     workflow type: Object, ссылка на экземпляр *Workflow    Доступные методы приведены далее:
.getName() Получить наименование текущего Workflow
Синтаксис
wf = IC.Workflow() if wf name = wf.getName() print &#39;wf name&#39;, name  .getDescription() Получить описание текущего Workflow
wf = IC.</description>
    </item>
    
    <item>
      <title>quick install</title>
      <link>https://e154.github.io/smart-home/en/getting-started/_quick_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/getting-started/_quick_install/</guid>
      <description>Быстрая установка  Подразумевается что у это первая установка в систему Установка будет проходить в автоматическом режиме Директория установки /opt/smart-home После установки потребуется настроить подключение к серверу баз данных mysql  Установка сервера
curl -sSL http://e154.github.io/smart-home/server-installer.sh | bash /dev/stdin --install  Установка конфигуратор
curl -sSL http://e154.github.io/smart-home/configurator-installer.sh | bash /dev/stdin --install  Установка узла связи
curl -sSL http://e154.github.io/smart-home/node-installer.sh | bash /dev/stdin --install  Нвстройка сервера баз данных mysql
mysql -u root -p CREATE DATABASE smarthome; CREATE USER &#39;smarthome&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;smarthome&#39;; GRANT ALL PRIVILEGES ON smarthome .</description>
    </item>
    
    <item>
      <title>flow</title>
      <link>https://e154.github.io/smart-home/en/javascript/_flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/javascript/_flow/</guid>
      <description>IC.Flow() Получить текущий процесс. Может вырнуть null если скрипт запускается вне контекста Workflow
flow = IC.Flow() return if !flow  На выходе
   Значение Описание     flow type: Object, ссылка на экземпляр *Flow    Доступные методы приведены далее:
.getName() Получить наименование текущего Flow процесса.
flow = IC.Flow() if flow name = flow.getName() print &#39;flow name&#39;, name  На выходе
   Значение Описание     name type: string    .</description>
    </item>
    
    <item>
      <title>log</title>
      <link>https://e154.github.io/smart-home/en/javascript/_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/javascript/_map/</guid>
      <description>IC.Map* Возвращает объект карты
map = IC.Map  Доступные методы приведены далее:
.SetElementState(element, state) IC.Map.SetElementState(device, state)  На входе
   Значение Описание     element type: Object, ссылка на объект карты   state type: string, системное наименование состояния    .GetElement(device) element = IC.Map.GetElement(device)  На входе
   Значение Описание     device type: Object, ссылка на объект Device{}    На выходе</description>
    </item>
    
    <item>
      <title>overview</title>
      <link>https://e154.github.io/smart-home/en/getting-started/_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/getting-started/_install/</guid>
      <description>Установка Будет произведена базовая установка системы Умный дом на сервер под операционной системой linux Debian. С не значительными изменениями установка будет подобна для других операционных систем.
План действий:
 Создание директорий Скачивание и распаковка Настройка сервера Настройка конфигуратора Настройка ноды База mysql     Информация о системе на которой производилось развёртывание:
delta54@darkstar:tmp$ uname -a Linux darkstar 3.16.0-4-amd64 #1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux  delta54@darkstar:tmp$ cat /etc/*release* PRETTY_NAME=&amp;quot;Debian GNU/Linux 8 (jessie)&amp;quot;  Создание директорий Рекомендуемая директория установки сервера /opt/smart-home, в неё и будет производиться дальнейшая установка.</description>
    </item>
    
    <item>
      <title>log</title>
      <link>https://e154.github.io/smart-home/en/javascript/_log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/javascript/_log/</guid>
      <description> IC.Log Логирование состояния.
log = IC.Log  На выходе
   Значение Описание     log type: Object, ссылка на экземпляр *Log    Доступные методы приведены далее:
.info() IC.Log.info(&#39;Info message&#39;)  .warn() IC.Log.warn(&#39;Warning message&#39;)  .error() IC.Log.error(&#39;Error message&#39;)  .debug() IC.Log.debug(&#39;Debug message&#39;)  </description>
    </item>
    
    <item>
      <title>etc</title>
      <link>https://e154.github.io/smart-home/en/javascript/_etc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/javascript/_etc/</guid>
      <description>IC.CurrentNode() Получить текущую ноду. Выражение может вырнуть null если скрипт исполняется вне контекста Workflow
node = IC.CurrentNode() print &#39;current node&#39;, node  На выходе
   Значение Описание     node type: Object, ссылка на экземпляр Node    IC.CurrentDevice() Получить текущее утройство. Выражение может вырнуть null если скрипт исполняется вне контекста Workflow
device = IC.CurrentDevice() print &#39;current device&#39;, device  На выходе
   Значение Описание     device type: Object, ссылка на экземпляр Device    IC.</description>
    </item>
    
    <item>
      <title>overview</title>
      <link>https://e154.github.io/smart-home/en/getting-started/_update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/getting-started/_update/</guid>
      <description>Обновление Обновление системных компонентов заключается в полной замене всех исполняемых файлов, и возмножно частичной коррекции конфигурационных файлов.
Правило замены справедливо для следующих компонентов:
 Сервер Конфигуратор Нода  Обновление базы mysql База поддерживает версионирование, перед обновление структуры нужно создать резервную копию
./opt/smart-home/server/examples/scripts/backup.sh Starting backup to 19-02-2017-22-06-30-dump.sql...  Скрипт создаст копию действующей базы в /opt/smart-home/backup
Запуск обновления базы:
cd /opt/smart-home/server/ ./server-linux-amd64 migrate 2017/02/19 01:59:37 GOPATH: /home/delta54/workspace/golang/src/github.com/e154/smart-home/migrate.go 81 /home/delta54/workspace/golang 2017/02/19 01:59:37 Using &#39;mysql&#39; as &#39;driver&#39; 2017/02/19 01:59:37 Using &#39;smarthome:smarthome@tcp(127.</description>
    </item>
    
    <item>
      <title>objects</title>
      <link>https://e154.github.io/smart-home/en/javascript/_objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/javascript/_objects/</guid>
      <description> Список объектов Device{}    Свойство Описание     getName type: method, именование устройства   getDescription type: method, описание устройства   getAddress type: method, адрес устройства    Node{}    Свойство Описание     Send type: method, послать сообщение   Name type: method, наименование ноды   Description type: method, описание ноды   Ip type: method, IP адрес ноды   Status type: method, состояние ноды    MapElement{}    Свойство Описание     setState type: method, выставить состояние   getState type: method, получить состояние   setOptions type: method, указать список опций   getOptions type: method, получить список опций    </description>
    </item>
    
    <item>
      <title>overview</title>
      <link>https://e154.github.io/smart-home/en/getting-started/_service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/getting-started/_service/</guid>
      <description>Автозапуск Чтобы прописать сервис в автозагрузку запустить исполняемый файл с флагом install, к примеру:
cd /opt/smart-home/server/ sudo ./server-linux-amd64 install  Для удаления сервиса из автозагрузки запустить файл с флагом remove, к примеру:
cd /opt/smart-home/server/ sudo ./server-linux-amd64 remove  </description>
    </item>
    
    <item>
      <title>overview</title>
      <link>https://e154.github.io/smart-home/en/getting-started/_install_from_source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/getting-started/_install_from_source/</guid>
      <description>Сборка из исходного кода Все микросервисы написаны на языке Golang. Прежде чем продолжить разверните у себя последнюю стабильную версию языка download.
Установка будет производиться в операционной системе Debian GNU/Linux 8 (jessie). Сборка в корне домашней директории, в папке smart-home
sudo mkdir -p /opt/smart-home sudo chown $USER:$USER /opt/smart-home -R mkdir -p /opt/smart-home/server mkdir -p /opt/smart-home/configurator mkdir -p /opt/smart-home/node mkdir ~/smart-home go get github.com/FiloSottile/gvt go get github.com/beego/bee sudo npm install -g bower sudo npm install -g hulp  Сборка сервера cd ~/smart-home git clone git@github.</description>
    </item>
    
    <item>
      <title>Api</title>
      <link>https://e154.github.io/smart-home/en/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/api/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://e154.github.io/smart-home/en/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/getting-started/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>https://e154.github.io/smart-home/en/javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/javascript/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Smart home</title>
      <link>https://e154.github.io/smart-home/en/projects/project-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://e154.github.io/smart-home/en/projects/project-1/</guid>
      <description> An example of a typical project Smart House </description>
    </item>
    
  </channel>
</rss>