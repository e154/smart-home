// Package stub provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package stub

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get user access list object
	// (GET /v1/access_list)
	AuthServiceAccessList(ctx echo.Context) error
	// add new action
	// (POST /v1/action)
	ActionServiceAddAction(ctx echo.Context, params ActionServiceAddActionParams) error
	// delete action
	// (DELETE /v1/action/{id})
	ActionServiceDeleteAction(ctx echo.Context, id int64) error
	// get action by id
	// (GET /v1/action/{id})
	ActionServiceGetActionById(ctx echo.Context, id int64) error
	// update action
	// (PUT /v1/action/{id})
	ActionServiceUpdateAction(ctx echo.Context, id int64, params ActionServiceUpdateActionParams) error
	// get action list
	// (GET /v1/actions)
	ActionServiceGetActionList(ctx echo.Context, params ActionServiceGetActionListParams) error
	// search action
	// (GET /v1/actions/search)
	ActionServiceSearchAction(ctx echo.Context, params ActionServiceSearchActionParams) error
	// add new area
	// (POST /v1/area)
	AreaServiceAddArea(ctx echo.Context, params AreaServiceAddAreaParams) error
	// delete area
	// (DELETE /v1/area/{id})
	AreaServiceDeleteArea(ctx echo.Context, id int64) error
	// get area by id
	// (GET /v1/area/{id})
	AreaServiceGetAreaById(ctx echo.Context, id int64) error
	// update area
	// (PUT /v1/area/{id})
	AreaServiceUpdateArea(ctx echo.Context, id int64, params AreaServiceUpdateAreaParams) error
	// get area list
	// (GET /v1/areas)
	AreaServiceGetAreaList(ctx echo.Context, params AreaServiceGetAreaListParams) error
	// search area
	// (GET /v1/areas/search)
	AreaServiceSearchArea(ctx echo.Context, params AreaServiceSearchAreaParams) error
	// get statistic
	// (GET /v1/automation/statistic)
	AutomationServiceGetStatistic(ctx echo.Context) error
	// apply state
	// (POST /v1/backup/apply)
	BackupServiceApplyState(ctx echo.Context, params BackupServiceApplyStateParams) error
	// revert state
	// (POST /v1/backup/rollback)
	BackupServiceRevertState(ctx echo.Context, params BackupServiceRevertStateParams) error
	// upload backup file
	// (POST /v1/backup/upload)
	BackupServiceUploadBackup(ctx echo.Context, params BackupServiceUploadBackupParams) error
	// delete backup
	// (DELETE /v1/backup/{name})
	BackupServiceDeleteBackup(ctx echo.Context, name string) error
	// restore backup
	// (PUT /v1/backup/{name})
	BackupServiceRestoreBackup(ctx echo.Context, name string) error
	// get backup list
	// (GET /v1/backups)
	BackupServiceGetBackupList(ctx echo.Context, params BackupServiceGetBackupListParams) error
	// new backup
	// (POST /v1/backups)
	BackupServiceNewBackup(ctx echo.Context, params BackupServiceNewBackupParams) error
	// add new condition
	// (POST /v1/condition)
	ConditionServiceAddCondition(ctx echo.Context, params ConditionServiceAddConditionParams) error
	// delete condition
	// (DELETE /v1/condition/{id})
	ConditionServiceDeleteCondition(ctx echo.Context, id int64) error
	// get condition by id
	// (GET /v1/condition/{id})
	ConditionServiceGetConditionById(ctx echo.Context, id int64, params ConditionServiceGetConditionByIdParams) error
	// update condition
	// (PUT /v1/condition/{id})
	ConditionServiceUpdateCondition(ctx echo.Context, id int64, params ConditionServiceUpdateConditionParams) error
	// get condition list
	// (GET /v1/conditions)
	ConditionServiceGetConditionList(ctx echo.Context, params ConditionServiceGetConditionListParams) error
	// search condition
	// (GET /v1/conditions/search)
	ConditionServiceSearchCondition(ctx echo.Context, params ConditionServiceSearchConditionParams) error
	// add new dashboard
	// (POST /v1/dashboard)
	DashboardServiceAddDashboard(ctx echo.Context, params DashboardServiceAddDashboardParams) error
	// delete dashboard
	// (DELETE /v1/dashboard/{id})
	DashboardServiceDeleteDashboard(ctx echo.Context, id int64) error
	// get dashboard by id
	// (GET /v1/dashboard/{id})
	DashboardServiceGetDashboardById(ctx echo.Context, id int64) error
	// update dashboard
	// (PUT /v1/dashboard/{id})
	DashboardServiceUpdateDashboard(ctx echo.Context, id int64, params DashboardServiceUpdateDashboardParams) error
	// add new dashboard_card
	// (POST /v1/dashboard_card)
	DashboardCardServiceAddDashboardCard(ctx echo.Context, params DashboardCardServiceAddDashboardCardParams) error
	// import dashboard_card
	// (POST /v1/dashboard_card/import)
	DashboardCardServiceImportDashboardCard(ctx echo.Context, params DashboardCardServiceImportDashboardCardParams) error
	// delete dashboard_card
	// (DELETE /v1/dashboard_card/{id})
	DashboardCardServiceDeleteDashboardCard(ctx echo.Context, id int64) error
	// get dashboard_card by id
	// (GET /v1/dashboard_card/{id})
	DashboardCardServiceGetDashboardCardById(ctx echo.Context, id int64) error
	// update dashboard_card
	// (PUT /v1/dashboard_card/{id})
	DashboardCardServiceUpdateDashboardCard(ctx echo.Context, id int64, params DashboardCardServiceUpdateDashboardCardParams) error
	// add new dashboard_card
	// (POST /v1/dashboard_card_item)
	DashboardCardItemServiceAddDashboardCardItem(ctx echo.Context, params DashboardCardItemServiceAddDashboardCardItemParams) error
	// delete dashboard_card_item
	// (DELETE /v1/dashboard_card_item/{id})
	DashboardCardItemServiceDeleteDashboardCardItem(ctx echo.Context, id int64) error
	// get dashboard_card_item by id
	// (GET /v1/dashboard_card_item/{id})
	DashboardCardItemServiceGetDashboardCardItemById(ctx echo.Context, id int64) error
	// update dashboard_card_item
	// (PUT /v1/dashboard_card_item/{id})
	DashboardCardItemServiceUpdateDashboardCardItem(ctx echo.Context, id int64, params DashboardCardItemServiceUpdateDashboardCardItemParams) error
	// get dashboard_card_item list
	// (GET /v1/dashboard_card_items)
	DashboardCardItemServiceGetDashboardCardItemList(ctx echo.Context, params DashboardCardItemServiceGetDashboardCardItemListParams) error
	// get dashboard_card list
	// (GET /v1/dashboard_cards)
	DashboardCardServiceGetDashboardCardList(ctx echo.Context, params DashboardCardServiceGetDashboardCardListParams) error
	// add new dashboard_tab
	// (POST /v1/dashboard_tab)
	DashboardTabServiceAddDashboardTab(ctx echo.Context, params DashboardTabServiceAddDashboardTabParams) error
	// delete dashboard_tab
	// (DELETE /v1/dashboard_tab/{id})
	DashboardTabServiceDeleteDashboardTab(ctx echo.Context, id int64) error
	// get dashboard_tab by id
	// (GET /v1/dashboard_tab/{id})
	DashboardTabServiceGetDashboardTabById(ctx echo.Context, id int64) error
	// update dashboard
	// (PUT /v1/dashboard_tab/{id})
	DashboardTabServiceUpdateDashboardTab(ctx echo.Context, id int64, params DashboardTabServiceUpdateDashboardTabParams) error
	// get dashboard_tab list
	// (GET /v1/dashboard_tabs)
	DashboardTabServiceGetDashboardTabList(ctx echo.Context, params DashboardTabServiceGetDashboardTabListParams) error
	// import dashboard_tab
	// (POST /v1/dashboard_tabs/import)
	DashboardTabServiceImportDashboardTab(ctx echo.Context, params DashboardTabServiceImportDashboardTabParams) error
	// get dashboard list
	// (GET /v1/dashboards)
	DashboardServiceGetDashboardList(ctx echo.Context, params DashboardServiceGetDashboardListParams) error
	// import dashboard
	// (POST /v1/dashboards/import)
	DashboardServiceImportDashboard(ctx echo.Context, params DashboardServiceImportDashboardParams) error
	// search area
	// (GET /v1/dashboards/search)
	DashboardServiceSearchDashboard(ctx echo.Context, params DashboardServiceSearchDashboardParams) error
	// call action
	// (POST /v1/developer_tools/automation/call_action)
	DeveloperToolsServiceCallAction(ctx echo.Context, params DeveloperToolsServiceCallActionParams) error
	// call trigger
	// (POST /v1/developer_tools/automation/call_trigger)
	DeveloperToolsServiceCallTrigger(ctx echo.Context, params DeveloperToolsServiceCallTriggerParams) error
	// bas state
	// (GET /v1/developer_tools/bus/state)
	DeveloperToolsServiceGetEventBusStateList(ctx echo.Context, params DeveloperToolsServiceGetEventBusStateListParams) error
	// reload entity
	// (POST /v1/developer_tools/entity/reload)
	DeveloperToolsServiceReloadEntity(ctx echo.Context, params DeveloperToolsServiceReloadEntityParams) error
	// entity set state
	// (POST /v1/developer_tools/entity/set_state)
	DeveloperToolsServiceEntitySetState(ctx echo.Context, params DeveloperToolsServiceEntitySetStateParams) error
	// get entity list
	// (GET /v1/entities)
	EntityServiceGetEntityList(ctx echo.Context, params EntityServiceGetEntityListParams) error
	// import entity
	// (POST /v1/entities/import)
	EntityServiceImportEntity(ctx echo.Context, params EntityServiceImportEntityParams) error
	// get statistic
	// (GET /v1/entities/statistic)
	EntityServiceGetStatistic(ctx echo.Context) error
	// add new entity
	// (POST /v1/entity)
	EntityServiceAddEntity(ctx echo.Context, params EntityServiceAddEntityParams) error
	// search entity
	// (GET /v1/entity/search)
	EntityServiceSearchEntity(ctx echo.Context, params EntityServiceSearchEntityParams) error
	// delete entity
	// (DELETE /v1/entity/{id})
	EntityServiceDeleteEntity(ctx echo.Context, id string) error
	// get entity
	// (GET /v1/entity/{id})
	EntityServiceGetEntity(ctx echo.Context, id string) error
	// update entity
	// (PUT /v1/entity/{id})
	EntityServiceUpdateEntity(ctx echo.Context, id string, params EntityServiceUpdateEntityParams) error
	// disable entity
	// (POST /v1/entity/{id}/disable)
	EntityServiceDisabledEntity(ctx echo.Context, id string) error
	// enabled entity
	// (POST /v1/entity/{id}/enable)
	EntityServiceEnabledEntity(ctx echo.Context, id string) error

	// (GET /v1/entity_storage)
	EntityStorageServiceGetEntityStorageList(ctx echo.Context, params EntityStorageServiceGetEntityStorageListParams) error
	// add new image
	// (POST /v1/image)
	ImageServiceAddImage(ctx echo.Context, params ImageServiceAddImageParams) error
	// upload image
	// (POST /v1/image/upload)
	ImageServiceUploadImage(ctx echo.Context, params ImageServiceUploadImageParams) error
	// delete image by id
	// (DELETE /v1/image/{id})
	ImageServiceDeleteImageById(ctx echo.Context, id int64) error
	// get image by id
	// (GET /v1/image/{id})
	ImageServiceGetImageById(ctx echo.Context, id int64) error
	// update image
	// (PUT /v1/image/{id})
	ImageServiceUpdateImageById(ctx echo.Context, id int64, params ImageServiceUpdateImageByIdParams) error
	// get image list
	// (GET /v1/images)
	ImageServiceGetImageList(ctx echo.Context, params ImageServiceGetImageListParams) error
	// get image filter list
	// (GET /v1/images/filter_list)
	ImageServiceGetImageFilterList(ctx echo.Context) error
	// get image list by date
	// (GET /v1/images/filtered)
	ImageServiceGetImageListByDate(ctx echo.Context, params ImageServiceGetImageListByDateParams) error
	// entity call action
	// (POST /v1/interact/entity/call_action)
	InteractServiceEntityCallAction(ctx echo.Context, params InteractServiceEntityCallActionParams) error

	// (GET /v1/logs)
	LogServiceGetLogList(ctx echo.Context, params LogServiceGetLogListParams) error
	// get list
	// (GET /v1/message_delivery)
	MessageDeliveryServiceGetMessageDeliveryList(ctx echo.Context, params MessageDeliveryServiceGetMessageDeliveryListParams) error
	// get metric
	// (GET /v1/metric)
	MetricServiceGetMetric(ctx echo.Context, params MetricServiceGetMetricParams) error
	// get client by id
	// (GET /v1/mqtt/client/{id})
	MqttServiceGetClientById(ctx echo.Context, id string) error
	// get client list
	// (GET /v1/mqtt/clients)
	MqttServiceGetClientList(ctx echo.Context, params MqttServiceGetClientListParams) error
	// get subscription list
	// (GET /v1/mqtt/subscriptions)
	MqttServiceGetSubscriptionList(ctx echo.Context, params MqttServiceGetSubscriptionListParams) error
	// sign out user
	// (POST /v1/password_reset)
	AuthServicePasswordReset(ctx echo.Context, params AuthServicePasswordResetParams) error
	// remove plugin
	// (DELETE /v1/plugin/{name})
	PluginServiceRemovePlugin(ctx echo.Context, name string) error
	// get plugin
	// (GET /v1/plugin/{name})
	PluginServiceGetPlugin(ctx echo.Context, name string) error
	// disable plugin
	// (POST /v1/plugin/{name}/disable)
	PluginServiceDisablePlugin(ctx echo.Context, name string) error
	// enable plugin
	// (POST /v1/plugin/{name}/enable)
	PluginServiceEnablePlugin(ctx echo.Context, name string) error
	// get plugin readme
	// (GET /v1/plugin/{name}/readme)
	PluginServiceGetPluginReadme(ctx echo.Context, name string, params PluginServiceGetPluginReadmeParams) error
	// update plugin settings
	// (PUT /v1/plugin/{name}/settings)
	PluginServiceUpdatePluginSettings(ctx echo.Context, name string, params PluginServiceUpdatePluginSettingsParams) error
	// get plugin list
	// (GET /v1/plugins)
	PluginServiceGetPluginList(ctx echo.Context, params PluginServiceGetPluginListParams) error
	// search plugin
	// (GET /v1/plugins/search)
	PluginServiceSearchPlugin(ctx echo.Context, params PluginServiceSearchPluginParams) error
	// upload plugin archive
	// (POST /v1/plugins/upload)
	PluginServiceUploadPlugin(ctx echo.Context, params PluginServiceUploadPluginParams) error
	// add new role
	// (POST /v1/role)
	RoleServiceAddRole(ctx echo.Context, params RoleServiceAddRoleParams) error
	// delete role by name
	// (DELETE /v1/role/{name})
	RoleServiceDeleteRoleByName(ctx echo.Context, name string) error
	// get role by name
	// (GET /v1/role/{name})
	RoleServiceGetRoleByName(ctx echo.Context, name string) error
	// update role
	// (PUT /v1/role/{name})
	RoleServiceUpdateRoleByName(ctx echo.Context, name string, params RoleServiceUpdateRoleByNameParams) error
	// get role access list
	// (GET /v1/role/{name}/access_list)
	RoleServiceGetRoleAccessList(ctx echo.Context, name string) error
	// update role access list
	// (PUT /v1/role/{name}/access_list)
	RoleServiceUpdateRoleAccessList(ctx echo.Context, name string, params RoleServiceUpdateRoleAccessListParams) error
	// get role list
	// (GET /v1/roles)
	RoleServiceGetRoleList(ctx echo.Context, params RoleServiceGetRoleListParams) error
	// delete role by name
	// (GET /v1/roles/search)
	RoleServiceSearchRoleByName(ctx echo.Context, params RoleServiceSearchRoleByNameParams) error
	// add new script
	// (POST /v1/script)
	ScriptServiceAddScript(ctx echo.Context, params ScriptServiceAddScriptParams) error
	// exec src script by id
	// (POST /v1/script/exec_src)
	ScriptServiceExecSrcScriptById(ctx echo.Context, params ScriptServiceExecSrcScriptByIdParams) error
	// delete script by id
	// (DELETE /v1/script/{id})
	ScriptServiceDeleteScriptById(ctx echo.Context, id int64) error
	// get script by id
	// (GET /v1/script/{id})
	ScriptServiceGetScriptById(ctx echo.Context, id int64) error
	// update script
	// (PUT /v1/script/{id})
	ScriptServiceUpdateScriptById(ctx echo.Context, id int64, params ScriptServiceUpdateScriptByIdParams) error
	// get compiled script by id
	// (GET /v1/script/{id}/compiled)
	ScriptServiceGetCompiledScriptById(ctx echo.Context, id int64) error
	// copy script by id
	// (POST /v1/script/{id}/copy)
	ScriptServiceCopyScriptById(ctx echo.Context, id int64) error
	// exec script by id
	// (POST /v1/script/{id}/exec)
	ScriptServiceExecScriptById(ctx echo.Context, id int64) error
	// get script list
	// (GET /v1/scripts)
	ScriptServiceGetScriptList(ctx echo.Context, params ScriptServiceGetScriptListParams) error
	// search script by name
	// (GET /v1/scripts/search)
	ScriptServiceSearchScript(ctx echo.Context, params ScriptServiceSearchScriptParams) error
	// get statistic
	// (GET /v1/scripts/statistic)
	ScriptServiceGetStatistic(ctx echo.Context) error
	// sign in user
	// (POST /v1/signin)
	AuthServiceSignin(ctx echo.Context) error
	// sign out user
	// (POST /v1/signout)
	AuthServiceSignout(ctx echo.Context) error
	// delete tag by id
	// (DELETE /v1/tag/{id})
	TagServiceDeleteTagById(ctx echo.Context, id int64) error
	// get tag by id
	// (GET /v1/tag/{id})
	TagServiceGetTagById(ctx echo.Context, id int64) error
	// update tag
	// (PUT /v1/tag/{id})
	TagServiceUpdateTagById(ctx echo.Context, id int64, params TagServiceUpdateTagByIdParams) error
	// get tag list
	// (GET /v1/tags)
	TagServiceGetTagList(ctx echo.Context, params TagServiceGetTagListParams) error
	// search tag by name
	// (GET /v1/tags/search)
	TagServiceSearchTag(ctx echo.Context, params TagServiceSearchTagParams) error
	// add new task
	// (POST /v1/task)
	AutomationServiceAddTask(ctx echo.Context, params AutomationServiceAddTaskParams) error
	// delete task
	// (DELETE /v1/task/{id})
	AutomationServiceDeleteTask(ctx echo.Context, id int64) error
	// get task
	// (GET /v1/task/{id})
	AutomationServiceGetTask(ctx echo.Context, id int64) error
	// update task
	// (PUT /v1/task/{id})
	AutomationServiceUpdateTask(ctx echo.Context, id int64, params AutomationServiceUpdateTaskParams) error
	// disable task
	// (POST /v1/task/{id}/disable)
	AutomationServiceDisableTask(ctx echo.Context, id int64) error
	// enable task
	// (POST /v1/task/{id}/enable)
	AutomationServiceEnableTask(ctx echo.Context, id int64) error
	// get task list
	// (GET /v1/tasks)
	AutomationServiceGetTaskList(ctx echo.Context, params AutomationServiceGetTaskListParams) error
	// import task
	// (POST /v1/tasks/import)
	AutomationServiceImportTask(ctx echo.Context, params AutomationServiceImportTaskParams) error
	// add new trigger
	// (POST /v1/trigger)
	TriggerServiceAddTrigger(ctx echo.Context, params TriggerServiceAddTriggerParams) error
	// delete trigger
	// (DELETE /v1/trigger/{id})
	TriggerServiceDeleteTrigger(ctx echo.Context, id int64) error
	// get trigger by id
	// (GET /v1/trigger/{id})
	TriggerServiceGetTriggerById(ctx echo.Context, id int64) error
	// update trigger
	// (PUT /v1/trigger/{id})
	TriggerServiceUpdateTrigger(ctx echo.Context, id int64, params TriggerServiceUpdateTriggerParams) error
	// get trigger list
	// (GET /v1/triggers)
	TriggerServiceGetTriggerList(ctx echo.Context, params TriggerServiceGetTriggerListParams) error
	// search trigger
	// (GET /v1/triggers/search)
	TriggerServiceSearchTrigger(ctx echo.Context, params TriggerServiceSearchTriggerParams) error
	// disable triggers
	// (POST /v1/triggers/{id}/disable)
	TriggerServiceDisableTrigger(ctx echo.Context, id int64) error
	// enable triggers
	// (POST /v1/triggers/{id}/enable)
	TriggerServiceEnableTrigger(ctx echo.Context, id int64) error
	// add new user
	// (POST /v1/user)
	UserServiceAddUser(ctx echo.Context, params UserServiceAddUserParams) error
	// delete user by id
	// (DELETE /v1/user/{id})
	UserServiceDeleteUserById(ctx echo.Context, id int64) error
	// get user by id
	// (GET /v1/user/{id})
	UserServiceGetUserById(ctx echo.Context, id int64) error
	// update user by id
	// (PUT /v1/user/{id})
	UserServiceUpdateUserById(ctx echo.Context, id int64, params UserServiceUpdateUserByIdParams) error
	// get user list
	// (GET /v1/users)
	UserServiceGetUserList(ctx echo.Context, params UserServiceGetUserListParams) error
	// add new variable
	// (POST /v1/variable)
	VariableServiceAddVariable(ctx echo.Context, params VariableServiceAddVariableParams) error
	// delete variable
	// (DELETE /v1/variable/{name})
	VariableServiceDeleteVariable(ctx echo.Context, name string) error
	// get variable by name
	// (GET /v1/variable/{name})
	VariableServiceGetVariableByName(ctx echo.Context, name string) error
	// update variable
	// (PUT /v1/variable/{name})
	VariableServiceUpdateVariable(ctx echo.Context, name string, params VariableServiceUpdateVariableParams) error
	// get variable list
	// (GET /v1/variables)
	VariableServiceGetVariableList(ctx echo.Context, params VariableServiceGetVariableListParams) error
	// search trigger
	// (GET /v1/variables/search)
	VariableServiceSearchVariable(ctx echo.Context, params VariableServiceSearchVariableParams) error

	// (GET /v1/ws)
	StreamServiceSubscribe(ctx echo.Context) error
	// get bridge list
	// (GET /v1/zigbee2mqtt/bridge)
	Zigbee2mqttServiceGetBridgeList(ctx echo.Context, params Zigbee2mqttServiceGetBridgeListParams) error
	// add new bridge
	// (POST /v1/zigbee2mqtt/bridge)
	Zigbee2mqttServiceAddZigbee2mqttBridge(ctx echo.Context, params Zigbee2mqttServiceAddZigbee2mqttBridgeParams) error
	// delete bridge by id
	// (DELETE /v1/zigbee2mqtt/bridge/{id})
	Zigbee2mqttServiceDeleteBridgeById(ctx echo.Context, id int64) error
	// get bridge
	// (GET /v1/zigbee2mqtt/bridge/{id})
	Zigbee2mqttServiceGetZigbee2mqttBridge(ctx echo.Context, id int64) error
	// update bridge by id
	// (PUT /v1/zigbee2mqtt/bridge/{id}/bridge)
	Zigbee2mqttServiceUpdateBridgeById(ctx echo.Context, id int64, params Zigbee2mqttServiceUpdateBridgeByIdParams) error
	// list device
	// (GET /v1/zigbee2mqtt/bridge/{id}/devices)
	Zigbee2mqttServiceDeviceList(ctx echo.Context, id int64, params Zigbee2mqttServiceDeviceListParams) error
	// networkmap
	// (GET /v1/zigbee2mqtt/bridge/{id}/networkmap)
	Zigbee2mqttServiceNetworkmap(ctx echo.Context, id int64) error
	// update networkmap
	// (POST /v1/zigbee2mqtt/bridge/{id}/networkmap)
	Zigbee2mqttServiceUpdateNetworkmap(ctx echo.Context, id int64) error
	// reset bridge by id
	// (POST /v1/zigbee2mqtt/bridge/{id}/reset)
	Zigbee2mqttServiceResetBridgeById(ctx echo.Context, id int64) error
	// device ban
	// (POST /v1/zigbee2mqtt/device_ban)
	Zigbee2mqttServiceDeviceBan(ctx echo.Context, params Zigbee2mqttServiceDeviceBanParams) error
	// device rename
	// (POST /v1/zigbee2mqtt/device_rename)
	Zigbee2mqttServiceDeviceRename(ctx echo.Context, params Zigbee2mqttServiceDeviceRenameParams) error
	// device whitelist
	// (POST /v1/zigbee2mqtt/device_whitelist)
	Zigbee2mqttServiceDeviceWhitelist(ctx echo.Context, params Zigbee2mqttServiceDeviceWhitelistParams) error
	// search device
	// (GET /v1/zigbee2mqtt/search_device)
	Zigbee2mqttServiceSearchDevice(ctx echo.Context, params Zigbee2mqttServiceSearchDeviceParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthServiceAccessList converts echo context to params.
func (w *ServerInterfaceWrapper) AuthServiceAccessList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthServiceAccessList(ctx)
	return err
}

// ActionServiceAddAction converts echo context to params.
func (w *ServerInterfaceWrapper) ActionServiceAddAction(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ActionServiceAddActionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ActionServiceAddAction(ctx, params)
	return err
}

// ActionServiceDeleteAction converts echo context to params.
func (w *ServerInterfaceWrapper) ActionServiceDeleteAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ActionServiceDeleteAction(ctx, id)
	return err
}

// ActionServiceGetActionById converts echo context to params.
func (w *ServerInterfaceWrapper) ActionServiceGetActionById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ActionServiceGetActionById(ctx, id)
	return err
}

// ActionServiceUpdateAction converts echo context to params.
func (w *ServerInterfaceWrapper) ActionServiceUpdateAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ActionServiceUpdateActionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ActionServiceUpdateAction(ctx, id, params)
	return err
}

// ActionServiceGetActionList converts echo context to params.
func (w *ServerInterfaceWrapper) ActionServiceGetActionList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ActionServiceGetActionListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ids[]" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids[]", ctx.QueryParams(), &params.Ids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ids[]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ActionServiceGetActionList(ctx, params)
	return err
}

// ActionServiceSearchAction converts echo context to params.
func (w *ServerInterfaceWrapper) ActionServiceSearchAction(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ActionServiceSearchActionParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ActionServiceSearchAction(ctx, params)
	return err
}

// AreaServiceAddArea converts echo context to params.
func (w *ServerInterfaceWrapper) AreaServiceAddArea(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AreaServiceAddAreaParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AreaServiceAddArea(ctx, params)
	return err
}

// AreaServiceDeleteArea converts echo context to params.
func (w *ServerInterfaceWrapper) AreaServiceDeleteArea(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AreaServiceDeleteArea(ctx, id)
	return err
}

// AreaServiceGetAreaById converts echo context to params.
func (w *ServerInterfaceWrapper) AreaServiceGetAreaById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AreaServiceGetAreaById(ctx, id)
	return err
}

// AreaServiceUpdateArea converts echo context to params.
func (w *ServerInterfaceWrapper) AreaServiceUpdateArea(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AreaServiceUpdateAreaParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AreaServiceUpdateArea(ctx, id, params)
	return err
}

// AreaServiceGetAreaList converts echo context to params.
func (w *ServerInterfaceWrapper) AreaServiceGetAreaList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AreaServiceGetAreaListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AreaServiceGetAreaList(ctx, params)
	return err
}

// AreaServiceSearchArea converts echo context to params.
func (w *ServerInterfaceWrapper) AreaServiceSearchArea(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AreaServiceSearchAreaParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AreaServiceSearchArea(ctx, params)
	return err
}

// AutomationServiceGetStatistic converts echo context to params.
func (w *ServerInterfaceWrapper) AutomationServiceGetStatistic(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AutomationServiceGetStatistic(ctx)
	return err
}

// BackupServiceApplyState converts echo context to params.
func (w *ServerInterfaceWrapper) BackupServiceApplyState(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BackupServiceApplyStateParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BackupServiceApplyState(ctx, params)
	return err
}

// BackupServiceRevertState converts echo context to params.
func (w *ServerInterfaceWrapper) BackupServiceRevertState(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BackupServiceRevertStateParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BackupServiceRevertState(ctx, params)
	return err
}

// BackupServiceUploadBackup converts echo context to params.
func (w *ServerInterfaceWrapper) BackupServiceUploadBackup(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BackupServiceUploadBackupParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BackupServiceUploadBackup(ctx, params)
	return err
}

// BackupServiceDeleteBackup converts echo context to params.
func (w *ServerInterfaceWrapper) BackupServiceDeleteBackup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BackupServiceDeleteBackup(ctx, name)
	return err
}

// BackupServiceRestoreBackup converts echo context to params.
func (w *ServerInterfaceWrapper) BackupServiceRestoreBackup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BackupServiceRestoreBackup(ctx, name)
	return err
}

// BackupServiceGetBackupList converts echo context to params.
func (w *ServerInterfaceWrapper) BackupServiceGetBackupList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BackupServiceGetBackupListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BackupServiceGetBackupList(ctx, params)
	return err
}

// BackupServiceNewBackup converts echo context to params.
func (w *ServerInterfaceWrapper) BackupServiceNewBackup(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BackupServiceNewBackupParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BackupServiceNewBackup(ctx, params)
	return err
}

// ConditionServiceAddCondition converts echo context to params.
func (w *ServerInterfaceWrapper) ConditionServiceAddCondition(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ConditionServiceAddConditionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConditionServiceAddCondition(ctx, params)
	return err
}

// ConditionServiceDeleteCondition converts echo context to params.
func (w *ServerInterfaceWrapper) ConditionServiceDeleteCondition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConditionServiceDeleteCondition(ctx, id)
	return err
}

// ConditionServiceGetConditionById converts echo context to params.
func (w *ServerInterfaceWrapper) ConditionServiceGetConditionById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ConditionServiceGetConditionByIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConditionServiceGetConditionById(ctx, id, params)
	return err
}

// ConditionServiceUpdateCondition converts echo context to params.
func (w *ServerInterfaceWrapper) ConditionServiceUpdateCondition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ConditionServiceUpdateConditionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConditionServiceUpdateCondition(ctx, id, params)
	return err
}

// ConditionServiceGetConditionList converts echo context to params.
func (w *ServerInterfaceWrapper) ConditionServiceGetConditionList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ConditionServiceGetConditionListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ids[]" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids[]", ctx.QueryParams(), &params.Ids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ids[]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConditionServiceGetConditionList(ctx, params)
	return err
}

// ConditionServiceSearchCondition converts echo context to params.
func (w *ServerInterfaceWrapper) ConditionServiceSearchCondition(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ConditionServiceSearchConditionParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConditionServiceSearchCondition(ctx, params)
	return err
}

// DashboardServiceAddDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardServiceAddDashboard(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardServiceAddDashboardParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardServiceAddDashboard(ctx, params)
	return err
}

// DashboardServiceDeleteDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardServiceDeleteDashboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardServiceDeleteDashboard(ctx, id)
	return err
}

// DashboardServiceGetDashboardById converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardServiceGetDashboardById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardServiceGetDashboardById(ctx, id)
	return err
}

// DashboardServiceUpdateDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardServiceUpdateDashboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardServiceUpdateDashboardParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardServiceUpdateDashboard(ctx, id, params)
	return err
}

// DashboardCardServiceAddDashboardCard converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardServiceAddDashboardCard(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardCardServiceAddDashboardCardParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardServiceAddDashboardCard(ctx, params)
	return err
}

// DashboardCardServiceImportDashboardCard converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardServiceImportDashboardCard(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardCardServiceImportDashboardCardParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardServiceImportDashboardCard(ctx, params)
	return err
}

// DashboardCardServiceDeleteDashboardCard converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardServiceDeleteDashboardCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardServiceDeleteDashboardCard(ctx, id)
	return err
}

// DashboardCardServiceGetDashboardCardById converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardServiceGetDashboardCardById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardServiceGetDashboardCardById(ctx, id)
	return err
}

// DashboardCardServiceUpdateDashboardCard converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardServiceUpdateDashboardCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardCardServiceUpdateDashboardCardParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardServiceUpdateDashboardCard(ctx, id, params)
	return err
}

// DashboardCardItemServiceAddDashboardCardItem converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardItemServiceAddDashboardCardItem(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardCardItemServiceAddDashboardCardItemParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardItemServiceAddDashboardCardItem(ctx, params)
	return err
}

// DashboardCardItemServiceDeleteDashboardCardItem converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardItemServiceDeleteDashboardCardItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardItemServiceDeleteDashboardCardItem(ctx, id)
	return err
}

// DashboardCardItemServiceGetDashboardCardItemById converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardItemServiceGetDashboardCardItemById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardItemServiceGetDashboardCardItemById(ctx, id)
	return err
}

// DashboardCardItemServiceUpdateDashboardCardItem converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardItemServiceUpdateDashboardCardItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardCardItemServiceUpdateDashboardCardItemParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardItemServiceUpdateDashboardCardItem(ctx, id, params)
	return err
}

// DashboardCardItemServiceGetDashboardCardItemList converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardItemServiceGetDashboardCardItemList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardCardItemServiceGetDashboardCardItemListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardItemServiceGetDashboardCardItemList(ctx, params)
	return err
}

// DashboardCardServiceGetDashboardCardList converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardCardServiceGetDashboardCardList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardCardServiceGetDashboardCardListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardCardServiceGetDashboardCardList(ctx, params)
	return err
}

// DashboardTabServiceAddDashboardTab converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardTabServiceAddDashboardTab(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardTabServiceAddDashboardTabParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardTabServiceAddDashboardTab(ctx, params)
	return err
}

// DashboardTabServiceDeleteDashboardTab converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardTabServiceDeleteDashboardTab(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardTabServiceDeleteDashboardTab(ctx, id)
	return err
}

// DashboardTabServiceGetDashboardTabById converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardTabServiceGetDashboardTabById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardTabServiceGetDashboardTabById(ctx, id)
	return err
}

// DashboardTabServiceUpdateDashboardTab converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardTabServiceUpdateDashboardTab(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardTabServiceUpdateDashboardTabParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardTabServiceUpdateDashboardTab(ctx, id, params)
	return err
}

// DashboardTabServiceGetDashboardTabList converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardTabServiceGetDashboardTabList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardTabServiceGetDashboardTabListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardTabServiceGetDashboardTabList(ctx, params)
	return err
}

// DashboardTabServiceImportDashboardTab converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardTabServiceImportDashboardTab(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardTabServiceImportDashboardTabParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardTabServiceImportDashboardTab(ctx, params)
	return err
}

// DashboardServiceGetDashboardList converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardServiceGetDashboardList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardServiceGetDashboardListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardServiceGetDashboardList(ctx, params)
	return err
}

// DashboardServiceImportDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardServiceImportDashboard(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardServiceImportDashboardParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardServiceImportDashboard(ctx, params)
	return err
}

// DashboardServiceSearchDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) DashboardServiceSearchDashboard(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DashboardServiceSearchDashboardParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DashboardServiceSearchDashboard(ctx, params)
	return err
}

// DeveloperToolsServiceCallAction converts echo context to params.
func (w *ServerInterfaceWrapper) DeveloperToolsServiceCallAction(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeveloperToolsServiceCallActionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeveloperToolsServiceCallAction(ctx, params)
	return err
}

// DeveloperToolsServiceCallTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) DeveloperToolsServiceCallTrigger(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeveloperToolsServiceCallTriggerParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeveloperToolsServiceCallTrigger(ctx, params)
	return err
}

// DeveloperToolsServiceGetEventBusStateList converts echo context to params.
func (w *ServerInterfaceWrapper) DeveloperToolsServiceGetEventBusStateList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeveloperToolsServiceGetEventBusStateListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeveloperToolsServiceGetEventBusStateList(ctx, params)
	return err
}

// DeveloperToolsServiceReloadEntity converts echo context to params.
func (w *ServerInterfaceWrapper) DeveloperToolsServiceReloadEntity(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeveloperToolsServiceReloadEntityParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeveloperToolsServiceReloadEntity(ctx, params)
	return err
}

// DeveloperToolsServiceEntitySetState converts echo context to params.
func (w *ServerInterfaceWrapper) DeveloperToolsServiceEntitySetState(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeveloperToolsServiceEntitySetStateParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeveloperToolsServiceEntitySetState(ctx, params)
	return err
}

// EntityServiceGetEntityList converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceGetEntityList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EntityServiceGetEntityListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "tags[]" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags[]", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags[]: %s", err))
	}

	// ------------- Optional query parameter "plugin" -------------

	err = runtime.BindQueryParameter("form", true, false, "plugin", ctx.QueryParams(), &params.Plugin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter plugin: %s", err))
	}

	// ------------- Optional query parameter "area" -------------

	err = runtime.BindQueryParameter("form", true, false, "area", ctx.QueryParams(), &params.Area)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter area: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceGetEntityList(ctx, params)
	return err
}

// EntityServiceImportEntity converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceImportEntity(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EntityServiceImportEntityParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceImportEntity(ctx, params)
	return err
}

// EntityServiceGetStatistic converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceGetStatistic(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceGetStatistic(ctx)
	return err
}

// EntityServiceAddEntity converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceAddEntity(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EntityServiceAddEntityParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceAddEntity(ctx, params)
	return err
}

// EntityServiceSearchEntity converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceSearchEntity(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EntityServiceSearchEntityParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceSearchEntity(ctx, params)
	return err
}

// EntityServiceDeleteEntity converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceDeleteEntity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceDeleteEntity(ctx, id)
	return err
}

// EntityServiceGetEntity converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceGetEntity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceGetEntity(ctx, id)
	return err
}

// EntityServiceUpdateEntity converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceUpdateEntity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EntityServiceUpdateEntityParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceUpdateEntity(ctx, id, params)
	return err
}

// EntityServiceDisabledEntity converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceDisabledEntity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceDisabledEntity(ctx, id)
	return err
}

// EntityServiceEnabledEntity converts echo context to params.
func (w *ServerInterfaceWrapper) EntityServiceEnabledEntity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityServiceEnabledEntity(ctx, id)
	return err
}

// EntityStorageServiceGetEntityStorageList converts echo context to params.
func (w *ServerInterfaceWrapper) EntityStorageServiceGetEntityStorageList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EntityStorageServiceGetEntityStorageListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Optional query parameter "entityId[]" -------------

	err = runtime.BindQueryParameter("form", true, false, "entityId[]", ctx.QueryParams(), &params.EntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityId[]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EntityStorageServiceGetEntityStorageList(ctx, params)
	return err
}

// ImageServiceAddImage converts echo context to params.
func (w *ServerInterfaceWrapper) ImageServiceAddImage(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageServiceAddImageParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImageServiceAddImage(ctx, params)
	return err
}

// ImageServiceUploadImage converts echo context to params.
func (w *ServerInterfaceWrapper) ImageServiceUploadImage(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageServiceUploadImageParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImageServiceUploadImage(ctx, params)
	return err
}

// ImageServiceDeleteImageById converts echo context to params.
func (w *ServerInterfaceWrapper) ImageServiceDeleteImageById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImageServiceDeleteImageById(ctx, id)
	return err
}

// ImageServiceGetImageById converts echo context to params.
func (w *ServerInterfaceWrapper) ImageServiceGetImageById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImageServiceGetImageById(ctx, id)
	return err
}

// ImageServiceUpdateImageById converts echo context to params.
func (w *ServerInterfaceWrapper) ImageServiceUpdateImageById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageServiceUpdateImageByIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImageServiceUpdateImageById(ctx, id, params)
	return err
}

// ImageServiceGetImageList converts echo context to params.
func (w *ServerInterfaceWrapper) ImageServiceGetImageList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageServiceGetImageListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImageServiceGetImageList(ctx, params)
	return err
}

// ImageServiceGetImageFilterList converts echo context to params.
func (w *ServerInterfaceWrapper) ImageServiceGetImageFilterList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImageServiceGetImageFilterList(ctx)
	return err
}

// ImageServiceGetImageListByDate converts echo context to params.
func (w *ServerInterfaceWrapper) ImageServiceGetImageListByDate(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeGetLogListyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageServiceGetImageListByDateParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImageServiceGetImageListByDate(ctx, params)
	return err
}

// InteractServiceEntityCallAction converts echo context to params.
func (w *ServerInterfaceWrapper) InteractServiceEntityCallAction(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params InteractServiceEntityCallActionParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InteractServiceEntityCallAction(ctx, params)
	return err
}

// LogServiceGetLogList converts echo context to params.
func (w *ServerInterfaceWrapper) LogServiceGetLogList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LogServiceGetLogListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogServiceGetLogList(ctx, params)
	return err
}

// MessageDeliveryServiceGetMessageDeliveryList converts echo context to params.
func (w *ServerInterfaceWrapper) MessageDeliveryServiceGetMessageDeliveryList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MessageDeliveryServiceGetMessageDeliveryListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Optional query parameter "messageType" -------------

	err = runtime.BindQueryParameter("form", true, false, "messageType", ctx.QueryParams(), &params.MessageType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter messageType: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MessageDeliveryServiceGetMessageDeliveryList(ctx, params)
	return err
}

// MetricServiceGetMetric converts echo context to params.
func (w *ServerInterfaceWrapper) MetricServiceGetMetric(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MetricServiceGetMetricParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "range" -------------

	err = runtime.BindQueryParameter("form", true, false, "range", ctx.QueryParams(), &params.Range)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MetricServiceGetMetric(ctx, params)
	return err
}

// MqttServiceGetClientById converts echo context to params.
func (w *ServerInterfaceWrapper) MqttServiceGetClientById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MqttServiceGetClientById(ctx, id)
	return err
}

// MqttServiceGetClientList converts echo context to params.
func (w *ServerInterfaceWrapper) MqttServiceGetClientList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MqttServiceGetClientListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MqttServiceGetClientList(ctx, params)
	return err
}

// MqttServiceGetSubscriptionList converts echo context to params.
func (w *ServerInterfaceWrapper) MqttServiceGetSubscriptionList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params MqttServiceGetSubscriptionListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "clientId" -------------

	err = runtime.BindQueryParameter("form", true, false, "clientId", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MqttServiceGetSubscriptionList(ctx, params)
	return err
}

// AuthServicePasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) AuthServicePasswordReset(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	ctx.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthServicePasswordResetParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthServicePasswordReset(ctx, params)
	return err
}

// PluginServiceRemovePlugin converts echo context to params.
func (w *ServerInterfaceWrapper) PluginServiceRemovePlugin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PluginServiceRemovePlugin(ctx, name)
	return err
}

// PluginServiceGetPlugin converts echo context to params.
func (w *ServerInterfaceWrapper) PluginServiceGetPlugin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PluginServiceGetPlugin(ctx, name)
	return err
}

// PluginServiceDisablePlugin converts echo context to params.
func (w *ServerInterfaceWrapper) PluginServiceDisablePlugin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PluginServiceDisablePlugin(ctx, name)
	return err
}

// PluginServiceEnablePlugin converts echo context to params.
func (w *ServerInterfaceWrapper) PluginServiceEnablePlugin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PluginServiceEnablePlugin(ctx, name)
	return err
}

// PluginServiceGetPluginReadme converts echo context to params.
func (w *ServerInterfaceWrapper) PluginServiceGetPluginReadme(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginServiceGetPluginReadmeParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// ------------- Optional query parameter "lang" -------------

	err = runtime.BindQueryParameter("form", true, false, "lang", ctx.QueryParams(), &params.Lang)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lang: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PluginServiceGetPluginReadme(ctx, name, params)
	return err
}

// PluginServiceUpdatePluginSettings converts echo context to params.
func (w *ServerInterfaceWrapper) PluginServiceUpdatePluginSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginServiceUpdatePluginSettingsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PluginServiceUpdatePluginSettings(ctx, name, params)
	return err
}

// PluginServiceGetPluginList converts echo context to params.
func (w *ServerInterfaceWrapper) PluginServiceGetPluginList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginServiceGetPluginListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "triggers" -------------

	err = runtime.BindQueryParameter("form", true, false, "triggers", ctx.QueryParams(), &params.Triggers)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter triggers: %s", err))
	}

	// ------------- Optional query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PluginServiceGetPluginList(ctx, params)
	return err
}

// PluginServiceSearchPlugin converts echo context to params.
func (w *ServerInterfaceWrapper) PluginServiceSearchPlugin(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginServiceSearchPluginParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PluginServiceSearchPlugin(ctx, params)
	return err
}

// PluginServiceUploadPlugin converts echo context to params.
func (w *ServerInterfaceWrapper) PluginServiceUploadPlugin(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginServiceUploadPluginParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PluginServiceUploadPlugin(ctx, params)
	return err
}

// RoleServiceAddRole converts echo context to params.
func (w *ServerInterfaceWrapper) RoleServiceAddRole(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RoleServiceAddRoleParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleServiceAddRole(ctx, params)
	return err
}

// RoleServiceDeleteRoleByName converts echo context to params.
func (w *ServerInterfaceWrapper) RoleServiceDeleteRoleByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleServiceDeleteRoleByName(ctx, name)
	return err
}

// RoleServiceGetRoleByName converts echo context to params.
func (w *ServerInterfaceWrapper) RoleServiceGetRoleByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleServiceGetRoleByName(ctx, name)
	return err
}

// RoleServiceUpdateRoleByName converts echo context to params.
func (w *ServerInterfaceWrapper) RoleServiceUpdateRoleByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RoleServiceUpdateRoleByNameParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleServiceUpdateRoleByName(ctx, name, params)
	return err
}

// RoleServiceGetRoleAccessList converts echo context to params.
func (w *ServerInterfaceWrapper) RoleServiceGetRoleAccessList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleServiceGetRoleAccessList(ctx, name)
	return err
}

// RoleServiceUpdateRoleAccessList converts echo context to params.
func (w *ServerInterfaceWrapper) RoleServiceUpdateRoleAccessList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RoleServiceUpdateRoleAccessListParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleServiceUpdateRoleAccessList(ctx, name, params)
	return err
}

// RoleServiceGetRoleList converts echo context to params.
func (w *ServerInterfaceWrapper) RoleServiceGetRoleList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RoleServiceGetRoleListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleServiceGetRoleList(ctx, params)
	return err
}

// RoleServiceSearchRoleByName converts echo context to params.
func (w *ServerInterfaceWrapper) RoleServiceSearchRoleByName(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RoleServiceSearchRoleByNameParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleServiceSearchRoleByName(ctx, params)
	return err
}

// ScriptServiceAddScript converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceAddScript(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ScriptServiceAddScriptParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceAddScript(ctx, params)
	return err
}

// ScriptServiceExecSrcScriptById converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceExecSrcScriptById(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ScriptServiceExecSrcScriptByIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceExecSrcScriptById(ctx, params)
	return err
}

// ScriptServiceDeleteScriptById converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceDeleteScriptById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceDeleteScriptById(ctx, id)
	return err
}

// ScriptServiceGetScriptById converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceGetScriptById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceGetScriptById(ctx, id)
	return err
}

// ScriptServiceUpdateScriptById converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceUpdateScriptById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ScriptServiceUpdateScriptByIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceUpdateScriptById(ctx, id, params)
	return err
}

// ScriptServiceGetCompiledScriptById converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceGetCompiledScriptById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceGetCompiledScriptById(ctx, id)
	return err
}

// ScriptServiceCopyScriptById converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceCopyScriptById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceCopyScriptById(ctx, id)
	return err
}

// ScriptServiceExecScriptById converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceExecScriptById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceExecScriptById(ctx, id)
	return err
}

// ScriptServiceGetScriptList converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceGetScriptList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ScriptServiceGetScriptListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ids[]" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids[]", ctx.QueryParams(), &params.Ids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ids[]: %s", err))
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceGetScriptList(ctx, params)
	return err
}

// ScriptServiceSearchScript converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceSearchScript(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ScriptServiceSearchScriptParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceSearchScript(ctx, params)
	return err
}

// ScriptServiceGetStatistic converts echo context to params.
func (w *ServerInterfaceWrapper) ScriptServiceGetStatistic(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScriptServiceGetStatistic(ctx)
	return err
}

// AuthServiceSignin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthServiceSignin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthServiceSignin(ctx)
	return err
}

// AuthServiceSignout converts echo context to params.
func (w *ServerInterfaceWrapper) AuthServiceSignout(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthServiceSignout(ctx)
	return err
}

// TagServiceDeleteTagById converts echo context to params.
func (w *ServerInterfaceWrapper) TagServiceDeleteTagById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TagServiceDeleteTagById(ctx, id)
	return err
}

// TagServiceGetTagById converts echo context to params.
func (w *ServerInterfaceWrapper) TagServiceGetTagById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TagServiceGetTagById(ctx, id)
	return err
}

// TagServiceUpdateTagById converts echo context to params.
func (w *ServerInterfaceWrapper) TagServiceUpdateTagById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TagServiceUpdateTagByIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TagServiceUpdateTagById(ctx, id, params)
	return err
}

// TagServiceGetTagList converts echo context to params.
func (w *ServerInterfaceWrapper) TagServiceGetTagList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TagServiceGetTagListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "tags[]" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags[]", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags[]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TagServiceGetTagList(ctx, params)
	return err
}

// TagServiceSearchTag converts echo context to params.
func (w *ServerInterfaceWrapper) TagServiceSearchTag(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TagServiceSearchTagParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TagServiceSearchTag(ctx, params)
	return err
}

// AutomationServiceAddTask converts echo context to params.
func (w *ServerInterfaceWrapper) AutomationServiceAddTask(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutomationServiceAddTaskParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AutomationServiceAddTask(ctx, params)
	return err
}

// AutomationServiceDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) AutomationServiceDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AutomationServiceDeleteTask(ctx, id)
	return err
}

// AutomationServiceGetTask converts echo context to params.
func (w *ServerInterfaceWrapper) AutomationServiceGetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AutomationServiceGetTask(ctx, id)
	return err
}

// AutomationServiceUpdateTask converts echo context to params.
func (w *ServerInterfaceWrapper) AutomationServiceUpdateTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutomationServiceUpdateTaskParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AutomationServiceUpdateTask(ctx, id, params)
	return err
}

// AutomationServiceDisableTask converts echo context to params.
func (w *ServerInterfaceWrapper) AutomationServiceDisableTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AutomationServiceDisableTask(ctx, id)
	return err
}

// AutomationServiceEnableTask converts echo context to params.
func (w *ServerInterfaceWrapper) AutomationServiceEnableTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AutomationServiceEnableTask(ctx, id)
	return err
}

// AutomationServiceGetTaskList converts echo context to params.
func (w *ServerInterfaceWrapper) AutomationServiceGetTaskList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutomationServiceGetTaskListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AutomationServiceGetTaskList(ctx, params)
	return err
}

// AutomationServiceImportTask converts echo context to params.
func (w *ServerInterfaceWrapper) AutomationServiceImportTask(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutomationServiceImportTaskParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AutomationServiceImportTask(ctx, params)
	return err
}

// TriggerServiceAddTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerServiceAddTrigger(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TriggerServiceAddTriggerParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TriggerServiceAddTrigger(ctx, params)
	return err
}

// TriggerServiceDeleteTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerServiceDeleteTrigger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TriggerServiceDeleteTrigger(ctx, id)
	return err
}

// TriggerServiceGetTriggerById converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerServiceGetTriggerById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TriggerServiceGetTriggerById(ctx, id)
	return err
}

// TriggerServiceUpdateTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerServiceUpdateTrigger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TriggerServiceUpdateTriggerParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TriggerServiceUpdateTrigger(ctx, id, params)
	return err
}

// TriggerServiceGetTriggerList converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerServiceGetTriggerList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TriggerServiceGetTriggerListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "ids[]" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids[]", ctx.QueryParams(), &params.Ids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ids[]: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TriggerServiceGetTriggerList(ctx, params)
	return err
}

// TriggerServiceSearchTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerServiceSearchTrigger(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TriggerServiceSearchTriggerParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TriggerServiceSearchTrigger(ctx, params)
	return err
}

// TriggerServiceDisableTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerServiceDisableTrigger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TriggerServiceDisableTrigger(ctx, id)
	return err
}

// TriggerServiceEnableTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerServiceEnableTrigger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TriggerServiceEnableTrigger(ctx, id)
	return err
}

// UserServiceAddUser converts echo context to params.
func (w *ServerInterfaceWrapper) UserServiceAddUser(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserServiceAddUserParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserServiceAddUser(ctx, params)
	return err
}

// UserServiceDeleteUserById converts echo context to params.
func (w *ServerInterfaceWrapper) UserServiceDeleteUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserServiceDeleteUserById(ctx, id)
	return err
}

// UserServiceGetUserById converts echo context to params.
func (w *ServerInterfaceWrapper) UserServiceGetUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserServiceGetUserById(ctx, id)
	return err
}

// UserServiceUpdateUserById converts echo context to params.
func (w *ServerInterfaceWrapper) UserServiceUpdateUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserServiceUpdateUserByIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserServiceUpdateUserById(ctx, id, params)
	return err
}

// UserServiceGetUserList converts echo context to params.
func (w *ServerInterfaceWrapper) UserServiceGetUserList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UserServiceGetUserListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserServiceGetUserList(ctx, params)
	return err
}

// VariableServiceAddVariable converts echo context to params.
func (w *ServerInterfaceWrapper) VariableServiceAddVariable(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params VariableServiceAddVariableParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VariableServiceAddVariable(ctx, params)
	return err
}

// VariableServiceDeleteVariable converts echo context to params.
func (w *ServerInterfaceWrapper) VariableServiceDeleteVariable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VariableServiceDeleteVariable(ctx, name)
	return err
}

// VariableServiceGetVariableByName converts echo context to params.
func (w *ServerInterfaceWrapper) VariableServiceGetVariableByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VariableServiceGetVariableByName(ctx, name)
	return err
}

// VariableServiceUpdateVariable converts echo context to params.
func (w *ServerInterfaceWrapper) VariableServiceUpdateVariable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params VariableServiceUpdateVariableParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VariableServiceUpdateVariable(ctx, name, params)
	return err
}

// VariableServiceGetVariableList converts echo context to params.
func (w *ServerInterfaceWrapper) VariableServiceGetVariableList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params VariableServiceGetVariableListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VariableServiceGetVariableList(ctx, params)
	return err
}

// VariableServiceSearchVariable converts echo context to params.
func (w *ServerInterfaceWrapper) VariableServiceSearchVariable(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params VariableServiceSearchVariableParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VariableServiceSearchVariable(ctx, params)
	return err
}

// StreamServiceSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) StreamServiceSubscribe(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StreamServiceSubscribe(ctx)
	return err
}

// Zigbee2mqttServiceGetBridgeList converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceGetBridgeList(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Zigbee2mqttServiceGetBridgeListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceGetBridgeList(ctx, params)
	return err
}

// Zigbee2mqttServiceAddZigbee2mqttBridge converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceAddZigbee2mqttBridge(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Zigbee2mqttServiceAddZigbee2mqttBridgeParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceAddZigbee2mqttBridge(ctx, params)
	return err
}

// Zigbee2mqttServiceDeleteBridgeById converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceDeleteBridgeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceDeleteBridgeById(ctx, id)
	return err
}

// Zigbee2mqttServiceGetZigbee2mqttBridge converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceGetZigbee2mqttBridge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceGetZigbee2mqttBridge(ctx, id)
	return err
}

// Zigbee2mqttServiceUpdateBridgeById converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceUpdateBridgeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Zigbee2mqttServiceUpdateBridgeByIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceUpdateBridgeById(ctx, id, params)
	return err
}

// Zigbee2mqttServiceDeviceList converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceDeviceList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Zigbee2mqttServiceDeviceListParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceDeviceList(ctx, id, params)
	return err
}

// Zigbee2mqttServiceNetworkmap converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceNetworkmap(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceNetworkmap(ctx, id)
	return err
}

// Zigbee2mqttServiceUpdateNetworkmap converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceUpdateNetworkmap(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceUpdateNetworkmap(ctx, id)
	return err
}

// Zigbee2mqttServiceResetBridgeById converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceResetBridgeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceResetBridgeById(ctx, id)
	return err
}

// Zigbee2mqttServiceDeviceBan converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceDeviceBan(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Zigbee2mqttServiceDeviceBanParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceDeviceBan(ctx, params)
	return err
}

// Zigbee2mqttServiceDeviceRename converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceDeviceRename(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Zigbee2mqttServiceDeviceRenameParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceDeviceRename(ctx, params)
	return err
}

// Zigbee2mqttServiceDeviceWhitelist converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceDeviceWhitelist(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Zigbee2mqttServiceDeviceWhitelistParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept AcceptJSON
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept: %s", err))
		}

		params.Accept = &Accept
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceDeviceWhitelist(ctx, params)
	return err
}

// Zigbee2mqttServiceSearchDevice converts echo context to params.
func (w *ServerInterfaceWrapper) Zigbee2mqttServiceSearchDevice(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params Zigbee2mqttServiceSearchDeviceParams
	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Zigbee2mqttServiceSearchDevice(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/access_list", wrapper.AuthServiceAccessList)
	router.POST(baseURL+"/v1/action", wrapper.ActionServiceAddAction)
	router.DELETE(baseURL+"/v1/action/:id", wrapper.ActionServiceDeleteAction)
	router.GET(baseURL+"/v1/action/:id", wrapper.ActionServiceGetActionById)
	router.PUT(baseURL+"/v1/action/:id", wrapper.ActionServiceUpdateAction)
	router.GET(baseURL+"/v1/actions", wrapper.ActionServiceGetActionList)
	router.GET(baseURL+"/v1/actions/search", wrapper.ActionServiceSearchAction)
	router.POST(baseURL+"/v1/area", wrapper.AreaServiceAddArea)
	router.DELETE(baseURL+"/v1/area/:id", wrapper.AreaServiceDeleteArea)
	router.GET(baseURL+"/v1/area/:id", wrapper.AreaServiceGetAreaById)
	router.PUT(baseURL+"/v1/area/:id", wrapper.AreaServiceUpdateArea)
	router.GET(baseURL+"/v1/areas", wrapper.AreaServiceGetAreaList)
	router.GET(baseURL+"/v1/areas/search", wrapper.AreaServiceSearchArea)
	router.GET(baseURL+"/v1/automation/statistic", wrapper.AutomationServiceGetStatistic)
	router.POST(baseURL+"/v1/backup/apply", wrapper.BackupServiceApplyState)
	router.POST(baseURL+"/v1/backup/rollback", wrapper.BackupServiceRevertState)
	router.POST(baseURL+"/v1/backup/upload", wrapper.BackupServiceUploadBackup)
	router.DELETE(baseURL+"/v1/backup/:name", wrapper.BackupServiceDeleteBackup)
	router.PUT(baseURL+"/v1/backup/:name", wrapper.BackupServiceRestoreBackup)
	router.GET(baseURL+"/v1/backups", wrapper.BackupServiceGetBackupList)
	router.POST(baseURL+"/v1/backups", wrapper.BackupServiceNewBackup)
	router.POST(baseURL+"/v1/condition", wrapper.ConditionServiceAddCondition)
	router.DELETE(baseURL+"/v1/condition/:id", wrapper.ConditionServiceDeleteCondition)
	router.GET(baseURL+"/v1/condition/:id", wrapper.ConditionServiceGetConditionById)
	router.PUT(baseURL+"/v1/condition/:id", wrapper.ConditionServiceUpdateCondition)
	router.GET(baseURL+"/v1/conditions", wrapper.ConditionServiceGetConditionList)
	router.GET(baseURL+"/v1/conditions/search", wrapper.ConditionServiceSearchCondition)
	router.POST(baseURL+"/v1/dashboard", wrapper.DashboardServiceAddDashboard)
	router.DELETE(baseURL+"/v1/dashboard/:id", wrapper.DashboardServiceDeleteDashboard)
	router.GET(baseURL+"/v1/dashboard/:id", wrapper.DashboardServiceGetDashboardById)
	router.PUT(baseURL+"/v1/dashboard/:id", wrapper.DashboardServiceUpdateDashboard)
	router.POST(baseURL+"/v1/dashboard_card", wrapper.DashboardCardServiceAddDashboardCard)
	router.POST(baseURL+"/v1/dashboard_card/import", wrapper.DashboardCardServiceImportDashboardCard)
	router.DELETE(baseURL+"/v1/dashboard_card/:id", wrapper.DashboardCardServiceDeleteDashboardCard)
	router.GET(baseURL+"/v1/dashboard_card/:id", wrapper.DashboardCardServiceGetDashboardCardById)
	router.PUT(baseURL+"/v1/dashboard_card/:id", wrapper.DashboardCardServiceUpdateDashboardCard)
	router.POST(baseURL+"/v1/dashboard_card_item", wrapper.DashboardCardItemServiceAddDashboardCardItem)
	router.DELETE(baseURL+"/v1/dashboard_card_item/:id", wrapper.DashboardCardItemServiceDeleteDashboardCardItem)
	router.GET(baseURL+"/v1/dashboard_card_item/:id", wrapper.DashboardCardItemServiceGetDashboardCardItemById)
	router.PUT(baseURL+"/v1/dashboard_card_item/:id", wrapper.DashboardCardItemServiceUpdateDashboardCardItem)
	router.GET(baseURL+"/v1/dashboard_card_items", wrapper.DashboardCardItemServiceGetDashboardCardItemList)
	router.GET(baseURL+"/v1/dashboard_cards", wrapper.DashboardCardServiceGetDashboardCardList)
	router.POST(baseURL+"/v1/dashboard_tab", wrapper.DashboardTabServiceAddDashboardTab)
	router.DELETE(baseURL+"/v1/dashboard_tab/:id", wrapper.DashboardTabServiceDeleteDashboardTab)
	router.GET(baseURL+"/v1/dashboard_tab/:id", wrapper.DashboardTabServiceGetDashboardTabById)
	router.PUT(baseURL+"/v1/dashboard_tab/:id", wrapper.DashboardTabServiceUpdateDashboardTab)
	router.GET(baseURL+"/v1/dashboard_tabs", wrapper.DashboardTabServiceGetDashboardTabList)
	router.POST(baseURL+"/v1/dashboard_tabs/import", wrapper.DashboardTabServiceImportDashboardTab)
	router.GET(baseURL+"/v1/dashboards", wrapper.DashboardServiceGetDashboardList)
	router.POST(baseURL+"/v1/dashboards/import", wrapper.DashboardServiceImportDashboard)
	router.GET(baseURL+"/v1/dashboards/search", wrapper.DashboardServiceSearchDashboard)
	router.POST(baseURL+"/v1/developer_tools/automation/call_action", wrapper.DeveloperToolsServiceCallAction)
	router.POST(baseURL+"/v1/developer_tools/automation/call_trigger", wrapper.DeveloperToolsServiceCallTrigger)
	router.GET(baseURL+"/v1/developer_tools/bus/state", wrapper.DeveloperToolsServiceGetEventBusStateList)
	router.POST(baseURL+"/v1/developer_tools/entity/reload", wrapper.DeveloperToolsServiceReloadEntity)
	router.POST(baseURL+"/v1/developer_tools/entity/set_state", wrapper.DeveloperToolsServiceEntitySetState)
	router.GET(baseURL+"/v1/entities", wrapper.EntityServiceGetEntityList)
	router.POST(baseURL+"/v1/entities/import", wrapper.EntityServiceImportEntity)
	router.GET(baseURL+"/v1/entities/statistic", wrapper.EntityServiceGetStatistic)
	router.POST(baseURL+"/v1/entity", wrapper.EntityServiceAddEntity)
	router.GET(baseURL+"/v1/entity/search", wrapper.EntityServiceSearchEntity)
	router.DELETE(baseURL+"/v1/entity/:id", wrapper.EntityServiceDeleteEntity)
	router.GET(baseURL+"/v1/entity/:id", wrapper.EntityServiceGetEntity)
	router.PUT(baseURL+"/v1/entity/:id", wrapper.EntityServiceUpdateEntity)
	router.POST(baseURL+"/v1/entity/:id/disable", wrapper.EntityServiceDisabledEntity)
	router.POST(baseURL+"/v1/entity/:id/enable", wrapper.EntityServiceEnabledEntity)
	router.GET(baseURL+"/v1/entity_storage", wrapper.EntityStorageServiceGetEntityStorageList)
	router.POST(baseURL+"/v1/image", wrapper.ImageServiceAddImage)
	router.POST(baseURL+"/v1/image/upload", wrapper.ImageServiceUploadImage)
	router.DELETE(baseURL+"/v1/image/:id", wrapper.ImageServiceDeleteImageById)
	router.GET(baseURL+"/v1/image/:id", wrapper.ImageServiceGetImageById)
	router.PUT(baseURL+"/v1/image/:id", wrapper.ImageServiceUpdateImageById)
	router.GET(baseURL+"/v1/images", wrapper.ImageServiceGetImageList)
	router.GET(baseURL+"/v1/images/filter_list", wrapper.ImageServiceGetImageFilterList)
	router.GET(baseURL+"/v1/images/filtered", wrapper.ImageServiceGetImageListByDate)
	router.POST(baseURL+"/v1/interact/entity/call_action", wrapper.InteractServiceEntityCallAction)
	router.GET(baseURL+"/v1/logs", wrapper.LogServiceGetLogList)
	router.GET(baseURL+"/v1/message_delivery", wrapper.MessageDeliveryServiceGetMessageDeliveryList)
	router.GET(baseURL+"/v1/metric", wrapper.MetricServiceGetMetric)
	router.GET(baseURL+"/v1/mqtt/client/:id", wrapper.MqttServiceGetClientById)
	router.GET(baseURL+"/v1/mqtt/clients", wrapper.MqttServiceGetClientList)
	router.GET(baseURL+"/v1/mqtt/subscriptions", wrapper.MqttServiceGetSubscriptionList)
	router.POST(baseURL+"/v1/password_reset", wrapper.AuthServicePasswordReset)
	router.DELETE(baseURL+"/v1/plugin/:name", wrapper.PluginServiceRemovePlugin)
	router.GET(baseURL+"/v1/plugin/:name", wrapper.PluginServiceGetPlugin)
	router.POST(baseURL+"/v1/plugin/:name/disable", wrapper.PluginServiceDisablePlugin)
	router.POST(baseURL+"/v1/plugin/:name/enable", wrapper.PluginServiceEnablePlugin)
	router.GET(baseURL+"/v1/plugin/:name/readme", wrapper.PluginServiceGetPluginReadme)
	router.PUT(baseURL+"/v1/plugin/:name/settings", wrapper.PluginServiceUpdatePluginSettings)
	router.GET(baseURL+"/v1/plugins", wrapper.PluginServiceGetPluginList)
	router.GET(baseURL+"/v1/plugins/search", wrapper.PluginServiceSearchPlugin)
	router.POST(baseURL+"/v1/plugins/upload", wrapper.PluginServiceUploadPlugin)
	router.POST(baseURL+"/v1/role", wrapper.RoleServiceAddRole)
	router.DELETE(baseURL+"/v1/role/:name", wrapper.RoleServiceDeleteRoleByName)
	router.GET(baseURL+"/v1/role/:name", wrapper.RoleServiceGetRoleByName)
	router.PUT(baseURL+"/v1/role/:name", wrapper.RoleServiceUpdateRoleByName)
	router.GET(baseURL+"/v1/role/:name/access_list", wrapper.RoleServiceGetRoleAccessList)
	router.PUT(baseURL+"/v1/role/:name/access_list", wrapper.RoleServiceUpdateRoleAccessList)
	router.GET(baseURL+"/v1/roles", wrapper.RoleServiceGetRoleList)
	router.GET(baseURL+"/v1/roles/search", wrapper.RoleServiceSearchRoleByName)
	router.POST(baseURL+"/v1/script", wrapper.ScriptServiceAddScript)
	router.POST(baseURL+"/v1/script/exec_src", wrapper.ScriptServiceExecSrcScriptById)
	router.DELETE(baseURL+"/v1/script/:id", wrapper.ScriptServiceDeleteScriptById)
	router.GET(baseURL+"/v1/script/:id", wrapper.ScriptServiceGetScriptById)
	router.PUT(baseURL+"/v1/script/:id", wrapper.ScriptServiceUpdateScriptById)
	router.GET(baseURL+"/v1/script/:id/compiled", wrapper.ScriptServiceGetCompiledScriptById)
	router.POST(baseURL+"/v1/script/:id/copy", wrapper.ScriptServiceCopyScriptById)
	router.POST(baseURL+"/v1/script/:id/exec", wrapper.ScriptServiceExecScriptById)
	router.GET(baseURL+"/v1/scripts", wrapper.ScriptServiceGetScriptList)
	router.GET(baseURL+"/v1/scripts/search", wrapper.ScriptServiceSearchScript)
	router.GET(baseURL+"/v1/scripts/statistic", wrapper.ScriptServiceGetStatistic)
	router.POST(baseURL+"/v1/signin", wrapper.AuthServiceSignin)
	router.POST(baseURL+"/v1/signout", wrapper.AuthServiceSignout)
	router.DELETE(baseURL+"/v1/tag/:id", wrapper.TagServiceDeleteTagById)
	router.GET(baseURL+"/v1/tag/:id", wrapper.TagServiceGetTagById)
	router.PUT(baseURL+"/v1/tag/:id", wrapper.TagServiceUpdateTagById)
	router.GET(baseURL+"/v1/tags", wrapper.TagServiceGetTagList)
	router.GET(baseURL+"/v1/tags/search", wrapper.TagServiceSearchTag)
	router.POST(baseURL+"/v1/task", wrapper.AutomationServiceAddTask)
	router.DELETE(baseURL+"/v1/task/:id", wrapper.AutomationServiceDeleteTask)
	router.GET(baseURL+"/v1/task/:id", wrapper.AutomationServiceGetTask)
	router.PUT(baseURL+"/v1/task/:id", wrapper.AutomationServiceUpdateTask)
	router.POST(baseURL+"/v1/task/:id/disable", wrapper.AutomationServiceDisableTask)
	router.POST(baseURL+"/v1/task/:id/enable", wrapper.AutomationServiceEnableTask)
	router.GET(baseURL+"/v1/tasks", wrapper.AutomationServiceGetTaskList)
	router.POST(baseURL+"/v1/tasks/import", wrapper.AutomationServiceImportTask)
	router.POST(baseURL+"/v1/trigger", wrapper.TriggerServiceAddTrigger)
	router.DELETE(baseURL+"/v1/trigger/:id", wrapper.TriggerServiceDeleteTrigger)
	router.GET(baseURL+"/v1/trigger/:id", wrapper.TriggerServiceGetTriggerById)
	router.PUT(baseURL+"/v1/trigger/:id", wrapper.TriggerServiceUpdateTrigger)
	router.GET(baseURL+"/v1/triggers", wrapper.TriggerServiceGetTriggerList)
	router.GET(baseURL+"/v1/triggers/search", wrapper.TriggerServiceSearchTrigger)
	router.POST(baseURL+"/v1/triggers/:id/disable", wrapper.TriggerServiceDisableTrigger)
	router.POST(baseURL+"/v1/triggers/:id/enable", wrapper.TriggerServiceEnableTrigger)
	router.POST(baseURL+"/v1/user", wrapper.UserServiceAddUser)
	router.DELETE(baseURL+"/v1/user/:id", wrapper.UserServiceDeleteUserById)
	router.GET(baseURL+"/v1/user/:id", wrapper.UserServiceGetUserById)
	router.PUT(baseURL+"/v1/user/:id", wrapper.UserServiceUpdateUserById)
	router.GET(baseURL+"/v1/users", wrapper.UserServiceGetUserList)
	router.POST(baseURL+"/v1/variable", wrapper.VariableServiceAddVariable)
	router.DELETE(baseURL+"/v1/variable/:name", wrapper.VariableServiceDeleteVariable)
	router.GET(baseURL+"/v1/variable/:name", wrapper.VariableServiceGetVariableByName)
	router.PUT(baseURL+"/v1/variable/:name", wrapper.VariableServiceUpdateVariable)
	router.GET(baseURL+"/v1/variables", wrapper.VariableServiceGetVariableList)
	router.GET(baseURL+"/v1/variables/search", wrapper.VariableServiceSearchVariable)
	router.GET(baseURL+"/v1/ws", wrapper.StreamServiceSubscribe)
	router.GET(baseURL+"/v1/zigbee2mqtt/bridge", wrapper.Zigbee2mqttServiceGetBridgeList)
	router.POST(baseURL+"/v1/zigbee2mqtt/bridge", wrapper.Zigbee2mqttServiceAddZigbee2mqttBridge)
	router.DELETE(baseURL+"/v1/zigbee2mqtt/bridge/:id", wrapper.Zigbee2mqttServiceDeleteBridgeById)
	router.GET(baseURL+"/v1/zigbee2mqtt/bridge/:id", wrapper.Zigbee2mqttServiceGetZigbee2mqttBridge)
	router.PUT(baseURL+"/v1/zigbee2mqtt/bridge/:id/bridge", wrapper.Zigbee2mqttServiceUpdateBridgeById)
	router.GET(baseURL+"/v1/zigbee2mqtt/bridge/:id/devices", wrapper.Zigbee2mqttServiceDeviceList)
	router.GET(baseURL+"/v1/zigbee2mqtt/bridge/:id/networkmap", wrapper.Zigbee2mqttServiceNetworkmap)
	router.POST(baseURL+"/v1/zigbee2mqtt/bridge/:id/networkmap", wrapper.Zigbee2mqttServiceUpdateNetworkmap)
	router.POST(baseURL+"/v1/zigbee2mqtt/bridge/:id/reset", wrapper.Zigbee2mqttServiceResetBridgeById)
	router.POST(baseURL+"/v1/zigbee2mqtt/device_ban", wrapper.Zigbee2mqttServiceDeviceBan)
	router.POST(baseURL+"/v1/zigbee2mqtt/device_rename", wrapper.Zigbee2mqttServiceDeviceRename)
	router.POST(baseURL+"/v1/zigbee2mqtt/device_whitelist", wrapper.Zigbee2mqttServiceDeviceWhitelist)
	router.GET(baseURL+"/v1/zigbee2mqtt/search_device", wrapper.Zigbee2mqttServiceSearchDevice)

}
