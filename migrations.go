// Code generated by go-bindata.
// sources:
// LICENSE
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _license = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x51\xcd\x8e\xa3\x38\x10\xbe\xfb\x29\x3e\xf5\xa9\x5b\x42\xbd\x3f\x87\x3d\xec\xcd\x0d\x4e\xb0\x16\xec\xc8\x38\x93\xcd\x91\x80\xd3\x78\x45\x30\xc2\xce\xf4\xe6\xed\x57\x45\xd2\x33\x3b\x73\x42\xb8\xea\xfb\x2d\x3b\x38\xd4\xd2\xa2\xf2\x9d\x9b\xa2\xc3\x73\x2d\xed\x0b\x63\x79\x98\x6f\x8b\x7f\x1f\x12\x9e\xbb\x17\xfc\xfe\xeb\x6f\x7f\x80\x8f\xee\x5f\x6c\xfc\xe8\xe7\x39\x7c\x65\x6c\xe7\x96\x8b\x8f\xd1\x87\x09\x3e\x62\x70\x8b\x3b\xdd\xf0\xbe\xb4\x53\x72\x7d\x86\xf3\xe2\x1c\xc2\x19\xdd\xd0\x2e\xef\x2e\x43\x0a\x68\xa7\x1b\x66\xb7\xc4\x30\x21\x9c\x52\xeb\x27\x3f\xbd\xa3\x45\x17\xe6\x1b\x0b\x67\xa4\xc1\x47\xc4\x70\x4e\x1f\xed\xe2\xd0\x4e\x3d\xda\x18\x43\xe7\xdb\xe4\x7a\xf4\xa1\xbb\x5e\xdc\x94\xda\x44\x7a\x67\x3f\xba\x88\xe7\x34\x38\x3c\x35\x0f\xc4\xd3\xcb\x2a\xd2\xbb\x76\x64\x7e\x02\xcd\x3e\x47\xf8\xf0\x69\x08\xd7\x84\xc5\xc5\xb4\xf8\x8e\x38\x32\xf8\xa9\x1b\xaf\x3d\x79\xf8\x1c\x8f\xfe\xe2\x1f\x0a\x04\x5f\xe3\x47\x96\x02\xae\xd1\x65\xab\xcf\x0c\x97\xd0\xfb\x33\x7d\xdd\x1a\x6b\xbe\x9e\x46\x1f\x87\x0c\xbd\x27\xea\xd3\x35\xb9\x0c\x91\x1e\xd7\x36\x33\xca\xf1\x4b\x58\x10\xdd\x38\xb2\x2e\xcc\xde\x45\xac\x59\xbf\xbb\x5b\x77\xc8\xfa\x4c\x85\xa6\x47\x45\x91\x5e\x3e\x86\x70\xf9\x31\x89\x8f\xec\x7c\x5d\x26\x1f\x07\xb7\x62\xfa\x80\x18\x56\xc5\x7f\x5c\x97\xe8\x85\xd6\xcf\x61\x1c\xc3\x07\x45\xeb\xc2\xd4\x7b\x4a\x14\xff\x64\x8c\x4e\xdd\x9e\xc2\x57\xb7\x66\xb9\x5f\x77\x0a\xc9\x77\xf7\xba\xd7\x03\xcc\xdf\xaf\xfa\x18\xc5\xa1\x1d\x47\x9c\xdc\xa3\x30\xd7\xc3\x4f\x68\xff\x17\x67\x21\xf9\x98\xda\x29\xf9\x76\xc4\x1c\x96\x55\xef\xe7\x98\xaf\x8c\xd9\x52\xa0\xd1\x1b\x7b\xe0\x46\x40\x36\xd8\x19\xfd\x45\x16\xa2\xc0\x13\x6f\x20\x9b\xa7\x0c\x07\x69\x4b\xbd\xb7\x38\x70\x63\xb8\xb2\x47\xe8\x0d\xb8\x3a\xe2\x2f\xa9\x8a\x0c\xe2\xef\x9d\x11\x4d\x03\x6d\x98\xac\x77\x95\x14\x45\x06\xa9\xf2\x6a\x5f\x48\xb5\xc5\xdb\xde\x42\x69\x8b\x4a\xd6\xd2\x8a\x02\x56\x83\x04\x1f\x54\x52\x34\x44\x56\x0b\x93\x97\x5c\x59\xfe\x26\x2b\x69\x8f\x19\xdb\x48\xab\x88\x73\xa3\x0d\x38\x76\xdc\x58\x99\xef\x2b\x6e\xb0\xdb\x9b\x9d\x6e\x04\xb8\x2a\xa0\xb4\x92\x6a\x63\xa4\xda\x8a\x5a\x28\xfb\x0a\xa9\xa0\x34\xc4\x17\xa1\x2c\x9a\x92\x57\x15\x49\x31\xbe\xb7\xa5\x36\xe4\x0f\xb9\xde\x1d\x8d\xdc\x96\x16\xa5\xae\x0a\x61\x1a\xbc\x09\x54\x92\xbf\x55\xe2\x2e\xa5\x8e\xc8\x2b\x2e\xeb\x0c\x05\xaf\xf9\x56\xac\x28\x6d\x4b\x61\x18\xad\xdd\xdd\xe1\x50\x0a\x7a\x22\x3d\xae\xc0\x73\x2b\xb5\xa2\x18\xb9\x56\xd6\xf0\xdc\x66\xb0\xda\xd8\x6f\xd0\x83\x6c\x44\x06\x6e\x64\x43\x85\x6c\x8c\xae\x33\x46\x75\xea\x0d\xad\x48\x45\x38\x25\xee\x2c\x54\x35\x7e\xb8\x88\x36\xeb\xff\xbe\x11\xdf\x08\x51\x08\x5e\x49\xb5\x6d\x08\x4c\x11\x3f\x97\x5f\xff\x0b\x00\x00\xff\xff\xee\x18\x71\xad\x37\x04\x00\x00")

func licenseBytes() ([]byte, error) {
	return bindataRead(
		_license,
		"LICENSE",
	)
}

func license() (*asset, error) {
	bytes, err := licenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "LICENSE", size: 1079, mode: os.FileMode(420), modTime: time.Unix(1485448412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"LICENSE": license,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"LICENSE": &bintree{license, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

