package local_migrations

import (
	"context"
	"encoding/json"
	"github.com/e154/smart-home/adaptors"
	"github.com/e154/smart-home/api/dto"
	"github.com/e154/smart-home/api/stub/api"
	"github.com/e154/smart-home/endpoint"
)

type MigrationEntity struct {
	adaptors *adaptors.Adaptors
	endpoint *endpoint.Endpoint
}

func NewMigrationEntity(adaptors *adaptors.Adaptors, endpoint *endpoint.Endpoint) *MigrationEntity {
	return &MigrationEntity{
		adaptors: adaptors,
		endpoint: endpoint,
	}
}

func (n *MigrationEntity) Up(ctx context.Context, adaptors *adaptors.Adaptors) error {
	if adaptors != nil {
		n.adaptors = adaptors
	}

	d := dto.NewDto()
	for _, raw := range []string{iqairEntityRaw, internetCheckEntityRaw, uptimeEntityRaw,
		cpumetricEntityRaw, memoryEntityRaw, memoryAppRaw, hddEntityRaw, logsEntityRaw,
		nodeEntityRaw, versionEntityRaw, updatedEntityRaw} {
		req := &api.Entity{}
		_ = json.Unmarshal([]byte(raw), req)
		entity := d.Entity.ImportEntity(req)
		if err := n.endpoint.Entity.Import(ctx, entity); err != nil {
			return err
		}
	}

	return nil
}

const (
	iqairEntityRaw         = `{"plugin_name":"sensor","description":"","auto_load":true,"actions":[{"name":"CHECK","description":"","script":{"id":"99","lang":"coffeescript","name":"api_iqair","source":"# entity\n# ##################################\ncheckStatus =->\n    entity = entityManager.getEntity(ENTITY_ID)\n    s = entity.getSettings()\n    res = http.get(\"https://api.airvisual.com/v2/nearest_city?key=\"+s['apikey'])\n    if res.error \n        Actor.setState\n            new_state: 'NOT_CONNECTED'\n            storage_save: true\n        return\n\t\n\n    p = JSON.parse(res.body)\n    attrs =\n        ts: p.data.current.pollution.ts\n        aqius: p.data.current.pollution.aqius\n        mainus: p.data.current.pollution.mainus\n        aqicn: p.data.current.pollution.aqicn\n        maincn: p.data.current.pollution.maincn\n      \n    Actor.setState\n        new_state: 'CONNECTED'\n        attribute_values: attrs\n        storage_save: true\n        \nentityAction = (entityId, actionName)->\n    switch actionName\n        when 'CHECK' then checkStatus()\n\n# automation\n# ##################################\nautomationTriggerTime = (msg)->\n    #print 'trigger time ->'\n    #entityManager.callAction(msg.entity_id, 'CHECK', {})\n    return false\n  \nmain =->\n\n\n\n\n\n\n\n\n\n\n\n","description":"","scriptInfo":{"alexaIntents":0,"entityActions":0,"entityScripts":0,"automationTriggers":0,"automationConditions":0,"automationActions":0},"created_at":"2022-10-05T07:19:32.131925Z","updated_at":"2023-01-03T06:59:00.321577Z"},"type":""}],"metrics":[],"states":[{"name":"CONNECTED","description":"","style":""},{"name":"NOT_CONNECTED","description":"","style":""}],"scripts":[],"attributes":{"aqicn":{"name":"aqicn","type":"INT","int":"22","array":[],"map":{}},"aqius":{"name":"aqius","type":"INT","int":"58","array":[],"map":{}},"maincn":{"name":"maincn","type":"STRING","string":"p2","array":[],"map":{}},"mainus":{"name":"mainus","type":"STRING","string":"p2","array":[],"map":{}},"ts":{"name":"ts","type":"TIME","array":[],"map":{},"time":"2023-06-17T21:00:00Z"}},"settings":{"apikey":{"name":"apikey","type":"STRING","string":"ad63cab8-1cac-4629-af19-92f4e9c4bc02","array":[],"map":{}}},"id":"sensor.iqair","name":"sensor.iqair"}`
	internetCheckEntityRaw = `{"plugin_name":"sensor","description":"","auto_load":true,"actions":[{"name":"CHECK","description":"","script":{"id":"15","lang":"coffeescript","name":"internet_check","source":"\"use strict\";\n\nlastPing = null\n\n# entity\n# ##################################\ncheckStatus =(s)->   \n    res = http.get(s.host || \"https://google.com\")\n    if res.error \n        Actor.setState\n            new_state: 'NOT_CONNECTED'\n            storage_save: true\n        return\n\n    Actor.setState\n        new_state: 'CONNECTED'\n        storage_save: true\n\nping =(s)->\n  r = ExecuteSync 'ping', '-c', '1', s.ping_host || \"google.com\"\n  if r.err\n    #console.error \"Ошибка при выполнении команды ping: #{r.err}\"\n    return\n  pingIndex = r.out.indexOf('time=')\n\n  dir = 'up'\n  pingDifference = 0\n    \n  if pingIndex != -1\n    pingEndIndex = r.out.indexOf(' ms', pingIndex)\n    if pingEndIndex != -1\n      pingTime = parseFloat(r.out.substring(pingIndex + 5, pingEndIndex))\n      if lastPing\n        pingDifference = pingTime - lastPing\n        if lastPing > pingTime\n          dir = 'down'\n          #console.log \"Текущий пинг: #{pingTime} мс, разница с предыдущим пингом: #{pingDifference} мс\"\n      else\n        #console.log \"Текущий пинг: #{pingTime} мс\"\n      lastPing = pingTime\n  #else\n    #console.log 'Не удалось получить пинг'\n  \n  attrs =\n    ping: pingTime\n    dir: dir\n    diff: pingDifference\n  \n  # update storage if need\n  Actor.setState\n    attribute_values: attrs\n    storage_save: false\n\nentityAction = (entityId, actionName)->\n    entity = entityManager.getEntity(ENTITY_ID)\n    s = entity.getSettings()\n    switch actionName\n        when 'CHECK' then checkStatus(s)\n        when 'PING' then ping(s)\n\n# automation\n# ##################################\nautomationTriggerTime = (msg)->\n    entityManager.callAction(msg.entity_id, 'CHECK', {})\n    entityManager.callAction(msg.entity_id, 'PING', {})\n    return false\n","description":"","scriptInfo":{"alexaIntents":0,"entityActions":0,"entityScripts":0,"automationTriggers":0,"automationConditions":0,"automationActions":0},"created_at":"2022-05-22T03:14:20.913408Z","updated_at":"2023-06-20T15:07:53.609369Z"},"type":""},{"name":"PING","description":"","script":{"id":"15","lang":"coffeescript","name":"internet_check","source":"\"use strict\";\n\nlastPing = null\n\n# entity\n# ##################################\ncheckStatus =(s)->   \n    res = http.get(s.host || \"https://google.com\")\n    if res.error \n        Actor.setState\n            new_state: 'NOT_CONNECTED'\n            storage_save: true\n        return\n\n    Actor.setState\n        new_state: 'CONNECTED'\n        storage_save: true\n\nping =(s)->\n  r = ExecuteSync 'ping', '-c', '1', s.ping_host || \"google.com\"\n  if r.err\n    #console.error \"Ошибка при выполнении команды ping: #{r.err}\"\n    return\n  pingIndex = r.out.indexOf('time=')\n\n  dir = 'up'\n  pingDifference = 0\n    \n  if pingIndex != -1\n    pingEndIndex = r.out.indexOf(' ms', pingIndex)\n    if pingEndIndex != -1\n      pingTime = parseFloat(r.out.substring(pingIndex + 5, pingEndIndex))\n      if lastPing\n        pingDifference = pingTime - lastPing\n        if lastPing > pingTime\n          dir = 'down'\n          #console.log \"Текущий пинг: #{pingTime} мс, разница с предыдущим пингом: #{pingDifference} мс\"\n      else\n        #console.log \"Текущий пинг: #{pingTime} мс\"\n      lastPing = pingTime\n  #else\n    #console.log 'Не удалось получить пинг'\n  \n  attrs =\n    ping: pingTime\n    dir: dir\n    diff: pingDifference\n  \n  # update storage if need\n  Actor.setState\n    attribute_values: attrs\n    storage_save: false\n\nentityAction = (entityId, actionName)->\n    entity = entityManager.getEntity(ENTITY_ID)\n    s = entity.getSettings()\n    switch actionName\n        when 'CHECK' then checkStatus(s)\n        when 'PING' then ping(s)\n\n# automation\n# ##################################\nautomationTriggerTime = (msg)->\n    entityManager.callAction(msg.entity_id, 'CHECK', {})\n    entityManager.callAction(msg.entity_id, 'PING', {})\n    return false\n","description":"","scriptInfo":{"alexaIntents":0,"entityActions":0,"entityScripts":0,"automationTriggers":0,"automationConditions":0,"automationActions":0},"created_at":"2022-05-22T03:14:20.913408Z","updated_at":"2023-06-20T15:07:53.609369Z"},"type":""}],"metrics":[],"states":[{"name":"CONNECTED","description":"connected","style":""},{"name":"NOT_CONNECTED","description":"not connected","style":""}],"scripts":[],"attributes":{"diff":{"name":"diff","type":"FLOAT","float":101.326,"array":[],"map":{}},"dir":{"name":"dir","type":"STRING","string":"up","array":[],"map":{}},"ping":{"name":"ping","type":"FLOAT","float":179.373,"array":[],"map":{}}},"settings":{"host":{"name":"host","type":"STRING","string":"https://google.com","array":[],"map":{}},"ping_host":{"name":"ping_host","type":"STRING","string":"google.com","array":[],"map":{}}},"id":"sensor.intermet_checker","name":"sensor.intermet_checker"}`
	uptimeEntityRaw        = `{"plugin_name":"uptime","description":"","autoLoad":false,"actions":[],"metrics":[],"states":[],"scripts":[],"attributes":{"app_started":{"name":"app_started","type":"TIME","array":[],"map":{},"time":"0001-01-01T00:00:00Z"},"total":{"name":"total","type":"INT","int":"0","array":[],"map":{}}},"settings":{},"id":"uptime.uptime","name":"uptime"}`
	cpumetricEntityRaw     = `{"plugin_name":"cpuspeed","description":"","auto_load":false,"actions":[],"metrics":[{"id":"3","name":"cpuspeed","description":"Cpu metric","options":{"items":[{"name":"all","description":"","color":"#C2C2C2","translate":"all","label":"GHz"}]},"data":[],"type":"line","ranges":["1h","6h","12h","24h","7d","30d"],"createdAt":"2022-08-03T19:06:35.272992Z","updatedAt":"2022-08-15T04:19:30.973653Z"}],"states":[],"scripts":[],"attributes":{"all":{"name":"all","type":"FLOAT","float":0,"array":[],"map":{}},"cores":{"name":"cores","type":"INT","int":"0","array":[],"map":{}},"load_max":{"name":"load_max","type":"FLOAT","float":0,"array":[],"map":{}},"load_min":{"name":"load_min","type":"FLOAT","float":0,"array":[],"map":{}},"mhz":{"name":"mhz","type":"FLOAT","float":0,"array":[],"map":{}}},"settings":{},"id":"cpuspeed.cpuspeed","name":"cpuspeed"}`
	memoryEntityRaw        = `{"plugin_name":"memory","description":"","auto_load":false,"actions":[],"metrics":[{"id":"1","name":"memory","description":"RAM metric","options":{"items":[{"name":"used_percent","description":"","color":"#C2C2C2","translate":"used_percent","label":"%"}]},"data":[],"type":"line","ranges":["1h","6h","12h","24h","7d","30d"],"createdAt":"2022-08-03T19:04:43.730912Z","updatedAt":"2022-08-15T04:19:47.591003Z"}],"states":[],"scripts":[],"attributes":{"free":{"name":"free","type":"INT","int":"0","array":[],"map":{}},"total":{"name":"total","type":"INT","int":"0","array":[],"map":{}},"used_percent":{"name":"used_percent","type":"FLOAT","float":0,"array":[],"map":{}}},"settings":{},"id":"memory.memory","name":"memory"}`
	memoryAppRaw           = `{"plugin_name":"memory_app","description":"","auto_load":false,"actions":[],"metrics":[{"id":"2","name":"memory_app","description":"App metric","options":{"items":[{"name":"alloc","description":"","color":"#C2C2C2","translate":"alloc","label":"%"}]},"data":[],"type":"line","ranges":["1h","6h","12h","24h","7d","30d"],"createdAt":"2022-08-03T19:04:43.804366Z","updatedAt":"2022-08-15T04:18:45.335073Z"}],"states":[],"scripts":[],"attributes":{"alloc":{"name":"alloc","type":"INT","int":"0","array":[],"map":{}},"heap_alloc":{"name":"heap_alloc","type":"INT","int":"0","array":[],"map":{}},"last_gc":{"name":"last_gc","type":"INT","int":"0","array":[],"map":{}},"num_gc":{"name":"num_gc","type":"INT","int":"0","array":[],"map":{}},"sys":{"name":"sys","type":"INT","int":"0","array":[],"map":{}},"total_alloc":{"name":"total_alloc","type":"INT","int":"0","array":[],"map":{}}},"settings":{},"id":"memory_app.memory_app","name":"memory_app"}`
	hddEntityRaw           = `{"plugin_name":"hdd","description":"","auto_load":true,"actions":[],"metrics":[{"id":"4","name":"new metric 0","description":"","options":{"items":[{"name":"used_percent","description":"used percent","color":"#C2C2C2","translate":"","label":"%"}]},"data":[],"type":"LINE","ranges":["1h","6h","12h","24h","7d","30d"],"createdAt":"2022-08-15T04:13:55.525127Z","updatedAt":"2022-08-15T04:19:08.870160Z"}],"states":[],"scripts":[],"attributes":{"free":{"name":"free","type":"INT","int":"0","array":[],"map":{}},"fstype":{"name":"fstype","type":"STRING","string":"","array":[],"map":{}},"inodes_free":{"name":"inodes_free","type":"INT","int":"0","array":[],"map":{}},"inodes_sed_percent":{"name":"inodes_sed_percent","type":"FLOAT","float":0,"array":[],"map":{}},"inodes_total":{"name":"inodes_total","type":"INT","int":"0","array":[],"map":{}},"inodes_used":{"name":"inodes_used","type":"INT","int":"0","array":[],"map":{}},"path":{"name":"path","type":"STRING","string":"","array":[],"map":{}},"total":{"name":"total","type":"INT","int":"0","array":[],"map":{}},"used":{"name":"used","type":"INT","int":"0","array":[],"map":{}},"used_percent":{"name":"used_percent","type":"FLOAT","float":0,"array":[],"map":{}}},"settings":{"mount_point":{"name":"mount_point","type":"STRING","string":"/","array":[],"map":{}}},"id":"hdd.hdd1","name":"hdd1"}`
	logsEntityRaw          = `{"plugin_name":"logs","description":"","auto_load":false,"actions":[],"metrics":[],"states":[],"scripts":[],"attributes":{"err_today":{"name":"err_today","type":"INT","int":"3","array":[],"map":{}},"err_total":{"name":"err_total","type":"INT","int":"3833","array":[],"map":{}},"err_yesterday":{"name":"err_yesterday","type":"INT","int":"9","array":[],"map":{}},"warn_today":{"name":"warn_today","type":"INT","int":"19","array":[],"map":{}},"warn_total":{"name":"warn_total","type":"INT","int":"11583","array":[],"map":{}},"warn_yesterday":{"name":"warn_yesterday","type":"INT","int":"37","array":[],"map":{}}},"settings":{},"id":"logs.logs","name":"logs"}`
	nodeEntityRaw          = `{"plugin_name":"node","description":"","auto_load":true,"actions":[],"metrics":[],"states":[{"name":"connected","description":"Connected","icon":"","style":""},{"name":"error","description":"Error","icon":"","style":""},{"name":"wait","description":"Wait","icon":"","style":""}],"scripts":[],"attributes":{"latency":{"name":"latency","type":"INT","int":"0","array":[],"map":{}},"max":{"name":"max","type":"INT","int":"0","array":[],"map":{}},"min":{"name":"min","type":"INT","int":"0","array":[],"map":{}},"rps":{"name":"rps","type":"INT","int":"0","array":[],"map":{}},"started_at":{"name":"started_at","type":"INT","int":"0","array":[],"map":{}},"thread":{"name":"thread","type":"INT","int":"0","array":[],"map":{}}},"settings":{"node_login":{"name":"node_login","type":"STRING","string":"","array":[],"map":{}},"node_pass":{"name":"node_pass","type":"STRING","string":"","array":[],"map":{}}},"id":"node.node1","name":"node1"}`
	versionEntityRaw       = `{"plugin_name":"version","description":"","auto_load":false,"actions":[],"metrics":[],"states":[],"scripts":[],"attributes":{"build_num":{"name":"build_num","type":"STRING","string":"","array":[],"map":{}},"developers":{"name":"developers","type":"STRING","string":"","array":[],"map":{}},"docker_image":{"name":"docker_image","type":"STRING","string":"","array":[],"map":{}},"generated":{"name":"generated","type":"STRING","string":"","array":[],"map":{}},"go_version":{"name":"go_version","type":"STRING","string":"","array":[],"map":{}},"revision":{"name":"revision","type":"STRING","string":"","array":[],"map":{}},"revision_url":{"name":"revision_url","type":"STRING","string":"","array":[],"map":{}},"version":{"name":"version","type":"STRING","string":"","array":[],"map":{}}},"settings":{},"id":"version.version","name":"version"}`
	updatedEntityRaw       = `{"plugin_name":"updater","description":"","auto_load":false,"actions":[],"metrics":[],"states":[],"scripts":[],"attributes":{"last_check":{"name":"last_check","type":"TIME","array":[],"map":{},"time":"0001-01-01T00:00:00Z"},"latest_download_url":{"name":"latest_download_url","type":"STRING","string":"","array":[],"map":{}},"latest_version":{"name":"latest_version","type":"STRING","string":"","array":[],"map":{}},"latest_version_time":{"name":"latest_version_time","type":"TIME","array":[],"map":{},"time":"0001-01-01T00:00:00Z"}},"settings":{},"id":"updater.updater","name":"updater"}`
)
