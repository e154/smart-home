// Code generated by go-bindata.
// sources:
// migrations/20170121_004649_nodes.sql
// migrations/20170121_005244_workflows.sql
// migrations/20181109_220911_workflow_add_scenario.sql
// migrations/20181113_013141_workflow_elements.sql
// migrations/20181114_214137_devices.sql
// migrations/20181114_225604_device_group.sql
// migrations/20181119_092050_add_workers.sql
// DO NOT EDIT!

package database

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20170121_004649_nodesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xbd\x6e\xdb\x30\x18\xdc\xf9\x14\xb7\xc9\x41\xed\x25\x40\xa6\x4c\xaa\xa5\x00\x06\x04\xb9\x89\xa5\x22\x9b\x40\x8b\x1f\xe2\x0f\x96\x48\x96\xa4\xe0\xb8\x4f\x5f\xd0\x52\x5c\xdb\x2d\xd0\x86\x93\x7e\xee\x87\xb8\xbb\xc5\x02\x5f\x7a\x7e\x73\x32\x10\x6a\x2b\x16\x0b\x6c\x9e\x0b\xb0\x86\xa7\x36\xb0\xd1\x48\x6a\x9b\x80\x3d\xe8\x9d\xda\x21\x90\xc2\x61\x47\x1a\x61\xc7\x1e\x23\x2f\x82\xd8\x43\x5a\xdb\x31\x29\xd1\x3a\x8a\x5a\xe1\x68\x09\xda\x28\xf2\x8d\x0f\x32\x0c\x1e\xd2\x83\xf4\xd0\x63\x96\x90\x96\xdb\x8e\x54\x32\x47\xa2\xd8\x8f\xcf\x77\x8f\x42\x2c\x5f\xf2\xb4\xca\x51\xa5\x5f\x8b\x7c\xe4\x62\x26\x00\x56\x38\x9f\x2d\xbf\x79\x72\x2c\x3b\xdc\x1c\x6d\x02\xf4\xd0\x75\x68\x8d\xf6\xc1\x49\xd6\x61\xb2\xb7\x7b\x3a\xc2\x3a\xee\xa5\x3b\x62\x4f\xc7\x79\x94\xb4\xbf\x99\xdf\xa5\x5b\xee\xa4\x9b\xdd\x3f\x3c\xdc\x5d\x49\x96\xeb\x0a\x65\x5d\x14\x91\x60\x8d\x0b\x67\xab\xa1\x27\xc7\xed\xed\x0d\xae\x09\x5a\xf6\xf4\x29\x07\x45\xbe\x75\x6c\x4f\x71\x56\xf4\x1e\xfe\x94\xbf\x21\x8c\x41\xab\x46\x06\x20\x70\x4f\x3e\xc8\xde\xe2\xc0\x61\x77\x7a\xc5\x4f\xa3\x29\xe2\x06\xab\xfe\x89\x3b\x45\x17\xc1\x53\x57\x53\xa4\x17\xed\xfd\xed\x16\xc8\xf2\xa7\xb4\x2e\x2a\x9c\x1b\x15\x17\x35\xd6\xe5\xea\xb9\xce\xb1\x2a\xb3\xfc\xf5\x94\x5f\xc3\xb6\xb9\x6f\x46\xd5\x41\xff\x10\xc0\xba\xfc\xa8\x39\xfe\x9f\x83\x6d\xe4\x5f\x4e\x32\x33\x07\xfd\x31\xca\xf3\x22\xe3\xc7\xff\xda\xa4\x33\x5d\x47\x0a\x5b\xd9\xee\x45\xf6\xb2\xfe\x36\x4d\x6b\xf5\x84\xfc\x75\xb5\xa9\x36\x93\xfb\x32\xdd\x2c\xd3\x2c\x7f\x14\xbf\x02\x00\x00\xff\xff\x93\x5e\x11\x77\x0d\x03\x00\x00")

func migrations20170121_004649_nodesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20170121_004649_nodesSql,
		"migrations/20170121_004649_nodes.sql",
	)
}

func migrations20170121_004649_nodesSql() (*asset, error) {
	bytes, err := migrations20170121_004649_nodesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20170121_004649_nodes.sql", size: 781, mode: os.FileMode(420), modTime: time.Unix(1541524621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20170121_005244_workflowsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x51\x6f\xda\x30\x10\x7e\xcf\xaf\xb8\x37\xa8\x56\x5e\x2a\xf5\xa9\x4f\x14\xd2\x09\x09\x85\x15\xc2\xd4\xb7\xc8\xc4\x07\x78\x24\x76\x66\x3b\xa3\xec\xd7\x4f\x86\x60\x1c\x62\x68\x98\xa6\x6a\xf7\x84\xed\xfb\x9c\xbb\xef\xbb\x33\xd7\xeb\xc1\x97\x9c\xad\x24\xd1\x08\xf3\x22\xe8\xf5\x60\xf6\x3a\x06\xc6\x41\x61\xaa\x99\xe0\xd0\x99\x17\x1d\x60\x0a\xf0\x1d\xd3\x52\x23\x85\xed\x1a\x39\xe8\x35\x53\x70\xc0\x19\x27\xa6\x80\x14\x45\xc6\x90\x06\xa9\x44\x73\x97\xde\x15\x08\x2a\x95\xac\xd0\x2a\xc9\x08\x5f\x01\x51\x80\xbc\xcc\xa1\xdb\xd1\xaa\x73\x0f\x9d\x54\x2c\x97\x88\x07\x17\xb3\xfe\x41\x7e\x91\x6a\x75\xf7\x14\x04\x83\x69\xd8\x8f\x43\x88\xfb\xcf\xe3\xf0\x78\x11\x74\x03\x00\x46\xc1\xda\x82\xad\x14\x4a\x46\x32\xe0\x42\x03\x2f\xb3\x0c\x52\xc1\x95\x96\x84\x71\x6d\x3f\x5f\x6c\x70\x07\x85\x64\x39\x91\x3b\xd8\xe0\xee\x3e\x00\xd8\x87\x54\x59\x2d\xcc\x68\x12\x43\x34\x1f\x8f\x61\x18\xbe\xf4\xe7\xe3\xb8\x16\x98\x41\x72\x92\xe3\x11\xf9\x9d\xc8\xc1\x9a\xc8\xee\xc3\xe3\xe3\x9d\x45\x1a\x27\x25\x4a\x99\x56\x6e\x31\xbe\x6b\x7b\x40\xab\x8c\x0d\x6b\xb5\x83\x54\xe4\x05\xcb\x90\x36\x10\x07\x42\x69\x42\x34\x80\x66\x39\x2a\x4d\xf2\x02\xb6\x4c\xaf\xf7\x4b\xf8\x2d\x38\xda\xf4\x0d\xa0\x2c\xa8\x05\x7c\x8c\x08\x0c\xd9\xae\x68\x5b\x21\x37\xcb\x4c\x6c\x55\xa2\x34\xd1\xa5\x72\x84\x43\x4e\x16\x19\x52\xa3\x16\x65\xea\xf0\xbb\xa1\x95\xc5\x37\xd4\xf2\xc8\x76\x66\x3e\x15\x4f\xf1\xf8\x74\x74\xd5\x00\xaf\x2c\xae\xd5\x24\x3a\x64\x57\xb7\x46\xf2\xe7\xc8\x53\x59\x58\x32\xce\x54\xb5\xb6\x57\xd1\x67\x3e\x65\xad\xdd\x2e\x71\x7b\x68\x70\x51\xac\x44\xa5\xc8\x89\x64\xe2\x5a\x8f\xdd\x20\xd6\xe9\x3e\xaf\x6a\xd6\x8d\x51\x78\x1e\x7d\x1d\x45\x31\x0c\x26\xd1\x2c\x9e\xf6\xcd\x4f\xcf\x25\x0f\xc9\x49\x99\xe5\x06\xa6\xe1\x4b\x38\x0d\xa3\x41\x38\x73\xcb\x8d\xd1\x3b\x10\xbc\x22\x07\x52\xa2\x52\x42\xd1\xec\x50\xcc\xf0\xb4\x73\xb5\x89\x2f\x56\xcb\x4e\x69\xcc\x93\x3d\xae\x15\xe0\x33\xda\xb6\x92\x72\x1e\x8d\x5e\xe7\x21\x8c\xa2\x61\xf8\xe6\x06\xea\xb0\xe6\x50\x59\xf2\x9f\x01\xc0\x24\xf2\x6a\xef\xa0\x3f\xae\x95\xe4\xd2\xb3\xec\xa9\x9d\x56\xc5\x92\x5c\x7b\xb1\x9b\xde\xff\xae\x78\x5c\x0a\x6e\xa8\xa2\x43\xb8\x49\x3d\xf5\x66\x48\x95\x9b\x1b\xd0\x31\xd1\x7a\x38\x96\xcf\x96\x31\xec\x8b\xa0\xd7\xbb\x28\xd3\xdf\xfc\x69\x9e\xc3\xff\xcf\xfe\x75\x99\xff\x44\xc2\xf7\xb9\x23\x5b\xad\xab\x77\xd7\x10\x56\x6f\xfd\x8b\x7d\x79\xd6\x90\x9e\x3e\x54\xd0\x3d\xf6\x9d\x3b\x95\x0d\xc5\x96\x1f\xe7\x32\x3b\x94\x99\xcd\x56\x63\x99\x14\x99\x19\x2a\x16\x24\xdd\x04\xc3\xe9\xe4\x5b\x55\x24\xa3\x17\x08\xdf\x46\xb3\xd8\xe5\x7f\xd0\x9f\x0d\xfa\xc3\xf0\xe9\xba\x9f\x2d\xab\xd6\xee\xc7\xce\xba\x11\xd0\xf2\x43\x0d\x2f\x2a\x45\xe1\x9f\x64\xdc\x33\x77\xe6\x7b\xfa\x13\x00\x00\xff\xff\xc6\x9f\xc2\x11\x05\x0b\x00\x00")

func migrations20170121_005244_workflowsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20170121_005244_workflowsSql,
		"migrations/20170121_005244_workflows.sql",
	)
}

func migrations20170121_005244_workflowsSql() (*asset, error) {
	bytes, err := migrations20170121_005244_workflowsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20170121_005244_workflows.sql", size: 2821, mode: os.FileMode(420), modTime: time.Unix(1541688016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20181109_220911_workflow_add_scenarioSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3f\x6b\xc3\x30\x10\xc5\x77\x7d\x8a\xb7\xa5\xa5\xb8\x43\xd7\x4e\x8e\xad\x96\x80\xeb\x50\xff\x99\x8d\x2c\x5d\x1a\x61\x45\x12\x92\x8c\xfb\xf1\x8b\x29\x49\x0a\xc9\xd0\xed\xf8\xf1\xde\x71\xf7\xcb\x32\x3c\x9d\xf4\x57\x10\x89\xd0\x7b\x96\x65\x68\x3f\x2b\x68\x8b\x48\x32\x69\x67\xb1\xe9\xfd\x06\x3a\x82\xbe\x49\xce\x89\x14\x96\x23\x59\xa4\xa3\x8e\xf8\xed\xad\x21\x1d\x21\xbc\x37\x9a\x14\xcb\xab\x8e\x37\xe8\xf2\x6d\xc5\xe1\xe7\xd1\x68\xf9\xbc\xb8\x30\x1d\x8c\x5b\x22\x03\xf2\xb2\x44\xb1\xaf\xfa\x8f\x1a\x67\x3c\x44\x49\x56\x04\xed\x06\xad\xb0\xdd\xbd\xef\xea\x0e\xc5\xbe\x6e\xbb\x26\x5f\xc7\x4b\xec\x65\xb8\x69\xc4\xe1\x30\xa1\xe1\x6f\xbc\xe1\x75\xc1\xdb\xdb\x95\x11\x0f\x5a\x3d\xc2\x59\xcc\x5e\xad\x3f\x4a\x11\xa5\x50\xb4\x12\x45\x86\xae\xe4\x95\xb1\xbf\x2e\x4a\xb7\xd8\xb3\x8d\x8b\x8a\x15\xfe\x4b\x46\x70\xc6\x90\xc2\x28\xe4\xc4\x84\x49\x14\x90\xc4\x68\xe8\x9e\x10\x15\x9c\x87\x74\x66\x3e\xd9\xfb\x46\xae\xf7\xfd\x04\x00\x00\xff\xff\x4a\xae\xf8\x19\xac\x01\x00\x00")

func migrations20181109_220911_workflow_add_scenarioSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20181109_220911_workflow_add_scenarioSql,
		"migrations/20181109_220911_workflow_add_scenario.sql",
	)
}

func migrations20181109_220911_workflow_add_scenarioSql() (*asset, error) {
	bytes, err := migrations20181109_220911_workflow_add_scenarioSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20181109_220911_workflow_add_scenario.sql", size: 428, mode: os.FileMode(420), modTime: time.Unix(1541776428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20181113_013141_workflow_elementsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xc1\x6e\xe3\x36\x10\x86\xef\x7a\x8a\xb9\x39\x41\x37\x97\x00\x7b\xf2\xc9\xb1\x99\xad\x5a\xaf\xbc\x6b\xc9\x45\xf6\x24\x30\xe2\xc4\x26\x2c\x91\x2a\x49\xc1\x71\x8b\xbe\x7b\x41\xc9\x92\x25\x59\x5e\x3b\x40\x76\xdb\x03\xbf\x4b\x1c\x72\xc8\x19\x8d\x86\x00\x29\xfe\x77\x77\xf0\x4b\xc6\xd7\x8a\x1a\x84\x55\xee\xdd\xdd\x41\xf8\x75\x0e\x5c\x80\xc6\xc4\x70\x29\x60\xb4\xca\x47\xc0\x35\xe0\x2b\x26\x85\x41\x06\xbb\x0d\x0a\x30\x1b\xae\xa1\x1a\x67\x8d\xb8\x06\x9a\xe7\x29\x47\xe6\x4d\x97\x64\x12\x11\x20\x4f\x11\x09\x42\x7f\x11\x40\xbe\x4e\xd4\x3e\x37\x72\xec\x85\x64\x4e\xa6\x11\xac\x51\xc4\x8a\x0a\x26\xb3\xb8\x28\x38\xbb\xb9\x1d\x7b\x89\x42\x1b\x80\xd9\xe7\x08\x2f\xa9\xdc\xe9\x58\x1b\x6a\x0a\x0d\x54\x03\x8a\x22\x83\x9b\x11\x0a\xfa\x9c\x22\x1b\x7d\x80\x11\xe3\xba\xfa\x7d\x3b\xf6\x6a\x7f\xd1\xe4\x61\x4e\xaa\xb1\x70\xe3\x01\x70\x06\xa7\x3c\xf3\xb5\x46\xc5\x69\xda\xef\x10\xd2\x80\x28\xd2\x14\x12\x29\xb4\x51\x94\x0b\x73\x88\x23\xdf\xe2\x1e\x72\xc5\x33\xaa\xf6\xb0\xc5\xfd\x07\x0f\x40\xd0\x0c\x4f\xe6\xfe\x83\xaa\xe9\x86\xaa\x9b\xfb\x8f\x1f\x6f\x3b\x1d\xc1\x22\x82\x60\x35\x9f\xdb\x91\x0c\x75\xa2\x78\x5e\xe6\xac\x21\xc2\x57\x33\x10\x2c\x34\xa3\x0e\xb9\xe8\xd2\x49\xd3\x90\x3f\x98\x91\xc7\xc9\x6a\x1e\xc1\x31\x75\x1e\xc0\x4e\xaa\xad\x1d\x1a\xb7\x13\xf4\xe0\x7f\xf2\x83\x08\xa6\x8b\x20\x8c\x96\x13\xfb\xb3\x9a\xfd\x3e\xae\xcd\x75\xfc\xb2\x85\x25\x79\x24\x4b\x12\x4c\x49\xd8\x4c\xa3\xe1\x86\xb3\x5b\x90\x02\x8a\x9c\xd9\x57\x98\x50\x9d\x50\x86\xb6\x85\x61\x8a\xc7\x96\x8e\x73\x9d\xa0\xa0\x8a\x4b\x1b\xc5\x65\xe7\x8d\xf9\xb9\x28\x8e\x06\x6f\x0a\xa7\xaa\x3a\x16\xd3\x76\xfa\x0d\xcf\x50\x1b\x9a\xe5\xb0\xe3\x66\x53\xfe\x0b\x7f\x49\x51\x0e\xa8\x26\xbd\x72\x40\x59\x50\x9e\x2d\xd1\x7e\x75\xc7\x98\x62\x86\xc2\x5c\x5f\xe5\xe7\x67\xc8\x95\x34\xd2\xb6\xc7\x65\xe7\x71\x26\x86\x2f\xb4\x48\x8d\x9d\xe9\x33\x6a\x4d\xd7\xf8\x2b\x15\x2c\x45\xd5\x6a\x21\x19\x37\xa6\x6a\x89\xa8\xde\xda\xbf\x9f\xa8\xc1\x1d\xdd\xdb\x9f\x8f\xa9\xdc\x0d\x2f\xb1\xc6\x7d\xb9\xd4\xec\x22\x6e\xe5\x63\xb5\xf2\x67\xf0\x65\xe9\x7f\x9e\x2c\xbf\xc1\xef\xe4\xdb\x60\x69\x3b\x1c\x0e\x87\xc3\xe1\x70\xfc\x0f\xa8\xb7\xcb\x27\xc7\x93\x81\x2d\xff\xd9\xcd\xfe\x7b\xf3\x9d\xc3\x43\xe7\xd8\x70\xe6\xa8\x30\xb8\xdb\x6c\x0e\x3b\x0e\x87\xc3\xe1\x70\x38\x1c\x3f\x8d\xc1\x2f\x93\x6b\x45\xf3\x4d\xac\xd1\x18\x2e\xd6\x1a\x7e\x0b\x17\xc1\xc3\x7f\x1d\xa8\xc3\xe1\x70\x38\x1c\x0e\x07\xc0\xe1\x5a\x0d\x46\x7f\xff\x53\xee\x5a\xca\x2f\x2c\x29\x17\xdb\xaa\x5b\x14\x19\x2a\x9e\x74\xc7\xd4\x1f\x67\x7a\x77\x75\xdf\xbd\xc8\x73\x1f\x69\x1c\x0e\x87\xc3\xe1\x70\xfc\x3c\x9a\x1d\x4e\xa3\x20\xaa\xb7\x39\x47\x99\xcf\xb0\x66\xeb\xb8\x99\xb9\x8f\x87\x44\x63\x6f\x17\x8c\x55\x17\x5e\x8d\xe3\xcb\x6e\xab\x01\x7d\xc7\x87\xd6\xab\x5d\x37\x3b\xb6\x9e\x42\xec\x0d\xda\xb0\xb3\xaa\xb0\xf7\xc6\x86\xea\xb5\x54\x5a\xab\xc0\xff\xba\x22\xe0\x07\x33\xf2\x54\x4a\xb3\x0e\x2f\xe3\x98\xa5\x42\xfc\xe9\x01\x2c\x82\xbe\x94\xcb\x1a\x9f\xc8\xbd\x12\x29\x44\xa5\x04\xbd\x4e\xec\x75\xf9\x16\xf5\x8a\xbb\xd3\x3a\xfd\x87\xd8\xe2\x17\x25\xb3\xca\x55\xeb\xd5\xb7\x22\x2b\x0d\x4e\x9e\xf3\xb4\xf8\xfa\x0f\x7b\x6d\x19\xd6\x71\x18\x59\x3f\xf2\x99\x38\x8c\xfc\x81\x51\x74\xd6\xe0\xe9\x52\x68\xc7\xf1\x5e\xeb\xef\xd2\x37\xd9\xfe\x69\x28\x97\xbc\x7e\x5d\x16\x9d\xd1\x34\xe5\xc2\x74\xae\xb1\x2b\x9b\x32\x95\x67\x6d\x18\x57\x07\xf9\x71\x49\xa7\x64\xda\x76\x3f\x60\x7d\x36\xaa\xcd\xb6\x32\x7a\x26\x77\xa2\xd6\x46\x37\xc2\x68\xdb\x78\x95\x34\x5a\xc9\x34\x45\x06\xcf\x34\xd9\x7a\xb3\xe5\xe2\xcb\x61\x69\xf9\x8f\x40\x9e\xfc\x30\x0a\x3b\x8b\x6c\x3a\x09\xa7\x93\x19\x19\x0f\x5b\x76\xeb\xe7\xb2\x6d\xcb\x86\x29\x99\x03\xbe\x1a\x14\xda\xc6\x75\x94\x65\x97\x1d\x27\xd2\xeb\x7e\x7b\x5f\x46\x70\xbe\xbf\x7b\x92\x1d\xff\x1b\x00\x00\xff\xff\x1f\x76\x8d\x76\x62\x2e\x00\x00")

func migrations20181113_013141_workflow_elementsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20181113_013141_workflow_elementsSql,
		"migrations/20181113_013141_workflow_elements.sql",
	)
}

func migrations20181113_013141_workflow_elementsSql() (*asset, error) {
	bytes, err := migrations20181113_013141_workflow_elementsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20181113_013141_workflow_elements.sql", size: 11874, mode: os.FileMode(420), modTime: time.Unix(1542299346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20181114_214137_devicesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x4f\xe3\x3c\x18\xbc\xe7\x57\x3c\xe2\x92\x44\x6f\x7b\x41\xe2\x42\x25\xa4\xd2\x86\x57\x95\xaa\x74\xb7\x4d\x57\xdc\x22\x37\x36\xe0\x25\x71\xb2\xb6\xb3\x50\x10\xff\x7d\xe5\xc4\xce\x07\x24\x90\xd2\xfa\xe4\xb8\xf6\xf8\xf1\x78\x66\xdc\xf1\x18\xfe\x4b\xe8\x3d\x47\x92\xc0\x36\xb3\x22\x4e\x54\x4f\xee\x33\x02\x98\xfc\xa5\x11\x11\xa1\x90\x48\xe6\x02\x90\x00\xc2\xf2\x04\x1c\x9b\x30\xb4\x8b\x09\xb6\x47\x60\x63\x2a\xca\xbe\x3b\xe9\x5c\x5b\x7c\xd4\x2b\x31\xb9\x43\x79\x2c\xd5\x4a\x91\x20\x2e\x77\xb9\x50\xfd\x24\xc5\xba\xf7\x42\xef\x77\x84\x28\x34\x6b\xb6\xf6\xa6\x81\x07\xc1\xf4\x7a\xe9\x19\x3c\x70\x2c\x00\x8a\xa1\x6a\x3b\x7a\x2f\x08\xa7\x28\x86\x28\x65\x42\x72\x44\x99\xac\x36\xcf\x1e\xc9\x1e\x32\x4e\x13\xc4\xf7\xa0\xfa\x2c\x95\xc0\xf2\x38\x1e\x59\x00\x0c\x25\xc4\xa0\xfc\x42\x7c\xf6\x80\xb8\x73\x7e\x71\xe1\xc2\x97\xcd\x5f\x05\xe0\x6f\x97\x4b\x85\x82\x89\x88\x38\xcd\x24\x4d\xd9\x81\x28\x9a\x0a\xb0\xed\x12\x47\x95\x1c\x16\x47\x13\x09\x8a\x63\x75\x8e\x41\xcd\x54\xc2\x52\xac\xd7\x03\x5c\x2f\xfe\x5f\xf8\x01\xcc\x56\xfe\x26\x58\x4f\x55\xd7\x50\x72\x1e\xaa\x79\x22\xbc\x7b\x84\xb5\x77\xe3\xad\x3d\x7f\xe6\x6d\x8a\xb5\x02\x1c\x8a\x5d\x48\x19\xe4\x19\x56\xf7\x18\x21\x11\x21\x4c\xd4\x08\x26\x31\x69\x8c\x18\x0a\x33\x9e\x66\x84\x4b\x4a\x04\xc0\x6f\x91\xb2\xdd\xb0\x8a\x9b\x87\x7f\x3d\xcb\x10\x47\x89\x38\xbb\x7c\x7d\x7b\x2b\x98\x28\x14\x53\x4d\x6b\xa8\x68\x38\xa8\x51\x59\xeb\xbe\xb5\x8a\x5b\xb8\xcd\xb1\x4f\x18\xd6\xf7\x0d\x73\xef\x66\xba\x5d\x06\x50\x1b\xc0\x02\x28\x55\x8f\x43\x24\x01\x24\x4d\x88\x90\x28\xc9\xe0\x89\xca\x87\xe2\x13\x5e\x52\xd6\x53\x7b\xb3\xba\x92\xf3\x63\x50\xac\x86\x67\xb6\xfe\xe2\xe7\xd6\x83\x85\x3f\xf7\x6e\x0b\xa1\x87\x5a\x5f\x08\x63\x4e\x84\x92\x81\xa1\x20\x67\x7f\x60\xe5\xd7\xfe\x52\xb3\x47\xb5\x1c\xdd\x89\xc1\x2c\xc1\xea\x2b\xef\xc0\xa2\xf8\xb9\x85\xe5\x38\x4e\x43\x22\xe3\x2b\xb0\xcb\xcb\xb6\x5d\x18\x5f\x5d\x81\xad\x11\x6c\xf7\xf2\x92\x32\xe9\xf6\x98\x3e\x44\x91\xb2\xd7\x41\xde\x37\x6b\x3e\x46\xc0\xb7\x5a\xdb\xf1\xb5\x53\xfb\x7c\x56\x6d\x5f\x73\xd3\x36\x5c\x45\xd1\x40\xcb\x1d\x17\x58\xc7\xb4\xd3\x84\xdd\x51\x15\xe8\xdd\xcb\xbd\x07\x13\x5f\x4e\x7f\x4f\xbc\x1e\x1d\x9e\x75\x66\xf7\xef\xdb\xfc\xa8\xb3\x37\xd8\xff\x7e\x44\x9c\xa2\x82\x22\x5e\xc6\x63\xe8\x4a\x18\xcd\x7d\x11\x34\xe7\xe1\xbb\x9b\x68\x05\x4c\xed\xe5\xca\x46\xa3\x42\xd8\x7d\xde\x57\x09\xfd\xe9\xb3\xff\xae\x99\x34\xec\x88\x84\x12\xea\x43\x22\x14\xd2\xda\x0b\x49\x92\xe2\x00\xfd\xc2\xee\x73\x42\x40\x9e\xbb\x9f\xea\x83\x53\x43\x57\x78\xca\xd0\x18\x24\xdb\x83\x1f\xa2\x2f\xdf\x1c\xa3\x88\x06\xb1\xb5\x32\xf4\x31\xdb\xc2\x30\x17\xdd\xd0\x45\x63\xb1\x16\x5f\xf5\x4f\x75\x9e\x3e\x31\x6b\xbe\x5e\xfd\xd0\x6a\x59\xdc\x80\x77\xbb\xd8\x04\x35\x49\xb3\xe9\x66\x36\x9d\x7b\x93\xcf\x66\x55\x6a\x1c\x34\x59\x57\x58\xcd\xc5\x3c\xcd\xba\xfe\x28\x77\xfd\xa2\x3e\x26\xff\x02\x00\x00\xff\xff\xf4\x27\xa9\x93\x6b\x0b\x00\x00")

func migrations20181114_214137_devicesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20181114_214137_devicesSql,
		"migrations/20181114_214137_devices.sql",
	)
}

func migrations20181114_214137_devicesSql() (*asset, error) {
	bytes, err := migrations20181114_214137_devicesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20181114_214137_devices.sql", size: 2923, mode: os.FileMode(420), modTime: time.Unix(1543584252, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20181114_225604_device_groupSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x41\x4b\xfb\x40\x10\xc5\xef\xf9\x14\xef\xd6\xff\x1f\xc9\xc5\x6b\x4e\x5a\xa3\x14\x42\xc4\xa4\x39\x87\xed\xce\xd4\x0e\x9d\xec\x2e\xd9\x8d\xf5\xe3\x4b\x6c\xaa\x82\x08\x5e\xbc\xfe\x78\xef\x31\xf3\xcb\x73\x5c\x0d\xf2\x3c\x9a\xc4\xe8\x42\x96\xe7\x68\x9f\x2a\x88\x43\x64\x9b\xc4\x3b\xac\xba\xb0\x82\x44\xf0\x2b\xdb\x29\x31\xe1\x74\x60\x87\x74\x90\x88\x73\x6f\x0e\x49\x84\x09\x41\x85\x29\x33\x9a\x78\x44\x32\x3b\x65\x10\xbf\x88\xe5\x98\x01\x34\xfa\x00\xeb\x75\x1a\xdc\x42\x7b\x21\x58\x13\xad\x21\x2e\x7e\x28\x19\xa2\xef\x9d\xdb\xcd\xc3\xa6\xde\x82\x78\x6f\x26\x4d\x70\x93\x2a\xd6\x8f\x75\xbb\x6d\x6e\xce\xfc\x3d\x78\xdd\x2f\x33\xfd\xfe\x88\xa6\xbc\x2f\x9b\xb2\x5e\x97\xed\x65\x1c\xff\x84\xfe\xc3\x3b\x4c\x81\xe6\xcf\x97\x43\x66\x42\xac\xfc\x49\x8a\x2c\xfb\x6a\xe8\xce\x9f\xdc\xc5\xd1\x87\xa0\x19\xfe\x4a\xd1\xe8\x55\x99\xb0\x33\xf6\xf8\xe7\x9a\xe2\x60\x54\xc5\x25\xd4\x5d\x55\x15\x6f\x01\x00\x00\xff\xff\xc3\x72\x5d\x09\xe6\x01\x00\x00")

func migrations20181114_225604_device_groupSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20181114_225604_device_groupSql,
		"migrations/20181114_225604_device_group.sql",
	)
}

func migrations20181114_225604_device_groupSql() (*asset, error) {
	bytes, err := migrations20181114_225604_device_groupSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20181114_225604_device_group.sql", size: 486, mode: os.FileMode(420), modTime: time.Unix(1542216556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20181119_092050_add_workersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc1\xae\x9b\x30\x10\xbc\xfb\x2b\xf6\x16\xa2\xbe\x77\x79\xea\x3b\xe5\x44\xc0\xa9\x90\x10\xa9\x80\x54\xbd\x21\x07\x6f\x12\x0b\xb0\x91\x6d\x8a\xe8\xd7\x57\x2e\x09\x09\x69\x13\x29\x3e\xad\xd6\x3b\x3b\x66\x98\x79\x7f\x87\x2f\x8d\x38\x6a\x66\x11\x76\x2d\x29\x35\xba\xca\x0e\x2d\x42\xaf\x74\x85\xda\x14\xc6\x32\xdb\x19\x60\x06\x50\x76\x0d\x78\x0b\x94\x6c\x5f\x23\x5f\xbc\xc1\x82\x0b\x33\xd6\xcb\x15\x21\x41\x4a\xfd\x9c\x42\xee\xaf\x63\x7a\x41\x83\x47\x00\x04\x87\xf9\xd9\x8b\xa3\x41\x2d\x58\x7d\xd7\x07\xa9\x2c\xc8\xae\xae\xa1\x54\xd2\x58\xcd\x84\xb4\xd3\x3b\xda\x0a\x07\x68\xb5\x68\x98\x1e\xa0\xc2\xe1\x8d\x00\x48\xd6\xe0\x6c\xc1\x0f\xa6\x83\x13\xd3\xde\xc7\xe7\xe7\x72\x76\x91\x6c\x73\x48\x76\x71\xec\x50\x56\x3c\x44\x7d\x7d\x8c\x3a\xeb\x70\x3d\x1c\x7f\x89\x12\x27\x81\xfe\x45\x41\x48\x37\xfe\x2e\xce\xe1\x2a\x19\x01\x38\xd4\xaa\x2f\x6e\x25\x59\x47\xdf\xa2\x24\x87\x60\x9b\x64\x79\xea\xbb\xf2\xf2\xc9\x1f\x85\x1b\x36\xc5\xa1\x82\x94\x6e\x68\x4a\x93\x80\x66\x7f\x17\x18\xf0\x04\x5f\x82\x92\xd0\xb5\xdc\xfd\xb2\x92\x99\x92\x71\x74\x1d\x8e\x35\x5e\x3b\x8e\xd2\xed\x9b\xd1\x3e\xa3\xbc\x0c\xdf\xd3\x4e\xfd\x97\xa8\x47\x91\x0a\x56\x5a\xa1\xa4\xe3\x7f\x46\x3d\x1b\xbe\xe7\x9f\x5f\xbe\xf4\x88\xd1\xd6\xbc\x60\xf6\x2c\xb9\x73\x80\xb1\xac\x69\xa1\x17\xf6\x34\x1a\xe2\xb7\x92\x38\x19\xd0\xa1\xc6\xcd\xaf\xa0\x88\x8b\xc1\x6d\xa4\x42\xd5\x4b\x12\xa6\xdb\xef\xe7\x54\x44\x1b\xa0\x3f\xa3\x2c\xcf\xa6\x7c\x04\x7e\x16\xf8\x21\x5d\x11\xae\x55\xfb\xbf\xe0\xad\xc8\x9f\x00\x00\x00\xff\xff\x71\x19\xba\xa3\xa4\x03\x00\x00")

func migrations20181119_092050_add_workersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20181119_092050_add_workersSql,
		"migrations/20181119_092050_add_workers.sql",
	)
}

func migrations20181119_092050_add_workersSql() (*asset, error) {
	bytes, err := migrations20181119_092050_add_workersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20181119_092050_add_workers.sql", size: 932, mode: os.FileMode(420), modTime: time.Unix(1542594304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20170121_004649_nodes.sql": migrations20170121_004649_nodesSql,
	"migrations/20170121_005244_workflows.sql": migrations20170121_005244_workflowsSql,
	"migrations/20181109_220911_workflow_add_scenario.sql": migrations20181109_220911_workflow_add_scenarioSql,
	"migrations/20181113_013141_workflow_elements.sql": migrations20181113_013141_workflow_elementsSql,
	"migrations/20181114_214137_devices.sql": migrations20181114_214137_devicesSql,
	"migrations/20181114_225604_device_group.sql": migrations20181114_225604_device_groupSql,
	"migrations/20181119_092050_add_workers.sql": migrations20181119_092050_add_workersSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20170121_004649_nodes.sql": &bintree{migrations20170121_004649_nodesSql, map[string]*bintree{}},
		"20170121_005244_workflows.sql": &bintree{migrations20170121_005244_workflowsSql, map[string]*bintree{}},
		"20181109_220911_workflow_add_scenario.sql": &bintree{migrations20181109_220911_workflow_add_scenarioSql, map[string]*bintree{}},
		"20181113_013141_workflow_elements.sql": &bintree{migrations20181113_013141_workflow_elementsSql, map[string]*bintree{}},
		"20181114_214137_devices.sql": &bintree{migrations20181114_214137_devicesSql, map[string]*bintree{}},
		"20181114_225604_device_group.sql": &bintree{migrations20181114_225604_device_groupSql, map[string]*bintree{}},
		"20181119_092050_add_workers.sql": &bintree{migrations20181119_092050_add_workersSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

