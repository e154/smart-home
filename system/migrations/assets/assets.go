// Code generated by go-bindata.
// sources:
// migrations/20170121_004649_nodes.sql
// migrations/20170121_005244_workflows.sql
// migrations/20181109_220911_workflow_add_scenario.sql
// DO NOT EDIT!

package database

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20170121_004649_nodesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xbd\x6e\xdb\x30\x18\xdc\xf9\x14\xb7\xc9\x41\xed\x25\x40\xa6\x4c\xaa\xa5\x00\x06\x04\xb9\x89\xa5\x22\x9b\x40\x8b\x1f\xe2\x0f\x96\x48\x96\xa4\xe0\xb8\x4f\x5f\xd0\x52\x5c\xdb\x2d\xd0\x86\x93\x7e\xee\x87\xb8\xbb\xc5\x02\x5f\x7a\x7e\x73\x32\x10\x6a\x2b\x16\x0b\x6c\x9e\x0b\xb0\x86\xa7\x36\xb0\xd1\x48\x6a\x9b\x80\x3d\xe8\x9d\xda\x21\x90\xc2\x61\x47\x1a\x61\xc7\x1e\x23\x2f\x82\xd8\x43\x5a\xdb\x31\x29\xd1\x3a\x8a\x5a\xe1\x68\x09\xda\x28\xf2\x8d\x0f\x32\x0c\x1e\xd2\x83\xf4\xd0\x63\x96\x90\x96\xdb\x8e\x54\x32\x47\xa2\xd8\x8f\xcf\x77\x8f\x42\x2c\x5f\xf2\xb4\xca\x51\xa5\x5f\x8b\x7c\xe4\x62\x26\x00\x56\x38\x9f\x2d\xbf\x79\x72\x2c\x3b\xdc\x1c\x6d\x02\xf4\xd0\x75\x68\x8d\xf6\xc1\x49\xd6\x61\xb2\xb7\x7b\x3a\xc2\x3a\xee\xa5\x3b\x62\x4f\xc7\x79\x94\xb4\xbf\x99\xdf\xa5\x5b\xee\xa4\x9b\xdd\x3f\x3c\xdc\x5d\x49\x96\xeb\x0a\x65\x5d\x14\x91\x60\x8d\x0b\x67\xab\xa1\x27\xc7\xed\xed\x0d\xae\x09\x5a\xf6\xf4\x29\x07\x45\xbe\x75\x6c\x4f\x71\x56\xf4\x1e\xfe\x94\xbf\x21\x8c\x41\xab\x46\x06\x20\x70\x4f\x3e\xc8\xde\xe2\xc0\x61\x77\x7a\xc5\x4f\xa3\x29\xe2\x06\xab\xfe\x89\x3b\x45\x17\xc1\x53\x57\x53\xa4\x17\xed\xfd\xed\x16\xc8\xf2\xa7\xb4\x2e\x2a\x9c\x1b\x15\x17\x35\xd6\xe5\xea\xb9\xce\xb1\x2a\xb3\xfc\xf5\x94\x5f\xc3\xb6\xb9\x6f\x46\xd5\x41\xff\x10\xc0\xba\xfc\xa8\x39\xfe\x9f\x83\x6d\xe4\x5f\x4e\x32\x33\x07\xfd\x31\xca\xf3\x22\xe3\xc7\xff\xda\xa4\x33\x5d\x47\x0a\x5b\xd9\xee\x45\xf6\xb2\xfe\x36\x4d\x6b\xf5\x84\xfc\x75\xb5\xa9\x36\x93\xfb\x32\xdd\x2c\xd3\x2c\x7f\x14\xbf\x02\x00\x00\xff\xff\x93\x5e\x11\x77\x0d\x03\x00\x00")

func migrations20170121_004649_nodesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20170121_004649_nodesSql,
		"migrations/20170121_004649_nodes.sql",
	)
}

func migrations20170121_004649_nodesSql() (*asset, error) {
	bytes, err := migrations20170121_004649_nodesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20170121_004649_nodes.sql", size: 781, mode: os.FileMode(420), modTime: time.Unix(1541524621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20170121_005244_workflowsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x51\x6f\xda\x30\x10\x7e\xcf\xaf\xb8\x37\xa8\x56\x5e\x2a\xf5\xa9\x4f\x14\xd2\x09\x09\x85\x15\xc2\xd4\xb7\xc8\xc4\x07\x78\x24\x76\x66\x3b\xa3\xec\xd7\x4f\x86\x60\x1c\x62\x68\x98\xa6\x6a\xf7\x84\xed\xfb\x9c\xbb\xef\xbb\x33\xd7\xeb\xc1\x97\x9c\xad\x24\xd1\x08\xf3\x22\xe8\xf5\x60\xf6\x3a\x06\xc6\x41\x61\xaa\x99\xe0\xd0\x99\x17\x1d\x60\x0a\xf0\x1d\xd3\x52\x23\x85\xed\x1a\x39\xe8\x35\x53\x70\xc0\x19\x27\xa6\x80\x14\x45\xc6\x90\x06\xa9\x44\x73\x97\xde\x15\x08\x2a\x95\xac\xd0\x2a\xc9\x08\x5f\x01\x51\x80\xbc\xcc\xa1\xdb\xd1\xaa\x73\x0f\x9d\x54\x2c\x97\x88\x07\x17\xb3\xfe\x41\x7e\x91\x6a\x75\xf7\x14\x04\x83\x69\xd8\x8f\x43\x88\xfb\xcf\xe3\xf0\x78\x11\x74\x03\x00\x46\xc1\xda\x82\xad\x14\x4a\x46\x32\xe0\x42\x03\x2f\xb3\x0c\x52\xc1\x95\x96\x84\x71\x6d\x3f\x5f\x6c\x70\x07\x85\x64\x39\x91\x3b\xd8\xe0\xee\x3e\x00\xd8\x87\x54\x59\x2d\xcc\x68\x12\x43\x34\x1f\x8f\x61\x18\xbe\xf4\xe7\xe3\xb8\x16\x98\x41\x72\x92\xe3\x11\xf9\x9d\xc8\xc1\x9a\xc8\xee\xc3\xe3\xe3\x9d\x45\x1a\x27\x25\x4a\x99\x56\x6e\x31\xbe\x6b\x7b\x40\xab\x8c\x0d\x6b\xb5\x83\x54\xe4\x05\xcb\x90\x36\x10\x07\x42\x69\x42\x34\x80\x66\x39\x2a\x4d\xf2\x02\xb6\x4c\xaf\xf7\x4b\xf8\x2d\x38\xda\xf4\x0d\xa0\x2c\xa8\x05\x7c\x8c\x08\x0c\xd9\xae\x68\x5b\x21\x37\xcb\x4c\x6c\x55\xa2\x34\xd1\xa5\x72\x84\x43\x4e\x16\x19\x52\xa3\x16\x65\xea\xf0\xbb\xa1\x95\xc5\x37\xd4\xf2\xc8\x76\x66\x3e\x15\x4f\xf1\xf8\x74\x74\xd5\x00\xaf\x2c\xae\xd5\x24\x3a\x64\x57\xb7\x46\xf2\xe7\xc8\x53\x59\x58\x32\xce\x54\xb5\xb6\x57\xd1\x67\x3e\x65\xad\xdd\x2e\x71\x7b\x68\x70\x51\xac\x44\xa5\xc8\x89\x64\xe2\x5a\x8f\xdd\x20\xd6\xe9\x3e\xaf\x6a\xd6\x8d\x51\x78\x1e\x7d\x1d\x45\x31\x0c\x26\xd1\x2c\x9e\xf6\xcd\x4f\xcf\x25\x0f\xc9\x49\x99\xe5\x06\xa6\xe1\x4b\x38\x0d\xa3\x41\x38\x73\xcb\x8d\xd1\x3b\x10\xbc\x22\x07\x52\xa2\x52\x42\xd1\xec\x50\xcc\xf0\xb4\x73\xb5\x89\x2f\x56\xcb\x4e\x69\xcc\x93\x3d\xae\x15\xe0\x33\xda\xb6\x92\x72\x1e\x8d\x5e\xe7\x21\x8c\xa2\x61\xf8\xe6\x06\xea\xb0\xe6\x50\x59\xf2\x9f\x01\xc0\x24\xf2\x6a\xef\xa0\x3f\xae\x95\xe4\xd2\xb3\xec\xa9\x9d\x56\xc5\x92\x5c\x7b\xb1\x9b\xde\xff\xae\x78\x5c\x0a\x6e\xa8\xa2\x43\xb8\x49\x3d\xf5\x66\x48\x95\x9b\x1b\xd0\x31\xd1\x7a\x38\x96\xcf\x96\x31\xec\x8b\xa0\xd7\xbb\x28\xd3\xdf\xfc\x69\x9e\xc3\xff\xcf\xfe\x75\x99\xff\x44\xc2\xf7\xb9\x23\x5b\xad\xab\x77\xd7\x10\x56\x6f\xfd\x8b\x7d\x79\xd6\x90\x9e\x3e\x54\xd0\x3d\xf6\x9d\x3b\x95\x0d\xc5\x96\x1f\xe7\x32\x3b\x94\x99\xcd\x56\x63\x99\x14\x99\x19\x2a\x16\x24\xdd\x04\xc3\xe9\xe4\x5b\x55\x24\xa3\x17\x08\xdf\x46\xb3\xd8\xe5\x7f\xd0\x9f\x0d\xfa\xc3\xf0\xe9\xba\x9f\x2d\xab\xd6\xee\xc7\xce\xba\x11\xd0\xf2\x43\x0d\x2f\x2a\x45\xe1\x9f\x64\xdc\x33\x77\xe6\x7b\xfa\x13\x00\x00\xff\xff\xc6\x9f\xc2\x11\x05\x0b\x00\x00")

func migrations20170121_005244_workflowsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20170121_005244_workflowsSql,
		"migrations/20170121_005244_workflows.sql",
	)
}

func migrations20170121_005244_workflowsSql() (*asset, error) {
	bytes, err := migrations20170121_005244_workflowsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20170121_005244_workflows.sql", size: 2821, mode: os.FileMode(420), modTime: time.Unix(1541688016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20181109_220911_workflow_add_scenarioSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3f\x6b\xc3\x30\x10\xc5\x77\x7d\x8a\xb7\xa5\xa5\xb8\x43\xd7\x4e\x8e\xad\x96\x80\xeb\x50\xff\x99\x8d\x2c\x5d\x1a\x61\x45\x12\x92\x8c\xfb\xf1\x8b\x29\x49\x0a\xc9\xd0\xed\xf8\xf1\xde\x71\xf7\xcb\x32\x3c\x9d\xf4\x57\x10\x89\xd0\x7b\x96\x65\x68\x3f\x2b\x68\x8b\x48\x32\x69\x67\xb1\xe9\xfd\x06\x3a\x82\xbe\x49\xce\x89\x14\x96\x23\x59\xa4\xa3\x8e\xf8\xed\xad\x21\x1d\x21\xbc\x37\x9a\x14\xcb\xab\x8e\x37\xe8\xf2\x6d\xc5\xe1\xe7\xd1\x68\xf9\xbc\xb8\x30\x1d\x8c\x5b\x22\x03\xf2\xb2\x44\xb1\xaf\xfa\x8f\x1a\x67\x3c\x44\x49\x56\x04\xed\x06\xad\xb0\xdd\xbd\xef\xea\x0e\xc5\xbe\x6e\xbb\x26\x5f\xc7\x4b\xec\x65\xb8\x69\xc4\xe1\x30\xa1\xe1\x6f\xbc\xe1\x75\xc1\xdb\xdb\x95\x11\x0f\x5a\x3d\xc2\x59\xcc\x5e\xad\x3f\x4a\x11\xa5\x50\xb4\x12\x45\x86\xae\xe4\x95\xb1\xbf\x2e\x4a\xb7\xd8\xb3\x8d\x8b\x8a\x15\xfe\x4b\x46\x70\xc6\x90\xc2\x28\xe4\xc4\x84\x49\x14\x90\xc4\x68\xe8\x9e\x10\x15\x9c\x87\x74\x66\x3e\xd9\xfb\x46\xae\xf7\xfd\x04\x00\x00\xff\xff\x4a\xae\xf8\x19\xac\x01\x00\x00")

func migrations20181109_220911_workflow_add_scenarioSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20181109_220911_workflow_add_scenarioSql,
		"migrations/20181109_220911_workflow_add_scenario.sql",
	)
}

func migrations20181109_220911_workflow_add_scenarioSql() (*asset, error) {
	bytes, err := migrations20181109_220911_workflow_add_scenarioSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20181109_220911_workflow_add_scenario.sql", size: 428, mode: os.FileMode(420), modTime: time.Unix(1541776428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20170121_004649_nodes.sql": migrations20170121_004649_nodesSql,
	"migrations/20170121_005244_workflows.sql": migrations20170121_005244_workflowsSql,
	"migrations/20181109_220911_workflow_add_scenario.sql": migrations20181109_220911_workflow_add_scenarioSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20170121_004649_nodes.sql": &bintree{migrations20170121_004649_nodesSql, map[string]*bintree{}},
		"20170121_005244_workflows.sql": &bintree{migrations20170121_005244_workflowsSql, map[string]*bintree{}},
		"20181109_220911_workflow_add_scenario.sql": &bintree{migrations20181109_220911_workflow_add_scenarioSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

