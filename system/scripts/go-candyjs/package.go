// This file is part of the Smart Home
// Program complex distribution https://github.com/e154/smart-home
// Copyright (C) 2016-2020, Filippov Alex
//
// This library is free software: you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Library General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library.  If not, see
// <https://www.gnu.org/licenses/>.

package candyjs

import "errors"

// PackagePusher should be a function capable of register all functions and
// types contained on a golang packages. This functions are generated by the
// go generate tool `candyjs` a example of this header is:
//   //go:generate candyjs import time
type PackagePusher func(ctx *Context)

// PackageNotFound error is throw when a package cannot be found, usually this
// happend when a PackagePusher function was not registered using
// RegisterPackagePusher.
var ErrPackageNotFound = errors.New("Unable to find the requested package")
var pushers = make(map[string]PackagePusher, 0)

// RegisterPackagePusher registers a PackagePusher into the global storage, this
// storage is a private map defined on the candyjs package. The pushers are
// launch by the function PushGlobalPackage.
func RegisterPackagePusher(pckgName string, f PackagePusher) {
	pushers[pckgName] = f
}

// PushGlobalPackage all the functions and types from the given package using
// the pre-registered PackagePusher function.
func (ctx *Context) PushGlobalPackage(pckgName, alias string) error {
	ctx.PushGlobalObject()

	err := ctx.pushPackage(pckgName)
	if err != nil {
		return err
	}

	ctx.PutPropString(-2, alias)
	ctx.Pop()

	return nil
}

func (ctx *Context) pushPackage(pckgName string) error {
	f, ok := pushers[pckgName]
	if !ok {
		return ErrPackageNotFound
	}

	f(ctx)

	return nil
}
